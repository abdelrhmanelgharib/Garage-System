
STM-VE-TX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000fd0  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08001164  0800116c  0001116c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08001164  08001164  0001116c  2**0
                  CONTENTS
  4 .ARM          00000000  08001164  08001164  0001116c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001164  0800116c  0001116c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001164  08001164  00011164  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001168  08001168  00011168  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  0001116c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  20000000  0800116c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  0800116c  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001116c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000139f  00000000  00000000  0001119c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000007d8  00000000  00000000  0001253b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000210  00000000  00000000  00012d18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000188  00000000  00000000  00012f28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00000e0f  00000000  00000000  000130b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001282  00000000  00000000  00013ebf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00005d82  00000000  00000000  00015141  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0001aec3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000600  00000000  00000000  0001af18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800114c 	.word	0x0800114c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	0800114c 	.word	0x0800114c

080001d4 <EXTI0_IRQHandler>:
		}
	}
}

void EXTI0_IRQHandler(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
	EXTI_pfCallBack0();
 80001d8:	4b05      	ldr	r3, [pc, #20]	; (80001f0 <EXTI0_IRQHandler+0x1c>)
 80001da:	681b      	ldr	r3, [r3, #0]
 80001dc:	4798      	blx	r3
	SET_BIT(EXTI-> PR , 0);
 80001de:	4b05      	ldr	r3, [pc, #20]	; (80001f4 <EXTI0_IRQHandler+0x20>)
 80001e0:	695b      	ldr	r3, [r3, #20]
 80001e2:	4a04      	ldr	r2, [pc, #16]	; (80001f4 <EXTI0_IRQHandler+0x20>)
 80001e4:	f043 0301 	orr.w	r3, r3, #1
 80001e8:	6153      	str	r3, [r2, #20]
}
 80001ea:	bf00      	nop
 80001ec:	bd80      	pop	{r7, pc}
 80001ee:	bf00      	nop
 80001f0:	2000001c 	.word	0x2000001c
 80001f4:	40013c00 	.word	0x40013c00

080001f8 <EXTI1_IRQHandler>:
void EXTI1_IRQHandler(void)
{
 80001f8:	b580      	push	{r7, lr}
 80001fa:	af00      	add	r7, sp, #0
	EXTI_pfCallBack1();
 80001fc:	4b05      	ldr	r3, [pc, #20]	; (8000214 <EXTI1_IRQHandler+0x1c>)
 80001fe:	681b      	ldr	r3, [r3, #0]
 8000200:	4798      	blx	r3
	SET_BIT(EXTI-> PR , 1);
 8000202:	4b05      	ldr	r3, [pc, #20]	; (8000218 <EXTI1_IRQHandler+0x20>)
 8000204:	695b      	ldr	r3, [r3, #20]
 8000206:	4a04      	ldr	r2, [pc, #16]	; (8000218 <EXTI1_IRQHandler+0x20>)
 8000208:	f043 0302 	orr.w	r3, r3, #2
 800020c:	6153      	str	r3, [r2, #20]
}
 800020e:	bf00      	nop
 8000210:	bd80      	pop	{r7, pc}
 8000212:	bf00      	nop
 8000214:	20000020 	.word	0x20000020
 8000218:	40013c00 	.word	0x40013c00

0800021c <GPIO_void_setPin_Direction>:
#include "GPIO_Config.h"
#include "GPIO_Interface.h"

#include "BIT_MATH.h"
void GPIO_void_setPin_Direction(PORT_ID port , PIN_ID pin , DIRECTION_MODE Direction)
{
 800021c:	b480      	push	{r7}
 800021e:	b083      	sub	sp, #12
 8000220:	af00      	add	r7, sp, #0
 8000222:	4603      	mov	r3, r0
 8000224:	71fb      	strb	r3, [r7, #7]
 8000226:	460b      	mov	r3, r1
 8000228:	71bb      	strb	r3, [r7, #6]
 800022a:	4613      	mov	r3, r2
 800022c:	717b      	strb	r3, [r7, #5]
	switch(port)
 800022e:	79fb      	ldrb	r3, [r7, #7]
 8000230:	2b05      	cmp	r3, #5
 8000232:	f200 82d9 	bhi.w	80007e8 <GPIO_void_setPin_Direction+0x5cc>
 8000236:	a201      	add	r2, pc, #4	; (adr r2, 800023c <GPIO_void_setPin_Direction+0x20>)
 8000238:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800023c:	08000255 	.word	0x08000255
 8000240:	0800033f 	.word	0x0800033f
 8000244:	08000427 	.word	0x08000427
 8000248:	0800050f 	.word	0x0800050f
 800024c:	08000603 	.word	0x08000603
 8000250:	080006eb 	.word	0x080006eb
	{
	case PORT_A:
		switch(Direction)
 8000254:	797b      	ldrb	r3, [r7, #5]
 8000256:	2b03      	cmp	r3, #3
 8000258:	f200 82bb 	bhi.w	80007d2 <GPIO_void_setPin_Direction+0x5b6>
 800025c:	a201      	add	r2, pc, #4	; (adr r2, 8000264 <GPIO_void_setPin_Direction+0x48>)
 800025e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000262:	bf00      	nop
 8000264:	08000275 	.word	0x08000275
 8000268:	080002a9 	.word	0x080002a9
 800026c:	080002db 	.word	0x080002db
 8000270:	0800030d 	.word	0x0800030d
		{
		case INPUT_MODE:Clear_bit(GPIOA_MODER,pin*2);Clear_bit(GPIOA_MODER,(pin*2+1));break;
 8000274:	4bad      	ldr	r3, [pc, #692]	; (800052c <GPIO_void_setPin_Direction+0x310>)
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	79ba      	ldrb	r2, [r7, #6]
 800027a:	0052      	lsls	r2, r2, #1
 800027c:	2101      	movs	r1, #1
 800027e:	fa01 f202 	lsl.w	r2, r1, r2
 8000282:	43d2      	mvns	r2, r2
 8000284:	4611      	mov	r1, r2
 8000286:	4aa9      	ldr	r2, [pc, #676]	; (800052c <GPIO_void_setPin_Direction+0x310>)
 8000288:	400b      	ands	r3, r1
 800028a:	6013      	str	r3, [r2, #0]
 800028c:	4ba7      	ldr	r3, [pc, #668]	; (800052c <GPIO_void_setPin_Direction+0x310>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	79ba      	ldrb	r2, [r7, #6]
 8000292:	0052      	lsls	r2, r2, #1
 8000294:	3201      	adds	r2, #1
 8000296:	2101      	movs	r1, #1
 8000298:	fa01 f202 	lsl.w	r2, r1, r2
 800029c:	43d2      	mvns	r2, r2
 800029e:	4611      	mov	r1, r2
 80002a0:	4aa2      	ldr	r2, [pc, #648]	; (800052c <GPIO_void_setPin_Direction+0x310>)
 80002a2:	400b      	ands	r3, r1
 80002a4:	6013      	str	r3, [r2, #0]
 80002a6:	e049      	b.n	800033c <GPIO_void_setPin_Direction+0x120>
		case GENERAL_PURPOSE_OUTPUT_MODE:SET_BIT(GPIOA_MODER,pin*2);Clear_bit(GPIOA_MODER,(pin*2+1));
 80002a8:	4ba0      	ldr	r3, [pc, #640]	; (800052c <GPIO_void_setPin_Direction+0x310>)
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	79ba      	ldrb	r2, [r7, #6]
 80002ae:	0052      	lsls	r2, r2, #1
 80002b0:	2101      	movs	r1, #1
 80002b2:	fa01 f202 	lsl.w	r2, r1, r2
 80002b6:	4611      	mov	r1, r2
 80002b8:	4a9c      	ldr	r2, [pc, #624]	; (800052c <GPIO_void_setPin_Direction+0x310>)
 80002ba:	430b      	orrs	r3, r1
 80002bc:	6013      	str	r3, [r2, #0]
 80002be:	4b9b      	ldr	r3, [pc, #620]	; (800052c <GPIO_void_setPin_Direction+0x310>)
 80002c0:	681b      	ldr	r3, [r3, #0]
 80002c2:	79ba      	ldrb	r2, [r7, #6]
 80002c4:	0052      	lsls	r2, r2, #1
 80002c6:	3201      	adds	r2, #1
 80002c8:	2101      	movs	r1, #1
 80002ca:	fa01 f202 	lsl.w	r2, r1, r2
 80002ce:	43d2      	mvns	r2, r2
 80002d0:	4611      	mov	r1, r2
 80002d2:	4a96      	ldr	r2, [pc, #600]	; (800052c <GPIO_void_setPin_Direction+0x310>)
 80002d4:	400b      	ands	r3, r1
 80002d6:	6013      	str	r3, [r2, #0]
//		switch(OUTPUT_TYPE)
//		{
//		case OUTPUT_PUSH_PULL: Clear_bit(GPIOA_OTYPER,pin);break;
//		case OUTPUT_OPEN_DRAIN:SET_BIT(GPIOA_OTYPER,pin);break;
//		}
		break;
 80002d8:	e030      	b.n	800033c <GPIO_void_setPin_Direction+0x120>
		case ALTERNATIVE_FUNCTION_MODE:Clear_bit(GPIOA_MODER,pin*2);SET_BIT(GPIOA_MODER,(pin*2+1));break;
 80002da:	4b94      	ldr	r3, [pc, #592]	; (800052c <GPIO_void_setPin_Direction+0x310>)
 80002dc:	681b      	ldr	r3, [r3, #0]
 80002de:	79ba      	ldrb	r2, [r7, #6]
 80002e0:	0052      	lsls	r2, r2, #1
 80002e2:	2101      	movs	r1, #1
 80002e4:	fa01 f202 	lsl.w	r2, r1, r2
 80002e8:	43d2      	mvns	r2, r2
 80002ea:	4611      	mov	r1, r2
 80002ec:	4a8f      	ldr	r2, [pc, #572]	; (800052c <GPIO_void_setPin_Direction+0x310>)
 80002ee:	400b      	ands	r3, r1
 80002f0:	6013      	str	r3, [r2, #0]
 80002f2:	4b8e      	ldr	r3, [pc, #568]	; (800052c <GPIO_void_setPin_Direction+0x310>)
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	79ba      	ldrb	r2, [r7, #6]
 80002f8:	0052      	lsls	r2, r2, #1
 80002fa:	3201      	adds	r2, #1
 80002fc:	2101      	movs	r1, #1
 80002fe:	fa01 f202 	lsl.w	r2, r1, r2
 8000302:	4611      	mov	r1, r2
 8000304:	4a89      	ldr	r2, [pc, #548]	; (800052c <GPIO_void_setPin_Direction+0x310>)
 8000306:	430b      	orrs	r3, r1
 8000308:	6013      	str	r3, [r2, #0]
 800030a:	e017      	b.n	800033c <GPIO_void_setPin_Direction+0x120>
		case ANALOG_MODE:SET_BIT(GPIOA_MODER,pin*2);SET_BIT(GPIOA_MODER,(pin*2+1));break;
 800030c:	4b87      	ldr	r3, [pc, #540]	; (800052c <GPIO_void_setPin_Direction+0x310>)
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	79ba      	ldrb	r2, [r7, #6]
 8000312:	0052      	lsls	r2, r2, #1
 8000314:	2101      	movs	r1, #1
 8000316:	fa01 f202 	lsl.w	r2, r1, r2
 800031a:	4611      	mov	r1, r2
 800031c:	4a83      	ldr	r2, [pc, #524]	; (800052c <GPIO_void_setPin_Direction+0x310>)
 800031e:	430b      	orrs	r3, r1
 8000320:	6013      	str	r3, [r2, #0]
 8000322:	4b82      	ldr	r3, [pc, #520]	; (800052c <GPIO_void_setPin_Direction+0x310>)
 8000324:	681b      	ldr	r3, [r3, #0]
 8000326:	79ba      	ldrb	r2, [r7, #6]
 8000328:	0052      	lsls	r2, r2, #1
 800032a:	3201      	adds	r2, #1
 800032c:	2101      	movs	r1, #1
 800032e:	fa01 f202 	lsl.w	r2, r1, r2
 8000332:	4611      	mov	r1, r2
 8000334:	4a7d      	ldr	r2, [pc, #500]	; (800052c <GPIO_void_setPin_Direction+0x310>)
 8000336:	430b      	orrs	r3, r1
 8000338:	6013      	str	r3, [r2, #0]
 800033a:	bf00      	nop
		}
	break;
 800033c:	e249      	b.n	80007d2 <GPIO_void_setPin_Direction+0x5b6>

	case PORT_B:
		switch(Direction)
 800033e:	797b      	ldrb	r3, [r7, #5]
 8000340:	2b03      	cmp	r3, #3
 8000342:	f200 8248 	bhi.w	80007d6 <GPIO_void_setPin_Direction+0x5ba>
 8000346:	a201      	add	r2, pc, #4	; (adr r2, 800034c <GPIO_void_setPin_Direction+0x130>)
 8000348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800034c:	0800035d 	.word	0x0800035d
 8000350:	08000391 	.word	0x08000391
 8000354:	080003c3 	.word	0x080003c3
 8000358:	080003f5 	.word	0x080003f5
		{
		case INPUT_MODE:Clear_bit(GPIOB_MODER,pin*2);Clear_bit(GPIOB_MODER,(pin*2+1));break;
 800035c:	4b74      	ldr	r3, [pc, #464]	; (8000530 <GPIO_void_setPin_Direction+0x314>)
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	79ba      	ldrb	r2, [r7, #6]
 8000362:	0052      	lsls	r2, r2, #1
 8000364:	2101      	movs	r1, #1
 8000366:	fa01 f202 	lsl.w	r2, r1, r2
 800036a:	43d2      	mvns	r2, r2
 800036c:	4611      	mov	r1, r2
 800036e:	4a70      	ldr	r2, [pc, #448]	; (8000530 <GPIO_void_setPin_Direction+0x314>)
 8000370:	400b      	ands	r3, r1
 8000372:	6013      	str	r3, [r2, #0]
 8000374:	4b6e      	ldr	r3, [pc, #440]	; (8000530 <GPIO_void_setPin_Direction+0x314>)
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	79ba      	ldrb	r2, [r7, #6]
 800037a:	0052      	lsls	r2, r2, #1
 800037c:	3201      	adds	r2, #1
 800037e:	2101      	movs	r1, #1
 8000380:	fa01 f202 	lsl.w	r2, r1, r2
 8000384:	43d2      	mvns	r2, r2
 8000386:	4611      	mov	r1, r2
 8000388:	4a69      	ldr	r2, [pc, #420]	; (8000530 <GPIO_void_setPin_Direction+0x314>)
 800038a:	400b      	ands	r3, r1
 800038c:	6013      	str	r3, [r2, #0]
 800038e:	e049      	b.n	8000424 <GPIO_void_setPin_Direction+0x208>
		case GENERAL_PURPOSE_OUTPUT_MODE:SET_BIT(GPIOB_MODER,pin*2);Clear_bit(GPIOB_MODER,(pin*2+1));
 8000390:	4b67      	ldr	r3, [pc, #412]	; (8000530 <GPIO_void_setPin_Direction+0x314>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	79ba      	ldrb	r2, [r7, #6]
 8000396:	0052      	lsls	r2, r2, #1
 8000398:	2101      	movs	r1, #1
 800039a:	fa01 f202 	lsl.w	r2, r1, r2
 800039e:	4611      	mov	r1, r2
 80003a0:	4a63      	ldr	r2, [pc, #396]	; (8000530 <GPIO_void_setPin_Direction+0x314>)
 80003a2:	430b      	orrs	r3, r1
 80003a4:	6013      	str	r3, [r2, #0]
 80003a6:	4b62      	ldr	r3, [pc, #392]	; (8000530 <GPIO_void_setPin_Direction+0x314>)
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	79ba      	ldrb	r2, [r7, #6]
 80003ac:	0052      	lsls	r2, r2, #1
 80003ae:	3201      	adds	r2, #1
 80003b0:	2101      	movs	r1, #1
 80003b2:	fa01 f202 	lsl.w	r2, r1, r2
 80003b6:	43d2      	mvns	r2, r2
 80003b8:	4611      	mov	r1, r2
 80003ba:	4a5d      	ldr	r2, [pc, #372]	; (8000530 <GPIO_void_setPin_Direction+0x314>)
 80003bc:	400b      	ands	r3, r1
 80003be:	6013      	str	r3, [r2, #0]
//		switch(OUTPUT_TYPE)
//		{
//		case OUTPUT_PUSH_PULL: Clear_bit(GPIOB_OTYPER,pin);break;
//		case OUTPUT_OPEN_DRAIN:SET_BIT(GPIOB_OTYPER,pin);break;
//		}
		break;
 80003c0:	e030      	b.n	8000424 <GPIO_void_setPin_Direction+0x208>
		case ALTERNATIVE_FUNCTION_MODE:Clear_bit(GPIOB_MODER,pin*2);SET_BIT(GPIOB_MODER,(pin*2+1));break;
 80003c2:	4b5b      	ldr	r3, [pc, #364]	; (8000530 <GPIO_void_setPin_Direction+0x314>)
 80003c4:	681b      	ldr	r3, [r3, #0]
 80003c6:	79ba      	ldrb	r2, [r7, #6]
 80003c8:	0052      	lsls	r2, r2, #1
 80003ca:	2101      	movs	r1, #1
 80003cc:	fa01 f202 	lsl.w	r2, r1, r2
 80003d0:	43d2      	mvns	r2, r2
 80003d2:	4611      	mov	r1, r2
 80003d4:	4a56      	ldr	r2, [pc, #344]	; (8000530 <GPIO_void_setPin_Direction+0x314>)
 80003d6:	400b      	ands	r3, r1
 80003d8:	6013      	str	r3, [r2, #0]
 80003da:	4b55      	ldr	r3, [pc, #340]	; (8000530 <GPIO_void_setPin_Direction+0x314>)
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	79ba      	ldrb	r2, [r7, #6]
 80003e0:	0052      	lsls	r2, r2, #1
 80003e2:	3201      	adds	r2, #1
 80003e4:	2101      	movs	r1, #1
 80003e6:	fa01 f202 	lsl.w	r2, r1, r2
 80003ea:	4611      	mov	r1, r2
 80003ec:	4a50      	ldr	r2, [pc, #320]	; (8000530 <GPIO_void_setPin_Direction+0x314>)
 80003ee:	430b      	orrs	r3, r1
 80003f0:	6013      	str	r3, [r2, #0]
 80003f2:	e017      	b.n	8000424 <GPIO_void_setPin_Direction+0x208>
		case ANALOG_MODE:SET_BIT(GPIOB_MODER,pin*2);SET_BIT(GPIOB_MODER,(pin*2+1));break;
 80003f4:	4b4e      	ldr	r3, [pc, #312]	; (8000530 <GPIO_void_setPin_Direction+0x314>)
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	79ba      	ldrb	r2, [r7, #6]
 80003fa:	0052      	lsls	r2, r2, #1
 80003fc:	2101      	movs	r1, #1
 80003fe:	fa01 f202 	lsl.w	r2, r1, r2
 8000402:	4611      	mov	r1, r2
 8000404:	4a4a      	ldr	r2, [pc, #296]	; (8000530 <GPIO_void_setPin_Direction+0x314>)
 8000406:	430b      	orrs	r3, r1
 8000408:	6013      	str	r3, [r2, #0]
 800040a:	4b49      	ldr	r3, [pc, #292]	; (8000530 <GPIO_void_setPin_Direction+0x314>)
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	79ba      	ldrb	r2, [r7, #6]
 8000410:	0052      	lsls	r2, r2, #1
 8000412:	3201      	adds	r2, #1
 8000414:	2101      	movs	r1, #1
 8000416:	fa01 f202 	lsl.w	r2, r1, r2
 800041a:	4611      	mov	r1, r2
 800041c:	4a44      	ldr	r2, [pc, #272]	; (8000530 <GPIO_void_setPin_Direction+0x314>)
 800041e:	430b      	orrs	r3, r1
 8000420:	6013      	str	r3, [r2, #0]
 8000422:	bf00      	nop
		}
	break;
 8000424:	e1d7      	b.n	80007d6 <GPIO_void_setPin_Direction+0x5ba>

	case PORT_C:
		switch(Direction)
 8000426:	797b      	ldrb	r3, [r7, #5]
 8000428:	2b03      	cmp	r3, #3
 800042a:	f200 81d6 	bhi.w	80007da <GPIO_void_setPin_Direction+0x5be>
 800042e:	a201      	add	r2, pc, #4	; (adr r2, 8000434 <GPIO_void_setPin_Direction+0x218>)
 8000430:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000434:	08000445 	.word	0x08000445
 8000438:	08000479 	.word	0x08000479
 800043c:	080004ab 	.word	0x080004ab
 8000440:	080004dd 	.word	0x080004dd
		{
		case INPUT_MODE:Clear_bit(GPIOC_MODER,pin*2);Clear_bit(GPIOC_MODER,(pin*2+1));break;
 8000444:	4b3b      	ldr	r3, [pc, #236]	; (8000534 <GPIO_void_setPin_Direction+0x318>)
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	79ba      	ldrb	r2, [r7, #6]
 800044a:	0052      	lsls	r2, r2, #1
 800044c:	2101      	movs	r1, #1
 800044e:	fa01 f202 	lsl.w	r2, r1, r2
 8000452:	43d2      	mvns	r2, r2
 8000454:	4611      	mov	r1, r2
 8000456:	4a37      	ldr	r2, [pc, #220]	; (8000534 <GPIO_void_setPin_Direction+0x318>)
 8000458:	400b      	ands	r3, r1
 800045a:	6013      	str	r3, [r2, #0]
 800045c:	4b35      	ldr	r3, [pc, #212]	; (8000534 <GPIO_void_setPin_Direction+0x318>)
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	79ba      	ldrb	r2, [r7, #6]
 8000462:	0052      	lsls	r2, r2, #1
 8000464:	3201      	adds	r2, #1
 8000466:	2101      	movs	r1, #1
 8000468:	fa01 f202 	lsl.w	r2, r1, r2
 800046c:	43d2      	mvns	r2, r2
 800046e:	4611      	mov	r1, r2
 8000470:	4a30      	ldr	r2, [pc, #192]	; (8000534 <GPIO_void_setPin_Direction+0x318>)
 8000472:	400b      	ands	r3, r1
 8000474:	6013      	str	r3, [r2, #0]
 8000476:	e049      	b.n	800050c <GPIO_void_setPin_Direction+0x2f0>
		case GENERAL_PURPOSE_OUTPUT_MODE:SET_BIT(GPIOC_MODER,pin*2);Clear_bit(GPIOC_MODER,(pin*2+1));
 8000478:	4b2e      	ldr	r3, [pc, #184]	; (8000534 <GPIO_void_setPin_Direction+0x318>)
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	79ba      	ldrb	r2, [r7, #6]
 800047e:	0052      	lsls	r2, r2, #1
 8000480:	2101      	movs	r1, #1
 8000482:	fa01 f202 	lsl.w	r2, r1, r2
 8000486:	4611      	mov	r1, r2
 8000488:	4a2a      	ldr	r2, [pc, #168]	; (8000534 <GPIO_void_setPin_Direction+0x318>)
 800048a:	430b      	orrs	r3, r1
 800048c:	6013      	str	r3, [r2, #0]
 800048e:	4b29      	ldr	r3, [pc, #164]	; (8000534 <GPIO_void_setPin_Direction+0x318>)
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	79ba      	ldrb	r2, [r7, #6]
 8000494:	0052      	lsls	r2, r2, #1
 8000496:	3201      	adds	r2, #1
 8000498:	2101      	movs	r1, #1
 800049a:	fa01 f202 	lsl.w	r2, r1, r2
 800049e:	43d2      	mvns	r2, r2
 80004a0:	4611      	mov	r1, r2
 80004a2:	4a24      	ldr	r2, [pc, #144]	; (8000534 <GPIO_void_setPin_Direction+0x318>)
 80004a4:	400b      	ands	r3, r1
 80004a6:	6013      	str	r3, [r2, #0]
//		switch(OUTPUT_TYPE)
//		{
//		case OUTPUT_PUSH_PULL: Clear_bit(GPIOC_OTYPER,pin);break;
//		case OUTPUT_OPEN_DRAIN:SET_BIT(GPIOC_OTYPER,pin);break;
//		}
		break;
 80004a8:	e030      	b.n	800050c <GPIO_void_setPin_Direction+0x2f0>
		case ALTERNATIVE_FUNCTION_MODE:Clear_bit(GPIOC_MODER,pin*2);SET_BIT(GPIOC_MODER,(pin*2+1));break;
 80004aa:	4b22      	ldr	r3, [pc, #136]	; (8000534 <GPIO_void_setPin_Direction+0x318>)
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	79ba      	ldrb	r2, [r7, #6]
 80004b0:	0052      	lsls	r2, r2, #1
 80004b2:	2101      	movs	r1, #1
 80004b4:	fa01 f202 	lsl.w	r2, r1, r2
 80004b8:	43d2      	mvns	r2, r2
 80004ba:	4611      	mov	r1, r2
 80004bc:	4a1d      	ldr	r2, [pc, #116]	; (8000534 <GPIO_void_setPin_Direction+0x318>)
 80004be:	400b      	ands	r3, r1
 80004c0:	6013      	str	r3, [r2, #0]
 80004c2:	4b1c      	ldr	r3, [pc, #112]	; (8000534 <GPIO_void_setPin_Direction+0x318>)
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	79ba      	ldrb	r2, [r7, #6]
 80004c8:	0052      	lsls	r2, r2, #1
 80004ca:	3201      	adds	r2, #1
 80004cc:	2101      	movs	r1, #1
 80004ce:	fa01 f202 	lsl.w	r2, r1, r2
 80004d2:	4611      	mov	r1, r2
 80004d4:	4a17      	ldr	r2, [pc, #92]	; (8000534 <GPIO_void_setPin_Direction+0x318>)
 80004d6:	430b      	orrs	r3, r1
 80004d8:	6013      	str	r3, [r2, #0]
 80004da:	e017      	b.n	800050c <GPIO_void_setPin_Direction+0x2f0>
		case ANALOG_MODE:SET_BIT(GPIOC_MODER,pin*2);SET_BIT(GPIOC_MODER,(pin*2+1));break;
 80004dc:	4b15      	ldr	r3, [pc, #84]	; (8000534 <GPIO_void_setPin_Direction+0x318>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	79ba      	ldrb	r2, [r7, #6]
 80004e2:	0052      	lsls	r2, r2, #1
 80004e4:	2101      	movs	r1, #1
 80004e6:	fa01 f202 	lsl.w	r2, r1, r2
 80004ea:	4611      	mov	r1, r2
 80004ec:	4a11      	ldr	r2, [pc, #68]	; (8000534 <GPIO_void_setPin_Direction+0x318>)
 80004ee:	430b      	orrs	r3, r1
 80004f0:	6013      	str	r3, [r2, #0]
 80004f2:	4b10      	ldr	r3, [pc, #64]	; (8000534 <GPIO_void_setPin_Direction+0x318>)
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	79ba      	ldrb	r2, [r7, #6]
 80004f8:	0052      	lsls	r2, r2, #1
 80004fa:	3201      	adds	r2, #1
 80004fc:	2101      	movs	r1, #1
 80004fe:	fa01 f202 	lsl.w	r2, r1, r2
 8000502:	4611      	mov	r1, r2
 8000504:	4a0b      	ldr	r2, [pc, #44]	; (8000534 <GPIO_void_setPin_Direction+0x318>)
 8000506:	430b      	orrs	r3, r1
 8000508:	6013      	str	r3, [r2, #0]
 800050a:	bf00      	nop
		}
	break;
 800050c:	e165      	b.n	80007da <GPIO_void_setPin_Direction+0x5be>

	case PORT_D:
		switch(Direction)
 800050e:	797b      	ldrb	r3, [r7, #5]
 8000510:	2b03      	cmp	r3, #3
 8000512:	f200 8164 	bhi.w	80007de <GPIO_void_setPin_Direction+0x5c2>
 8000516:	a201      	add	r2, pc, #4	; (adr r2, 800051c <GPIO_void_setPin_Direction+0x300>)
 8000518:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800051c:	08000539 	.word	0x08000539
 8000520:	0800056d 	.word	0x0800056d
 8000524:	0800059f 	.word	0x0800059f
 8000528:	080005d1 	.word	0x080005d1
 800052c:	40020000 	.word	0x40020000
 8000530:	40020400 	.word	0x40020400
 8000534:	40020800 	.word	0x40020800
		{
		case INPUT_MODE:Clear_bit(GPIOD_MODER,pin*2);Clear_bit(GPIOD_MODER,(pin*2+1));break;
 8000538:	4bae      	ldr	r3, [pc, #696]	; (80007f4 <GPIO_void_setPin_Direction+0x5d8>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	79ba      	ldrb	r2, [r7, #6]
 800053e:	0052      	lsls	r2, r2, #1
 8000540:	2101      	movs	r1, #1
 8000542:	fa01 f202 	lsl.w	r2, r1, r2
 8000546:	43d2      	mvns	r2, r2
 8000548:	4611      	mov	r1, r2
 800054a:	4aaa      	ldr	r2, [pc, #680]	; (80007f4 <GPIO_void_setPin_Direction+0x5d8>)
 800054c:	400b      	ands	r3, r1
 800054e:	6013      	str	r3, [r2, #0]
 8000550:	4ba8      	ldr	r3, [pc, #672]	; (80007f4 <GPIO_void_setPin_Direction+0x5d8>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	79ba      	ldrb	r2, [r7, #6]
 8000556:	0052      	lsls	r2, r2, #1
 8000558:	3201      	adds	r2, #1
 800055a:	2101      	movs	r1, #1
 800055c:	fa01 f202 	lsl.w	r2, r1, r2
 8000560:	43d2      	mvns	r2, r2
 8000562:	4611      	mov	r1, r2
 8000564:	4aa3      	ldr	r2, [pc, #652]	; (80007f4 <GPIO_void_setPin_Direction+0x5d8>)
 8000566:	400b      	ands	r3, r1
 8000568:	6013      	str	r3, [r2, #0]
 800056a:	e049      	b.n	8000600 <GPIO_void_setPin_Direction+0x3e4>
		case GENERAL_PURPOSE_OUTPUT_MODE:SET_BIT(GPIOD_MODER,pin*2);Clear_bit(GPIOD_MODER,(pin*2+1));
 800056c:	4ba1      	ldr	r3, [pc, #644]	; (80007f4 <GPIO_void_setPin_Direction+0x5d8>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	79ba      	ldrb	r2, [r7, #6]
 8000572:	0052      	lsls	r2, r2, #1
 8000574:	2101      	movs	r1, #1
 8000576:	fa01 f202 	lsl.w	r2, r1, r2
 800057a:	4611      	mov	r1, r2
 800057c:	4a9d      	ldr	r2, [pc, #628]	; (80007f4 <GPIO_void_setPin_Direction+0x5d8>)
 800057e:	430b      	orrs	r3, r1
 8000580:	6013      	str	r3, [r2, #0]
 8000582:	4b9c      	ldr	r3, [pc, #624]	; (80007f4 <GPIO_void_setPin_Direction+0x5d8>)
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	79ba      	ldrb	r2, [r7, #6]
 8000588:	0052      	lsls	r2, r2, #1
 800058a:	3201      	adds	r2, #1
 800058c:	2101      	movs	r1, #1
 800058e:	fa01 f202 	lsl.w	r2, r1, r2
 8000592:	43d2      	mvns	r2, r2
 8000594:	4611      	mov	r1, r2
 8000596:	4a97      	ldr	r2, [pc, #604]	; (80007f4 <GPIO_void_setPin_Direction+0x5d8>)
 8000598:	400b      	ands	r3, r1
 800059a:	6013      	str	r3, [r2, #0]
//		switch(OUTPUT_TYPE)
//		{
//		case OUTPUT_PUSH_PULL: Clear_bit(GPIOD_OTYPER,pin);break;
//		case OUTPUT_OPEN_DRAIN:SET_BIT(GPIOD_OTYPER,pin);break;
//		}
		break;
 800059c:	e030      	b.n	8000600 <GPIO_void_setPin_Direction+0x3e4>
		case ALTERNATIVE_FUNCTION_MODE:Clear_bit(GPIOD_MODER,pin*2);SET_BIT(GPIOD_MODER,(pin*2+1));break;
 800059e:	4b95      	ldr	r3, [pc, #596]	; (80007f4 <GPIO_void_setPin_Direction+0x5d8>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	79ba      	ldrb	r2, [r7, #6]
 80005a4:	0052      	lsls	r2, r2, #1
 80005a6:	2101      	movs	r1, #1
 80005a8:	fa01 f202 	lsl.w	r2, r1, r2
 80005ac:	43d2      	mvns	r2, r2
 80005ae:	4611      	mov	r1, r2
 80005b0:	4a90      	ldr	r2, [pc, #576]	; (80007f4 <GPIO_void_setPin_Direction+0x5d8>)
 80005b2:	400b      	ands	r3, r1
 80005b4:	6013      	str	r3, [r2, #0]
 80005b6:	4b8f      	ldr	r3, [pc, #572]	; (80007f4 <GPIO_void_setPin_Direction+0x5d8>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	79ba      	ldrb	r2, [r7, #6]
 80005bc:	0052      	lsls	r2, r2, #1
 80005be:	3201      	adds	r2, #1
 80005c0:	2101      	movs	r1, #1
 80005c2:	fa01 f202 	lsl.w	r2, r1, r2
 80005c6:	4611      	mov	r1, r2
 80005c8:	4a8a      	ldr	r2, [pc, #552]	; (80007f4 <GPIO_void_setPin_Direction+0x5d8>)
 80005ca:	430b      	orrs	r3, r1
 80005cc:	6013      	str	r3, [r2, #0]
 80005ce:	e017      	b.n	8000600 <GPIO_void_setPin_Direction+0x3e4>
		case ANALOG_MODE:SET_BIT(GPIOD_MODER,pin*2);SET_BIT(GPIOD_MODER,(pin*2+1));break;
 80005d0:	4b88      	ldr	r3, [pc, #544]	; (80007f4 <GPIO_void_setPin_Direction+0x5d8>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	79ba      	ldrb	r2, [r7, #6]
 80005d6:	0052      	lsls	r2, r2, #1
 80005d8:	2101      	movs	r1, #1
 80005da:	fa01 f202 	lsl.w	r2, r1, r2
 80005de:	4611      	mov	r1, r2
 80005e0:	4a84      	ldr	r2, [pc, #528]	; (80007f4 <GPIO_void_setPin_Direction+0x5d8>)
 80005e2:	430b      	orrs	r3, r1
 80005e4:	6013      	str	r3, [r2, #0]
 80005e6:	4b83      	ldr	r3, [pc, #524]	; (80007f4 <GPIO_void_setPin_Direction+0x5d8>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	79ba      	ldrb	r2, [r7, #6]
 80005ec:	0052      	lsls	r2, r2, #1
 80005ee:	3201      	adds	r2, #1
 80005f0:	2101      	movs	r1, #1
 80005f2:	fa01 f202 	lsl.w	r2, r1, r2
 80005f6:	4611      	mov	r1, r2
 80005f8:	4a7e      	ldr	r2, [pc, #504]	; (80007f4 <GPIO_void_setPin_Direction+0x5d8>)
 80005fa:	430b      	orrs	r3, r1
 80005fc:	6013      	str	r3, [r2, #0]
 80005fe:	bf00      	nop
		}
	break;
 8000600:	e0ed      	b.n	80007de <GPIO_void_setPin_Direction+0x5c2>

	case PORT_E:
		switch(Direction)
 8000602:	797b      	ldrb	r3, [r7, #5]
 8000604:	2b03      	cmp	r3, #3
 8000606:	f200 80ec 	bhi.w	80007e2 <GPIO_void_setPin_Direction+0x5c6>
 800060a:	a201      	add	r2, pc, #4	; (adr r2, 8000610 <GPIO_void_setPin_Direction+0x3f4>)
 800060c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000610:	08000621 	.word	0x08000621
 8000614:	08000655 	.word	0x08000655
 8000618:	08000687 	.word	0x08000687
 800061c:	080006b9 	.word	0x080006b9
		{
		case INPUT_MODE:Clear_bit(GPIOE_MODER,pin*2);Clear_bit(GPIOE_MODER,(pin*2+1));break;
 8000620:	4b75      	ldr	r3, [pc, #468]	; (80007f8 <GPIO_void_setPin_Direction+0x5dc>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	79ba      	ldrb	r2, [r7, #6]
 8000626:	0052      	lsls	r2, r2, #1
 8000628:	2101      	movs	r1, #1
 800062a:	fa01 f202 	lsl.w	r2, r1, r2
 800062e:	43d2      	mvns	r2, r2
 8000630:	4611      	mov	r1, r2
 8000632:	4a71      	ldr	r2, [pc, #452]	; (80007f8 <GPIO_void_setPin_Direction+0x5dc>)
 8000634:	400b      	ands	r3, r1
 8000636:	6013      	str	r3, [r2, #0]
 8000638:	4b6f      	ldr	r3, [pc, #444]	; (80007f8 <GPIO_void_setPin_Direction+0x5dc>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	79ba      	ldrb	r2, [r7, #6]
 800063e:	0052      	lsls	r2, r2, #1
 8000640:	3201      	adds	r2, #1
 8000642:	2101      	movs	r1, #1
 8000644:	fa01 f202 	lsl.w	r2, r1, r2
 8000648:	43d2      	mvns	r2, r2
 800064a:	4611      	mov	r1, r2
 800064c:	4a6a      	ldr	r2, [pc, #424]	; (80007f8 <GPIO_void_setPin_Direction+0x5dc>)
 800064e:	400b      	ands	r3, r1
 8000650:	6013      	str	r3, [r2, #0]
 8000652:	e049      	b.n	80006e8 <GPIO_void_setPin_Direction+0x4cc>
		case GENERAL_PURPOSE_OUTPUT_MODE:SET_BIT(GPIOE_MODER,pin*2);Clear_bit(GPIOE_MODER,(pin*2+1));
 8000654:	4b68      	ldr	r3, [pc, #416]	; (80007f8 <GPIO_void_setPin_Direction+0x5dc>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	79ba      	ldrb	r2, [r7, #6]
 800065a:	0052      	lsls	r2, r2, #1
 800065c:	2101      	movs	r1, #1
 800065e:	fa01 f202 	lsl.w	r2, r1, r2
 8000662:	4611      	mov	r1, r2
 8000664:	4a64      	ldr	r2, [pc, #400]	; (80007f8 <GPIO_void_setPin_Direction+0x5dc>)
 8000666:	430b      	orrs	r3, r1
 8000668:	6013      	str	r3, [r2, #0]
 800066a:	4b63      	ldr	r3, [pc, #396]	; (80007f8 <GPIO_void_setPin_Direction+0x5dc>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	79ba      	ldrb	r2, [r7, #6]
 8000670:	0052      	lsls	r2, r2, #1
 8000672:	3201      	adds	r2, #1
 8000674:	2101      	movs	r1, #1
 8000676:	fa01 f202 	lsl.w	r2, r1, r2
 800067a:	43d2      	mvns	r2, r2
 800067c:	4611      	mov	r1, r2
 800067e:	4a5e      	ldr	r2, [pc, #376]	; (80007f8 <GPIO_void_setPin_Direction+0x5dc>)
 8000680:	400b      	ands	r3, r1
 8000682:	6013      	str	r3, [r2, #0]
//		switch(OUTPUT_TYPE)
//		{
//		case OUTPUT_PUSH_PULL: Clear_bit(GPIOE_OTYPER,pin);break;
//		case OUTPUT_OPEN_DRAIN:SET_BIT(GPIOE_OTYPER,pin);break;
//		}
		break;
 8000684:	e030      	b.n	80006e8 <GPIO_void_setPin_Direction+0x4cc>
		case ALTERNATIVE_FUNCTION_MODE:Clear_bit(GPIOE_MODER,pin*2);SET_BIT(GPIOE_MODER,(pin*2+1));break;
 8000686:	4b5c      	ldr	r3, [pc, #368]	; (80007f8 <GPIO_void_setPin_Direction+0x5dc>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	79ba      	ldrb	r2, [r7, #6]
 800068c:	0052      	lsls	r2, r2, #1
 800068e:	2101      	movs	r1, #1
 8000690:	fa01 f202 	lsl.w	r2, r1, r2
 8000694:	43d2      	mvns	r2, r2
 8000696:	4611      	mov	r1, r2
 8000698:	4a57      	ldr	r2, [pc, #348]	; (80007f8 <GPIO_void_setPin_Direction+0x5dc>)
 800069a:	400b      	ands	r3, r1
 800069c:	6013      	str	r3, [r2, #0]
 800069e:	4b56      	ldr	r3, [pc, #344]	; (80007f8 <GPIO_void_setPin_Direction+0x5dc>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	79ba      	ldrb	r2, [r7, #6]
 80006a4:	0052      	lsls	r2, r2, #1
 80006a6:	3201      	adds	r2, #1
 80006a8:	2101      	movs	r1, #1
 80006aa:	fa01 f202 	lsl.w	r2, r1, r2
 80006ae:	4611      	mov	r1, r2
 80006b0:	4a51      	ldr	r2, [pc, #324]	; (80007f8 <GPIO_void_setPin_Direction+0x5dc>)
 80006b2:	430b      	orrs	r3, r1
 80006b4:	6013      	str	r3, [r2, #0]
 80006b6:	e017      	b.n	80006e8 <GPIO_void_setPin_Direction+0x4cc>
		case ANALOG_MODE:SET_BIT(GPIOE_MODER,pin*2);SET_BIT(GPIOE_MODER,(pin*2+1));break;
 80006b8:	4b4f      	ldr	r3, [pc, #316]	; (80007f8 <GPIO_void_setPin_Direction+0x5dc>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	79ba      	ldrb	r2, [r7, #6]
 80006be:	0052      	lsls	r2, r2, #1
 80006c0:	2101      	movs	r1, #1
 80006c2:	fa01 f202 	lsl.w	r2, r1, r2
 80006c6:	4611      	mov	r1, r2
 80006c8:	4a4b      	ldr	r2, [pc, #300]	; (80007f8 <GPIO_void_setPin_Direction+0x5dc>)
 80006ca:	430b      	orrs	r3, r1
 80006cc:	6013      	str	r3, [r2, #0]
 80006ce:	4b4a      	ldr	r3, [pc, #296]	; (80007f8 <GPIO_void_setPin_Direction+0x5dc>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	79ba      	ldrb	r2, [r7, #6]
 80006d4:	0052      	lsls	r2, r2, #1
 80006d6:	3201      	adds	r2, #1
 80006d8:	2101      	movs	r1, #1
 80006da:	fa01 f202 	lsl.w	r2, r1, r2
 80006de:	4611      	mov	r1, r2
 80006e0:	4a45      	ldr	r2, [pc, #276]	; (80007f8 <GPIO_void_setPin_Direction+0x5dc>)
 80006e2:	430b      	orrs	r3, r1
 80006e4:	6013      	str	r3, [r2, #0]
 80006e6:	bf00      	nop
		}
	break;
 80006e8:	e07b      	b.n	80007e2 <GPIO_void_setPin_Direction+0x5c6>

	case PORT_H:
		switch(Direction)
 80006ea:	797b      	ldrb	r3, [r7, #5]
 80006ec:	2b03      	cmp	r3, #3
 80006ee:	d87a      	bhi.n	80007e6 <GPIO_void_setPin_Direction+0x5ca>
 80006f0:	a201      	add	r2, pc, #4	; (adr r2, 80006f8 <GPIO_void_setPin_Direction+0x4dc>)
 80006f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006f6:	bf00      	nop
 80006f8:	08000709 	.word	0x08000709
 80006fc:	0800073d 	.word	0x0800073d
 8000700:	0800076f 	.word	0x0800076f
 8000704:	080007a1 	.word	0x080007a1
		{
		case INPUT_MODE:Clear_bit(GPIOH_MODER,pin*2);Clear_bit(GPIOH_MODER,(pin*2+1));break;
 8000708:	4b3c      	ldr	r3, [pc, #240]	; (80007fc <GPIO_void_setPin_Direction+0x5e0>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	79ba      	ldrb	r2, [r7, #6]
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	2101      	movs	r1, #1
 8000712:	fa01 f202 	lsl.w	r2, r1, r2
 8000716:	43d2      	mvns	r2, r2
 8000718:	4611      	mov	r1, r2
 800071a:	4a38      	ldr	r2, [pc, #224]	; (80007fc <GPIO_void_setPin_Direction+0x5e0>)
 800071c:	400b      	ands	r3, r1
 800071e:	6013      	str	r3, [r2, #0]
 8000720:	4b36      	ldr	r3, [pc, #216]	; (80007fc <GPIO_void_setPin_Direction+0x5e0>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	79ba      	ldrb	r2, [r7, #6]
 8000726:	0052      	lsls	r2, r2, #1
 8000728:	3201      	adds	r2, #1
 800072a:	2101      	movs	r1, #1
 800072c:	fa01 f202 	lsl.w	r2, r1, r2
 8000730:	43d2      	mvns	r2, r2
 8000732:	4611      	mov	r1, r2
 8000734:	4a31      	ldr	r2, [pc, #196]	; (80007fc <GPIO_void_setPin_Direction+0x5e0>)
 8000736:	400b      	ands	r3, r1
 8000738:	6013      	str	r3, [r2, #0]
 800073a:	e049      	b.n	80007d0 <GPIO_void_setPin_Direction+0x5b4>
		case GENERAL_PURPOSE_OUTPUT_MODE:SET_BIT(GPIOH_MODER,pin*2);Clear_bit(GPIOH_MODER,(pin*2+1));
 800073c:	4b2f      	ldr	r3, [pc, #188]	; (80007fc <GPIO_void_setPin_Direction+0x5e0>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	79ba      	ldrb	r2, [r7, #6]
 8000742:	0052      	lsls	r2, r2, #1
 8000744:	2101      	movs	r1, #1
 8000746:	fa01 f202 	lsl.w	r2, r1, r2
 800074a:	4611      	mov	r1, r2
 800074c:	4a2b      	ldr	r2, [pc, #172]	; (80007fc <GPIO_void_setPin_Direction+0x5e0>)
 800074e:	430b      	orrs	r3, r1
 8000750:	6013      	str	r3, [r2, #0]
 8000752:	4b2a      	ldr	r3, [pc, #168]	; (80007fc <GPIO_void_setPin_Direction+0x5e0>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	79ba      	ldrb	r2, [r7, #6]
 8000758:	0052      	lsls	r2, r2, #1
 800075a:	3201      	adds	r2, #1
 800075c:	2101      	movs	r1, #1
 800075e:	fa01 f202 	lsl.w	r2, r1, r2
 8000762:	43d2      	mvns	r2, r2
 8000764:	4611      	mov	r1, r2
 8000766:	4a25      	ldr	r2, [pc, #148]	; (80007fc <GPIO_void_setPin_Direction+0x5e0>)
 8000768:	400b      	ands	r3, r1
 800076a:	6013      	str	r3, [r2, #0]
//		switch(OUTPUT_TYPE)
//		{
//		case OUTPUT_PUSH_PULL: Clear_bit(GPIOH_OTYPER,pin);break;
//		case OUTPUT_OPEN_DRAIN:SET_BIT(GPIOH_OTYPER,pin);break;
//		}
		break;
 800076c:	e030      	b.n	80007d0 <GPIO_void_setPin_Direction+0x5b4>
		case ALTERNATIVE_FUNCTION_MODE:Clear_bit(GPIOH_MODER,pin*2);SET_BIT(GPIOH_MODER,(pin*2+1));break;
 800076e:	4b23      	ldr	r3, [pc, #140]	; (80007fc <GPIO_void_setPin_Direction+0x5e0>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	79ba      	ldrb	r2, [r7, #6]
 8000774:	0052      	lsls	r2, r2, #1
 8000776:	2101      	movs	r1, #1
 8000778:	fa01 f202 	lsl.w	r2, r1, r2
 800077c:	43d2      	mvns	r2, r2
 800077e:	4611      	mov	r1, r2
 8000780:	4a1e      	ldr	r2, [pc, #120]	; (80007fc <GPIO_void_setPin_Direction+0x5e0>)
 8000782:	400b      	ands	r3, r1
 8000784:	6013      	str	r3, [r2, #0]
 8000786:	4b1d      	ldr	r3, [pc, #116]	; (80007fc <GPIO_void_setPin_Direction+0x5e0>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	79ba      	ldrb	r2, [r7, #6]
 800078c:	0052      	lsls	r2, r2, #1
 800078e:	3201      	adds	r2, #1
 8000790:	2101      	movs	r1, #1
 8000792:	fa01 f202 	lsl.w	r2, r1, r2
 8000796:	4611      	mov	r1, r2
 8000798:	4a18      	ldr	r2, [pc, #96]	; (80007fc <GPIO_void_setPin_Direction+0x5e0>)
 800079a:	430b      	orrs	r3, r1
 800079c:	6013      	str	r3, [r2, #0]
 800079e:	e017      	b.n	80007d0 <GPIO_void_setPin_Direction+0x5b4>
		case ANALOG_MODE:SET_BIT(GPIOH_MODER,pin*2);SET_BIT(GPIOH_MODER,(pin*2+1));break;
 80007a0:	4b16      	ldr	r3, [pc, #88]	; (80007fc <GPIO_void_setPin_Direction+0x5e0>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	79ba      	ldrb	r2, [r7, #6]
 80007a6:	0052      	lsls	r2, r2, #1
 80007a8:	2101      	movs	r1, #1
 80007aa:	fa01 f202 	lsl.w	r2, r1, r2
 80007ae:	4611      	mov	r1, r2
 80007b0:	4a12      	ldr	r2, [pc, #72]	; (80007fc <GPIO_void_setPin_Direction+0x5e0>)
 80007b2:	430b      	orrs	r3, r1
 80007b4:	6013      	str	r3, [r2, #0]
 80007b6:	4b11      	ldr	r3, [pc, #68]	; (80007fc <GPIO_void_setPin_Direction+0x5e0>)
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	79ba      	ldrb	r2, [r7, #6]
 80007bc:	0052      	lsls	r2, r2, #1
 80007be:	3201      	adds	r2, #1
 80007c0:	2101      	movs	r1, #1
 80007c2:	fa01 f202 	lsl.w	r2, r1, r2
 80007c6:	4611      	mov	r1, r2
 80007c8:	4a0c      	ldr	r2, [pc, #48]	; (80007fc <GPIO_void_setPin_Direction+0x5e0>)
 80007ca:	430b      	orrs	r3, r1
 80007cc:	6013      	str	r3, [r2, #0]
 80007ce:	bf00      	nop
		}
	break;
 80007d0:	e009      	b.n	80007e6 <GPIO_void_setPin_Direction+0x5ca>
	break;
 80007d2:	bf00      	nop
 80007d4:	e008      	b.n	80007e8 <GPIO_void_setPin_Direction+0x5cc>
	break;
 80007d6:	bf00      	nop
 80007d8:	e006      	b.n	80007e8 <GPIO_void_setPin_Direction+0x5cc>
	break;
 80007da:	bf00      	nop
 80007dc:	e004      	b.n	80007e8 <GPIO_void_setPin_Direction+0x5cc>
	break;
 80007de:	bf00      	nop
 80007e0:	e002      	b.n	80007e8 <GPIO_void_setPin_Direction+0x5cc>
	break;
 80007e2:	bf00      	nop
 80007e4:	e000      	b.n	80007e8 <GPIO_void_setPin_Direction+0x5cc>
	break;
 80007e6:	bf00      	nop

	}
}
 80007e8:	bf00      	nop
 80007ea:	370c      	adds	r7, #12
 80007ec:	46bd      	mov	sp, r7
 80007ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f2:	4770      	bx	lr
 80007f4:	40020c00 	.word	0x40020c00
 80007f8:	40021000 	.word	0x40021000
 80007fc:	40021c00 	.word	0x40021c00

08000800 <GPIO_void_setPin_Output_Type>:
//////////////////////////////////////////////////////////////////////////////////////////////
void GPIO_void_setPin_Output_Type(PORT_ID port , PIN_ID pin , OUTPUT_TYPE output_type)
{
 8000800:	b480      	push	{r7}
 8000802:	b083      	sub	sp, #12
 8000804:	af00      	add	r7, sp, #0
 8000806:	4603      	mov	r3, r0
 8000808:	71fb      	strb	r3, [r7, #7]
 800080a:	460b      	mov	r3, r1
 800080c:	71bb      	strb	r3, [r7, #6]
 800080e:	4613      	mov	r3, r2
 8000810:	717b      	strb	r3, [r7, #5]
	switch(port)
 8000812:	79fb      	ldrb	r3, [r7, #7]
 8000814:	2b05      	cmp	r3, #5
 8000816:	f200 80c3 	bhi.w	80009a0 <GPIO_void_setPin_Output_Type+0x1a0>
 800081a:	a201      	add	r2, pc, #4	; (adr r2, 8000820 <GPIO_void_setPin_Output_Type+0x20>)
 800081c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000820:	08000839 	.word	0x08000839
 8000824:	08000875 	.word	0x08000875
 8000828:	080008b1 	.word	0x080008b1
 800082c:	080008ed 	.word	0x080008ed
 8000830:	08000929 	.word	0x08000929
 8000834:	08000965 	.word	0x08000965
	{
	case PORT_A:
		switch(output_type)
 8000838:	797b      	ldrb	r3, [r7, #5]
 800083a:	2b00      	cmp	r3, #0
 800083c:	d002      	beq.n	8000844 <GPIO_void_setPin_Output_Type+0x44>
 800083e:	2b01      	cmp	r3, #1
 8000840:	d00c      	beq.n	800085c <GPIO_void_setPin_Output_Type+0x5c>
		{
		case OUTPUT_PUSH_PULL: Clear_bit(GPIOA_OTYPER,pin);break;
		case OUTPUT_OPEN_DRAIN:SET_BIT(GPIOA_OTYPER,pin);break;
		}
	break;
 8000842:	e0ad      	b.n	80009a0 <GPIO_void_setPin_Output_Type+0x1a0>
		case OUTPUT_PUSH_PULL: Clear_bit(GPIOA_OTYPER,pin);break;
 8000844:	4b59      	ldr	r3, [pc, #356]	; (80009ac <GPIO_void_setPin_Output_Type+0x1ac>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	79ba      	ldrb	r2, [r7, #6]
 800084a:	2101      	movs	r1, #1
 800084c:	fa01 f202 	lsl.w	r2, r1, r2
 8000850:	43d2      	mvns	r2, r2
 8000852:	4611      	mov	r1, r2
 8000854:	4a55      	ldr	r2, [pc, #340]	; (80009ac <GPIO_void_setPin_Output_Type+0x1ac>)
 8000856:	400b      	ands	r3, r1
 8000858:	6013      	str	r3, [r2, #0]
 800085a:	e00a      	b.n	8000872 <GPIO_void_setPin_Output_Type+0x72>
		case OUTPUT_OPEN_DRAIN:SET_BIT(GPIOA_OTYPER,pin);break;
 800085c:	4b53      	ldr	r3, [pc, #332]	; (80009ac <GPIO_void_setPin_Output_Type+0x1ac>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	79ba      	ldrb	r2, [r7, #6]
 8000862:	2101      	movs	r1, #1
 8000864:	fa01 f202 	lsl.w	r2, r1, r2
 8000868:	4611      	mov	r1, r2
 800086a:	4a50      	ldr	r2, [pc, #320]	; (80009ac <GPIO_void_setPin_Output_Type+0x1ac>)
 800086c:	430b      	orrs	r3, r1
 800086e:	6013      	str	r3, [r2, #0]
 8000870:	bf00      	nop
	break;
 8000872:	e095      	b.n	80009a0 <GPIO_void_setPin_Output_Type+0x1a0>

	case PORT_B:
		switch(output_type)
 8000874:	797b      	ldrb	r3, [r7, #5]
 8000876:	2b00      	cmp	r3, #0
 8000878:	d002      	beq.n	8000880 <GPIO_void_setPin_Output_Type+0x80>
 800087a:	2b01      	cmp	r3, #1
 800087c:	d00c      	beq.n	8000898 <GPIO_void_setPin_Output_Type+0x98>
		{
		case OUTPUT_PUSH_PULL: Clear_bit(GPIOB_OTYPER,pin);break;
		case OUTPUT_OPEN_DRAIN:SET_BIT(GPIOB_OTYPER,pin);break;
		}
	break;
 800087e:	e08f      	b.n	80009a0 <GPIO_void_setPin_Output_Type+0x1a0>
		case OUTPUT_PUSH_PULL: Clear_bit(GPIOB_OTYPER,pin);break;
 8000880:	4b4b      	ldr	r3, [pc, #300]	; (80009b0 <GPIO_void_setPin_Output_Type+0x1b0>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	79ba      	ldrb	r2, [r7, #6]
 8000886:	2101      	movs	r1, #1
 8000888:	fa01 f202 	lsl.w	r2, r1, r2
 800088c:	43d2      	mvns	r2, r2
 800088e:	4611      	mov	r1, r2
 8000890:	4a47      	ldr	r2, [pc, #284]	; (80009b0 <GPIO_void_setPin_Output_Type+0x1b0>)
 8000892:	400b      	ands	r3, r1
 8000894:	6013      	str	r3, [r2, #0]
 8000896:	e00a      	b.n	80008ae <GPIO_void_setPin_Output_Type+0xae>
		case OUTPUT_OPEN_DRAIN:SET_BIT(GPIOB_OTYPER,pin);break;
 8000898:	4b45      	ldr	r3, [pc, #276]	; (80009b0 <GPIO_void_setPin_Output_Type+0x1b0>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	79ba      	ldrb	r2, [r7, #6]
 800089e:	2101      	movs	r1, #1
 80008a0:	fa01 f202 	lsl.w	r2, r1, r2
 80008a4:	4611      	mov	r1, r2
 80008a6:	4a42      	ldr	r2, [pc, #264]	; (80009b0 <GPIO_void_setPin_Output_Type+0x1b0>)
 80008a8:	430b      	orrs	r3, r1
 80008aa:	6013      	str	r3, [r2, #0]
 80008ac:	bf00      	nop
	break;
 80008ae:	e077      	b.n	80009a0 <GPIO_void_setPin_Output_Type+0x1a0>

	case PORT_C:
		switch(output_type)
 80008b0:	797b      	ldrb	r3, [r7, #5]
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d002      	beq.n	80008bc <GPIO_void_setPin_Output_Type+0xbc>
 80008b6:	2b01      	cmp	r3, #1
 80008b8:	d00c      	beq.n	80008d4 <GPIO_void_setPin_Output_Type+0xd4>
		{
		case OUTPUT_PUSH_PULL: Clear_bit(GPIOC_OTYPER,pin);break;
		case OUTPUT_OPEN_DRAIN:SET_BIT(GPIOC_OTYPER,pin);break;
		}
	break;
 80008ba:	e071      	b.n	80009a0 <GPIO_void_setPin_Output_Type+0x1a0>
		case OUTPUT_PUSH_PULL: Clear_bit(GPIOC_OTYPER,pin);break;
 80008bc:	4b3d      	ldr	r3, [pc, #244]	; (80009b4 <GPIO_void_setPin_Output_Type+0x1b4>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	79ba      	ldrb	r2, [r7, #6]
 80008c2:	2101      	movs	r1, #1
 80008c4:	fa01 f202 	lsl.w	r2, r1, r2
 80008c8:	43d2      	mvns	r2, r2
 80008ca:	4611      	mov	r1, r2
 80008cc:	4a39      	ldr	r2, [pc, #228]	; (80009b4 <GPIO_void_setPin_Output_Type+0x1b4>)
 80008ce:	400b      	ands	r3, r1
 80008d0:	6013      	str	r3, [r2, #0]
 80008d2:	e00a      	b.n	80008ea <GPIO_void_setPin_Output_Type+0xea>
		case OUTPUT_OPEN_DRAIN:SET_BIT(GPIOC_OTYPER,pin);break;
 80008d4:	4b37      	ldr	r3, [pc, #220]	; (80009b4 <GPIO_void_setPin_Output_Type+0x1b4>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	79ba      	ldrb	r2, [r7, #6]
 80008da:	2101      	movs	r1, #1
 80008dc:	fa01 f202 	lsl.w	r2, r1, r2
 80008e0:	4611      	mov	r1, r2
 80008e2:	4a34      	ldr	r2, [pc, #208]	; (80009b4 <GPIO_void_setPin_Output_Type+0x1b4>)
 80008e4:	430b      	orrs	r3, r1
 80008e6:	6013      	str	r3, [r2, #0]
 80008e8:	bf00      	nop
	break;
 80008ea:	e059      	b.n	80009a0 <GPIO_void_setPin_Output_Type+0x1a0>

	case PORT_D:
		switch(output_type)
 80008ec:	797b      	ldrb	r3, [r7, #5]
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d002      	beq.n	80008f8 <GPIO_void_setPin_Output_Type+0xf8>
 80008f2:	2b01      	cmp	r3, #1
 80008f4:	d00c      	beq.n	8000910 <GPIO_void_setPin_Output_Type+0x110>
		{
		case OUTPUT_PUSH_PULL: Clear_bit(GPIOD_OTYPER,pin);break;
		case OUTPUT_OPEN_DRAIN:SET_BIT(GPIOD_OTYPER,pin);break;
		}
	break;
 80008f6:	e053      	b.n	80009a0 <GPIO_void_setPin_Output_Type+0x1a0>
		case OUTPUT_PUSH_PULL: Clear_bit(GPIOD_OTYPER,pin);break;
 80008f8:	4b2f      	ldr	r3, [pc, #188]	; (80009b8 <GPIO_void_setPin_Output_Type+0x1b8>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	79ba      	ldrb	r2, [r7, #6]
 80008fe:	2101      	movs	r1, #1
 8000900:	fa01 f202 	lsl.w	r2, r1, r2
 8000904:	43d2      	mvns	r2, r2
 8000906:	4611      	mov	r1, r2
 8000908:	4a2b      	ldr	r2, [pc, #172]	; (80009b8 <GPIO_void_setPin_Output_Type+0x1b8>)
 800090a:	400b      	ands	r3, r1
 800090c:	6013      	str	r3, [r2, #0]
 800090e:	e00a      	b.n	8000926 <GPIO_void_setPin_Output_Type+0x126>
		case OUTPUT_OPEN_DRAIN:SET_BIT(GPIOD_OTYPER,pin);break;
 8000910:	4b29      	ldr	r3, [pc, #164]	; (80009b8 <GPIO_void_setPin_Output_Type+0x1b8>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	79ba      	ldrb	r2, [r7, #6]
 8000916:	2101      	movs	r1, #1
 8000918:	fa01 f202 	lsl.w	r2, r1, r2
 800091c:	4611      	mov	r1, r2
 800091e:	4a26      	ldr	r2, [pc, #152]	; (80009b8 <GPIO_void_setPin_Output_Type+0x1b8>)
 8000920:	430b      	orrs	r3, r1
 8000922:	6013      	str	r3, [r2, #0]
 8000924:	bf00      	nop
	break;
 8000926:	e03b      	b.n	80009a0 <GPIO_void_setPin_Output_Type+0x1a0>

	case PORT_E:
		switch(output_type)
 8000928:	797b      	ldrb	r3, [r7, #5]
 800092a:	2b00      	cmp	r3, #0
 800092c:	d002      	beq.n	8000934 <GPIO_void_setPin_Output_Type+0x134>
 800092e:	2b01      	cmp	r3, #1
 8000930:	d00c      	beq.n	800094c <GPIO_void_setPin_Output_Type+0x14c>
		{
		case OUTPUT_PUSH_PULL: Clear_bit(GPIOE_OTYPER,pin);break;
		case OUTPUT_OPEN_DRAIN:SET_BIT(GPIOE_OTYPER,pin);break;
		}
	break;
 8000932:	e035      	b.n	80009a0 <GPIO_void_setPin_Output_Type+0x1a0>
		case OUTPUT_PUSH_PULL: Clear_bit(GPIOE_OTYPER,pin);break;
 8000934:	4b21      	ldr	r3, [pc, #132]	; (80009bc <GPIO_void_setPin_Output_Type+0x1bc>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	79ba      	ldrb	r2, [r7, #6]
 800093a:	2101      	movs	r1, #1
 800093c:	fa01 f202 	lsl.w	r2, r1, r2
 8000940:	43d2      	mvns	r2, r2
 8000942:	4611      	mov	r1, r2
 8000944:	4a1d      	ldr	r2, [pc, #116]	; (80009bc <GPIO_void_setPin_Output_Type+0x1bc>)
 8000946:	400b      	ands	r3, r1
 8000948:	6013      	str	r3, [r2, #0]
 800094a:	e00a      	b.n	8000962 <GPIO_void_setPin_Output_Type+0x162>
		case OUTPUT_OPEN_DRAIN:SET_BIT(GPIOE_OTYPER,pin);break;
 800094c:	4b1b      	ldr	r3, [pc, #108]	; (80009bc <GPIO_void_setPin_Output_Type+0x1bc>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	79ba      	ldrb	r2, [r7, #6]
 8000952:	2101      	movs	r1, #1
 8000954:	fa01 f202 	lsl.w	r2, r1, r2
 8000958:	4611      	mov	r1, r2
 800095a:	4a18      	ldr	r2, [pc, #96]	; (80009bc <GPIO_void_setPin_Output_Type+0x1bc>)
 800095c:	430b      	orrs	r3, r1
 800095e:	6013      	str	r3, [r2, #0]
 8000960:	bf00      	nop
	break;
 8000962:	e01d      	b.n	80009a0 <GPIO_void_setPin_Output_Type+0x1a0>

	case PORT_H:
		switch(output_type)
 8000964:	797b      	ldrb	r3, [r7, #5]
 8000966:	2b00      	cmp	r3, #0
 8000968:	d002      	beq.n	8000970 <GPIO_void_setPin_Output_Type+0x170>
 800096a:	2b01      	cmp	r3, #1
 800096c:	d00c      	beq.n	8000988 <GPIO_void_setPin_Output_Type+0x188>
		{
		case OUTPUT_PUSH_PULL: Clear_bit(GPIOH_OTYPER,pin);break;
		case OUTPUT_OPEN_DRAIN:SET_BIT(GPIOH_OTYPER,pin);break;
		}
	break;
 800096e:	e016      	b.n	800099e <GPIO_void_setPin_Output_Type+0x19e>
		case OUTPUT_PUSH_PULL: Clear_bit(GPIOH_OTYPER,pin);break;
 8000970:	4b13      	ldr	r3, [pc, #76]	; (80009c0 <GPIO_void_setPin_Output_Type+0x1c0>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	79ba      	ldrb	r2, [r7, #6]
 8000976:	2101      	movs	r1, #1
 8000978:	fa01 f202 	lsl.w	r2, r1, r2
 800097c:	43d2      	mvns	r2, r2
 800097e:	4611      	mov	r1, r2
 8000980:	4a0f      	ldr	r2, [pc, #60]	; (80009c0 <GPIO_void_setPin_Output_Type+0x1c0>)
 8000982:	400b      	ands	r3, r1
 8000984:	6013      	str	r3, [r2, #0]
 8000986:	e00a      	b.n	800099e <GPIO_void_setPin_Output_Type+0x19e>
		case OUTPUT_OPEN_DRAIN:SET_BIT(GPIOH_OTYPER,pin);break;
 8000988:	4b0d      	ldr	r3, [pc, #52]	; (80009c0 <GPIO_void_setPin_Output_Type+0x1c0>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	79ba      	ldrb	r2, [r7, #6]
 800098e:	2101      	movs	r1, #1
 8000990:	fa01 f202 	lsl.w	r2, r1, r2
 8000994:	4611      	mov	r1, r2
 8000996:	4a0a      	ldr	r2, [pc, #40]	; (80009c0 <GPIO_void_setPin_Output_Type+0x1c0>)
 8000998:	430b      	orrs	r3, r1
 800099a:	6013      	str	r3, [r2, #0]
 800099c:	bf00      	nop
	break;
 800099e:	bf00      	nop
	}
}
 80009a0:	bf00      	nop
 80009a2:	370c      	adds	r7, #12
 80009a4:	46bd      	mov	sp, r7
 80009a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009aa:	4770      	bx	lr
 80009ac:	40020004 	.word	0x40020004
 80009b0:	40020404 	.word	0x40020404
 80009b4:	40020804 	.word	0x40020804
 80009b8:	40020c04 	.word	0x40020c04
 80009bc:	40021004 	.word	0x40021004
 80009c0:	40021c04 	.word	0x40021c04

080009c4 <GPIO_voidSetAltFunction>:
	}
}


void GPIO_voidSetAltFunction(u8 Copy_u8PortID,u8 Copy_u8PinID ,u32 Copy_u8AltValue)
{
 80009c4:	b480      	push	{r7}
 80009c6:	b083      	sub	sp, #12
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	4603      	mov	r3, r0
 80009cc:	603a      	str	r2, [r7, #0]
 80009ce:	71fb      	strb	r3, [r7, #7]
 80009d0:	460b      	mov	r3, r1
 80009d2:	71bb      	strb	r3, [r7, #6]
	switch(Copy_u8PortID)
 80009d4:	79fb      	ldrb	r3, [r7, #7]
 80009d6:	2b05      	cmp	r3, #5
 80009d8:	f200 80b2 	bhi.w	8000b40 <GPIO_voidSetAltFunction+0x17c>
 80009dc:	a201      	add	r2, pc, #4	; (adr r2, 80009e4 <GPIO_voidSetAltFunction+0x20>)
 80009de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009e2:	bf00      	nop
 80009e4:	080009fd 	.word	0x080009fd
 80009e8:	08000a33 	.word	0x08000a33
 80009ec:	08000a69 	.word	0x08000a69
 80009f0:	08000a9f 	.word	0x08000a9f
 80009f4:	08000ad5 	.word	0x08000ad5
 80009f8:	08000b0b 	.word	0x08000b0b
	{
		case PORT_A:
			if(Copy_u8PinID < PIN8)
 80009fc:	79bb      	ldrb	r3, [r7, #6]
 80009fe:	2b07      	cmp	r3, #7
 8000a00:	d80a      	bhi.n	8000a18 <GPIO_voidSetAltFunction+0x54>
			{
				GPIOA_AFRL |= ( Copy_u8AltValue << (Copy_u8PinID*4) );
 8000a02:	4b53      	ldr	r3, [pc, #332]	; (8000b50 <GPIO_voidSetAltFunction+0x18c>)
 8000a04:	681a      	ldr	r2, [r3, #0]
 8000a06:	79bb      	ldrb	r3, [r7, #6]
 8000a08:	009b      	lsls	r3, r3, #2
 8000a0a:	6839      	ldr	r1, [r7, #0]
 8000a0c:	fa01 f303 	lsl.w	r3, r1, r3
 8000a10:	494f      	ldr	r1, [pc, #316]	; (8000b50 <GPIO_voidSetAltFunction+0x18c>)
 8000a12:	4313      	orrs	r3, r2
 8000a14:	600b      	str	r3, [r1, #0]
			}
			else
			{
				GPIOA_AFRH |= ( Copy_u8AltValue << ( (Copy_u8PinID%8) * 4 ) );
			}break;
 8000a16:	e094      	b.n	8000b42 <GPIO_voidSetAltFunction+0x17e>
				GPIOA_AFRH |= ( Copy_u8AltValue << ( (Copy_u8PinID%8) * 4 ) );
 8000a18:	4b4e      	ldr	r3, [pc, #312]	; (8000b54 <GPIO_voidSetAltFunction+0x190>)
 8000a1a:	681a      	ldr	r2, [r3, #0]
 8000a1c:	79bb      	ldrb	r3, [r7, #6]
 8000a1e:	f003 0307 	and.w	r3, r3, #7
 8000a22:	009b      	lsls	r3, r3, #2
 8000a24:	6839      	ldr	r1, [r7, #0]
 8000a26:	fa01 f303 	lsl.w	r3, r1, r3
 8000a2a:	494a      	ldr	r1, [pc, #296]	; (8000b54 <GPIO_voidSetAltFunction+0x190>)
 8000a2c:	4313      	orrs	r3, r2
 8000a2e:	600b      	str	r3, [r1, #0]
			}break;
 8000a30:	e087      	b.n	8000b42 <GPIO_voidSetAltFunction+0x17e>

		case PORT_B:
			if(Copy_u8PinID < PIN8)
 8000a32:	79bb      	ldrb	r3, [r7, #6]
 8000a34:	2b07      	cmp	r3, #7
 8000a36:	d80a      	bhi.n	8000a4e <GPIO_voidSetAltFunction+0x8a>
			{
				GPIOB_AFRL |= ( Copy_u8AltValue << (Copy_u8PinID*4) );
 8000a38:	4b47      	ldr	r3, [pc, #284]	; (8000b58 <GPIO_voidSetAltFunction+0x194>)
 8000a3a:	681a      	ldr	r2, [r3, #0]
 8000a3c:	79bb      	ldrb	r3, [r7, #6]
 8000a3e:	009b      	lsls	r3, r3, #2
 8000a40:	6839      	ldr	r1, [r7, #0]
 8000a42:	fa01 f303 	lsl.w	r3, r1, r3
 8000a46:	4944      	ldr	r1, [pc, #272]	; (8000b58 <GPIO_voidSetAltFunction+0x194>)
 8000a48:	4313      	orrs	r3, r2
 8000a4a:	600b      	str	r3, [r1, #0]
			}
			else
			{
				GPIOB_AFRH |= ( Copy_u8AltValue << ( (Copy_u8PinID%8) * 4 ) );
			}break;
 8000a4c:	e079      	b.n	8000b42 <GPIO_voidSetAltFunction+0x17e>
				GPIOB_AFRH |= ( Copy_u8AltValue << ( (Copy_u8PinID%8) * 4 ) );
 8000a4e:	4b43      	ldr	r3, [pc, #268]	; (8000b5c <GPIO_voidSetAltFunction+0x198>)
 8000a50:	681a      	ldr	r2, [r3, #0]
 8000a52:	79bb      	ldrb	r3, [r7, #6]
 8000a54:	f003 0307 	and.w	r3, r3, #7
 8000a58:	009b      	lsls	r3, r3, #2
 8000a5a:	6839      	ldr	r1, [r7, #0]
 8000a5c:	fa01 f303 	lsl.w	r3, r1, r3
 8000a60:	493e      	ldr	r1, [pc, #248]	; (8000b5c <GPIO_voidSetAltFunction+0x198>)
 8000a62:	4313      	orrs	r3, r2
 8000a64:	600b      	str	r3, [r1, #0]
			}break;
 8000a66:	e06c      	b.n	8000b42 <GPIO_voidSetAltFunction+0x17e>

		case PORT_C:
			if(Copy_u8PinID < PIN8)
 8000a68:	79bb      	ldrb	r3, [r7, #6]
 8000a6a:	2b07      	cmp	r3, #7
 8000a6c:	d80a      	bhi.n	8000a84 <GPIO_voidSetAltFunction+0xc0>
			{
				GPIOC_AFRL |= ( Copy_u8AltValue << (Copy_u8PinID*4) );
 8000a6e:	4b3c      	ldr	r3, [pc, #240]	; (8000b60 <GPIO_voidSetAltFunction+0x19c>)
 8000a70:	681a      	ldr	r2, [r3, #0]
 8000a72:	79bb      	ldrb	r3, [r7, #6]
 8000a74:	009b      	lsls	r3, r3, #2
 8000a76:	6839      	ldr	r1, [r7, #0]
 8000a78:	fa01 f303 	lsl.w	r3, r1, r3
 8000a7c:	4938      	ldr	r1, [pc, #224]	; (8000b60 <GPIO_voidSetAltFunction+0x19c>)
 8000a7e:	4313      	orrs	r3, r2
 8000a80:	600b      	str	r3, [r1, #0]
			}
			else
			{
				GPIOC_AFRH |= ( Copy_u8AltValue << ( (Copy_u8PinID%8) * 4 ) );
			}break;
 8000a82:	e05e      	b.n	8000b42 <GPIO_voidSetAltFunction+0x17e>
				GPIOC_AFRH |= ( Copy_u8AltValue << ( (Copy_u8PinID%8) * 4 ) );
 8000a84:	4b37      	ldr	r3, [pc, #220]	; (8000b64 <GPIO_voidSetAltFunction+0x1a0>)
 8000a86:	681a      	ldr	r2, [r3, #0]
 8000a88:	79bb      	ldrb	r3, [r7, #6]
 8000a8a:	f003 0307 	and.w	r3, r3, #7
 8000a8e:	009b      	lsls	r3, r3, #2
 8000a90:	6839      	ldr	r1, [r7, #0]
 8000a92:	fa01 f303 	lsl.w	r3, r1, r3
 8000a96:	4933      	ldr	r1, [pc, #204]	; (8000b64 <GPIO_voidSetAltFunction+0x1a0>)
 8000a98:	4313      	orrs	r3, r2
 8000a9a:	600b      	str	r3, [r1, #0]
			}break;
 8000a9c:	e051      	b.n	8000b42 <GPIO_voidSetAltFunction+0x17e>

		case PORT_D:
			if(Copy_u8PinID < PIN8)
 8000a9e:	79bb      	ldrb	r3, [r7, #6]
 8000aa0:	2b07      	cmp	r3, #7
 8000aa2:	d80a      	bhi.n	8000aba <GPIO_voidSetAltFunction+0xf6>
			{
				GPIOD_AFRL |= ( Copy_u8AltValue << (Copy_u8PinID*4) );
 8000aa4:	4b30      	ldr	r3, [pc, #192]	; (8000b68 <GPIO_voidSetAltFunction+0x1a4>)
 8000aa6:	681a      	ldr	r2, [r3, #0]
 8000aa8:	79bb      	ldrb	r3, [r7, #6]
 8000aaa:	009b      	lsls	r3, r3, #2
 8000aac:	6839      	ldr	r1, [r7, #0]
 8000aae:	fa01 f303 	lsl.w	r3, r1, r3
 8000ab2:	492d      	ldr	r1, [pc, #180]	; (8000b68 <GPIO_voidSetAltFunction+0x1a4>)
 8000ab4:	4313      	orrs	r3, r2
 8000ab6:	600b      	str	r3, [r1, #0]
			}
			else
			{
				GPIOD_AFRH |= ( Copy_u8AltValue << ( (Copy_u8PinID%8) * 4 ) );
			}break;
 8000ab8:	e043      	b.n	8000b42 <GPIO_voidSetAltFunction+0x17e>
				GPIOD_AFRH |= ( Copy_u8AltValue << ( (Copy_u8PinID%8) * 4 ) );
 8000aba:	4b2c      	ldr	r3, [pc, #176]	; (8000b6c <GPIO_voidSetAltFunction+0x1a8>)
 8000abc:	681a      	ldr	r2, [r3, #0]
 8000abe:	79bb      	ldrb	r3, [r7, #6]
 8000ac0:	f003 0307 	and.w	r3, r3, #7
 8000ac4:	009b      	lsls	r3, r3, #2
 8000ac6:	6839      	ldr	r1, [r7, #0]
 8000ac8:	fa01 f303 	lsl.w	r3, r1, r3
 8000acc:	4927      	ldr	r1, [pc, #156]	; (8000b6c <GPIO_voidSetAltFunction+0x1a8>)
 8000ace:	4313      	orrs	r3, r2
 8000ad0:	600b      	str	r3, [r1, #0]
			}break;
 8000ad2:	e036      	b.n	8000b42 <GPIO_voidSetAltFunction+0x17e>

		case PORT_E:
			if(Copy_u8PinID < PIN8)
 8000ad4:	79bb      	ldrb	r3, [r7, #6]
 8000ad6:	2b07      	cmp	r3, #7
 8000ad8:	d80a      	bhi.n	8000af0 <GPIO_voidSetAltFunction+0x12c>
			{
				GPIOE_AFRL |= ( Copy_u8AltValue << (Copy_u8PinID*4) );
 8000ada:	4b25      	ldr	r3, [pc, #148]	; (8000b70 <GPIO_voidSetAltFunction+0x1ac>)
 8000adc:	681a      	ldr	r2, [r3, #0]
 8000ade:	79bb      	ldrb	r3, [r7, #6]
 8000ae0:	009b      	lsls	r3, r3, #2
 8000ae2:	6839      	ldr	r1, [r7, #0]
 8000ae4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ae8:	4921      	ldr	r1, [pc, #132]	; (8000b70 <GPIO_voidSetAltFunction+0x1ac>)
 8000aea:	4313      	orrs	r3, r2
 8000aec:	600b      	str	r3, [r1, #0]
			}
			else
			{
				GPIOE_AFRH |= ( Copy_u8AltValue << ( (Copy_u8PinID%8) * 4 ) );
			}break;
 8000aee:	e028      	b.n	8000b42 <GPIO_voidSetAltFunction+0x17e>
				GPIOE_AFRH |= ( Copy_u8AltValue << ( (Copy_u8PinID%8) * 4 ) );
 8000af0:	4b20      	ldr	r3, [pc, #128]	; (8000b74 <GPIO_voidSetAltFunction+0x1b0>)
 8000af2:	681a      	ldr	r2, [r3, #0]
 8000af4:	79bb      	ldrb	r3, [r7, #6]
 8000af6:	f003 0307 	and.w	r3, r3, #7
 8000afa:	009b      	lsls	r3, r3, #2
 8000afc:	6839      	ldr	r1, [r7, #0]
 8000afe:	fa01 f303 	lsl.w	r3, r1, r3
 8000b02:	491c      	ldr	r1, [pc, #112]	; (8000b74 <GPIO_voidSetAltFunction+0x1b0>)
 8000b04:	4313      	orrs	r3, r2
 8000b06:	600b      	str	r3, [r1, #0]
			}break;
 8000b08:	e01b      	b.n	8000b42 <GPIO_voidSetAltFunction+0x17e>

		case PORT_H:
			if(Copy_u8PinID < PIN8)
 8000b0a:	79bb      	ldrb	r3, [r7, #6]
 8000b0c:	2b07      	cmp	r3, #7
 8000b0e:	d80a      	bhi.n	8000b26 <GPIO_voidSetAltFunction+0x162>
			{
				GPIOH_AFRL |= ( Copy_u8AltValue << (Copy_u8PinID*4) );
 8000b10:	4b19      	ldr	r3, [pc, #100]	; (8000b78 <GPIO_voidSetAltFunction+0x1b4>)
 8000b12:	681a      	ldr	r2, [r3, #0]
 8000b14:	79bb      	ldrb	r3, [r7, #6]
 8000b16:	009b      	lsls	r3, r3, #2
 8000b18:	6839      	ldr	r1, [r7, #0]
 8000b1a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b1e:	4916      	ldr	r1, [pc, #88]	; (8000b78 <GPIO_voidSetAltFunction+0x1b4>)
 8000b20:	4313      	orrs	r3, r2
 8000b22:	600b      	str	r3, [r1, #0]
			}
			else
			{
				GPIOH_AFRH |= ( Copy_u8AltValue << ( (Copy_u8PinID%8) * 4 ) );
			}break;
 8000b24:	e00d      	b.n	8000b42 <GPIO_voidSetAltFunction+0x17e>
				GPIOH_AFRH |= ( Copy_u8AltValue << ( (Copy_u8PinID%8) * 4 ) );
 8000b26:	4b15      	ldr	r3, [pc, #84]	; (8000b7c <GPIO_voidSetAltFunction+0x1b8>)
 8000b28:	681a      	ldr	r2, [r3, #0]
 8000b2a:	79bb      	ldrb	r3, [r7, #6]
 8000b2c:	f003 0307 	and.w	r3, r3, #7
 8000b30:	009b      	lsls	r3, r3, #2
 8000b32:	6839      	ldr	r1, [r7, #0]
 8000b34:	fa01 f303 	lsl.w	r3, r1, r3
 8000b38:	4910      	ldr	r1, [pc, #64]	; (8000b7c <GPIO_voidSetAltFunction+0x1b8>)
 8000b3a:	4313      	orrs	r3, r2
 8000b3c:	600b      	str	r3, [r1, #0]
			}break;
 8000b3e:	e000      	b.n	8000b42 <GPIO_voidSetAltFunction+0x17e>
		default:
			break;
 8000b40:	bf00      	nop
	}
}
 8000b42:	bf00      	nop
 8000b44:	370c      	adds	r7, #12
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop
 8000b50:	40020020 	.word	0x40020020
 8000b54:	40020024 	.word	0x40020024
 8000b58:	40020420 	.word	0x40020420
 8000b5c:	40020424 	.word	0x40020424
 8000b60:	40020820 	.word	0x40020820
 8000b64:	40020824 	.word	0x40020824
 8000b68:	40020c20 	.word	0x40020c20
 8000b6c:	40020c24 	.word	0x40020c24
 8000b70:	40021020 	.word	0x40021020
 8000b74:	40021024 	.word	0x40021024
 8000b78:	40021c20 	.word	0x40021c20
 8000b7c:	40021c24 	.word	0x40021c24

08000b80 <delay>:
#include "LCD_Config.h"
#include "BIT_MATH.h"
#include "GPIO_Interface.h"
#include "RCC_private.h"
void delay(u32 Copy_u32Time)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b085      	sub	sp, #20
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
	for(u32 i = 0 ; i < Copy_u32Time ; i++)
 8000b88:	2300      	movs	r3, #0
 8000b8a:	60fb      	str	r3, [r7, #12]
 8000b8c:	e00d      	b.n	8000baa <delay+0x2a>
	{
		for(u16 j = 0 ; j < 565 ; j++)
 8000b8e:	2300      	movs	r3, #0
 8000b90:	817b      	strh	r3, [r7, #10]
 8000b92:	e003      	b.n	8000b9c <delay+0x1c>
		{
			asm("NOP");
 8000b94:	bf00      	nop
		for(u16 j = 0 ; j < 565 ; j++)
 8000b96:	897b      	ldrh	r3, [r7, #10]
 8000b98:	3301      	adds	r3, #1
 8000b9a:	817b      	strh	r3, [r7, #10]
 8000b9c:	897b      	ldrh	r3, [r7, #10]
 8000b9e:	f5b3 7f0d 	cmp.w	r3, #564	; 0x234
 8000ba2:	d9f7      	bls.n	8000b94 <delay+0x14>
	for(u32 i = 0 ; i < Copy_u32Time ; i++)
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	3301      	adds	r3, #1
 8000ba8:	60fb      	str	r3, [r7, #12]
 8000baa:	68fa      	ldr	r2, [r7, #12]
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	429a      	cmp	r2, r3
 8000bb0:	d3ed      	bcc.n	8000b8e <delay+0xe>
		}
	}
}
 8000bb2:	bf00      	nop
 8000bb4:	bf00      	nop
 8000bb6:	3714      	adds	r7, #20
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbe:	4770      	bx	lr

08000bc0 <RCC_voidInit>:
#include "RCC_private.h"
#include "RCC_config.h"


 void RCC_voidInit(void)
 {
 8000bc0:	b480      	push	{r7}
 8000bc2:	b083      	sub	sp, #12
 8000bc4:	af00      	add	r7, sp, #0
	 u32 Local_u32TimeOut = 0;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	607b      	str	r3, [r7, #4]

	 	 /* RCC Configurations */


	 	 /* HSI ON */
         SET_BIT(RCC_CR, RCC_HSION);
 8000bca:	4b14      	ldr	r3, [pc, #80]	; (8000c1c <RCC_voidInit+0x5c>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	4a13      	ldr	r2, [pc, #76]	; (8000c1c <RCC_voidInit+0x5c>)
 8000bd0:	f043 0301 	orr.w	r3, r3, #1
 8000bd4:	6013      	str	r3, [r2, #0]
         /* polling to check if the HSI is ready or not */
         while((GET_BIT(RCC_CR, RCC_HSIRDY)==0) && (Local_u32TimeOut < 10000))
 8000bd6:	e002      	b.n	8000bde <RCC_voidInit+0x1e>
         {
        	 Local_u32TimeOut++;
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	3301      	adds	r3, #1
 8000bdc:	607b      	str	r3, [r7, #4]
         while((GET_BIT(RCC_CR, RCC_HSIRDY)==0) && (Local_u32TimeOut < 10000))
 8000bde:	4b0f      	ldr	r3, [pc, #60]	; (8000c1c <RCC_voidInit+0x5c>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	085b      	lsrs	r3, r3, #1
 8000be4:	f003 0301 	and.w	r3, r3, #1
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d104      	bne.n	8000bf6 <RCC_voidInit+0x36>
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	f242 720f 	movw	r2, #9999	; 0x270f
 8000bf2:	4293      	cmp	r3, r2
 8000bf4:	d9f0      	bls.n	8000bd8 <RCC_voidInit+0x18>
         }
         Clear_bit(RCC_CFGR, 0);
 8000bf6:	4b0a      	ldr	r3, [pc, #40]	; (8000c20 <RCC_voidInit+0x60>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	4a09      	ldr	r2, [pc, #36]	; (8000c20 <RCC_voidInit+0x60>)
 8000bfc:	f023 0301 	bic.w	r3, r3, #1
 8000c00:	6013      	str	r3, [r2, #0]
         Clear_bit(RCC_CFGR, 1);
 8000c02:	4b07      	ldr	r3, [pc, #28]	; (8000c20 <RCC_voidInit+0x60>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	4a06      	ldr	r2, [pc, #24]	; (8000c20 <RCC_voidInit+0x60>)
 8000c08:	f023 0302 	bic.w	r3, r3, #2
 8000c0c:	6013      	str	r3, [r2, #0]
		#error "Wrong Choice of Clock Type"
    
     	 #endif
	#endif

 }
 8000c0e:	bf00      	nop
 8000c10:	370c      	adds	r7, #12
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop
 8000c1c:	40023800 	.word	0x40023800
 8000c20:	40023808 	.word	0x40023808

08000c24 <RCC_voidEnablePeripheralCLK>:
//    }
//}   /* RCC_voidInit */

/* this function for enable Periperal CLK for GPIO, DMA and OTG */
void RCC_voidEnablePeripheralCLK(RCC_Bus Copy_u8BusID, gpio_type Copy_u8PerID)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b083      	sub	sp, #12
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	460a      	mov	r2, r1
 8000c2e:	71fb      	strb	r3, [r7, #7]
 8000c30:	4613      	mov	r3, r2
 8000c32:	71bb      	strb	r3, [r7, #6]
    switch (Copy_u8BusID)
 8000c34:	79fb      	ldrb	r3, [r7, #7]
 8000c36:	2b03      	cmp	r3, #3
 8000c38:	d836      	bhi.n	8000ca8 <RCC_voidEnablePeripheralCLK+0x84>
 8000c3a:	a201      	add	r2, pc, #4	; (adr r2, 8000c40 <RCC_voidEnablePeripheralCLK+0x1c>)
 8000c3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c40:	08000c51 	.word	0x08000c51
 8000c44:	08000c67 	.word	0x08000c67
 8000c48:	08000c7d 	.word	0x08000c7d
 8000c4c:	08000c93 	.word	0x08000c93
    {
        case RCC_AHB1: SET_BIT(RCC_AHB1ENR, Copy_u8PerID); break;
 8000c50:	4b18      	ldr	r3, [pc, #96]	; (8000cb4 <RCC_voidEnablePeripheralCLK+0x90>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	79ba      	ldrb	r2, [r7, #6]
 8000c56:	2101      	movs	r1, #1
 8000c58:	fa01 f202 	lsl.w	r2, r1, r2
 8000c5c:	4611      	mov	r1, r2
 8000c5e:	4a15      	ldr	r2, [pc, #84]	; (8000cb4 <RCC_voidEnablePeripheralCLK+0x90>)
 8000c60:	430b      	orrs	r3, r1
 8000c62:	6013      	str	r3, [r2, #0]
 8000c64:	e020      	b.n	8000ca8 <RCC_voidEnablePeripheralCLK+0x84>
        case RCC_AHB2: SET_BIT(RCC_AHB2ENR, Copy_u8PerID); break;
 8000c66:	4b14      	ldr	r3, [pc, #80]	; (8000cb8 <RCC_voidEnablePeripheralCLK+0x94>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	79ba      	ldrb	r2, [r7, #6]
 8000c6c:	2101      	movs	r1, #1
 8000c6e:	fa01 f202 	lsl.w	r2, r1, r2
 8000c72:	4611      	mov	r1, r2
 8000c74:	4a10      	ldr	r2, [pc, #64]	; (8000cb8 <RCC_voidEnablePeripheralCLK+0x94>)
 8000c76:	430b      	orrs	r3, r1
 8000c78:	6013      	str	r3, [r2, #0]
 8000c7a:	e015      	b.n	8000ca8 <RCC_voidEnablePeripheralCLK+0x84>
        case RCC_ABP1: SET_BIT(RCC_APB1ENR, Copy_u8PerID); break;
 8000c7c:	4b0f      	ldr	r3, [pc, #60]	; (8000cbc <RCC_voidEnablePeripheralCLK+0x98>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	79ba      	ldrb	r2, [r7, #6]
 8000c82:	2101      	movs	r1, #1
 8000c84:	fa01 f202 	lsl.w	r2, r1, r2
 8000c88:	4611      	mov	r1, r2
 8000c8a:	4a0c      	ldr	r2, [pc, #48]	; (8000cbc <RCC_voidEnablePeripheralCLK+0x98>)
 8000c8c:	430b      	orrs	r3, r1
 8000c8e:	6013      	str	r3, [r2, #0]
 8000c90:	e00a      	b.n	8000ca8 <RCC_voidEnablePeripheralCLK+0x84>
        case RCC_ABP2: SET_BIT(RCC_APB2ENR, Copy_u8PerID); break;
 8000c92:	4b0b      	ldr	r3, [pc, #44]	; (8000cc0 <RCC_voidEnablePeripheralCLK+0x9c>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	79ba      	ldrb	r2, [r7, #6]
 8000c98:	2101      	movs	r1, #1
 8000c9a:	fa01 f202 	lsl.w	r2, r1, r2
 8000c9e:	4611      	mov	r1, r2
 8000ca0:	4a07      	ldr	r2, [pc, #28]	; (8000cc0 <RCC_voidEnablePeripheralCLK+0x9c>)
 8000ca2:	430b      	orrs	r3, r1
 8000ca4:	6013      	str	r3, [r2, #0]
 8000ca6:	bf00      	nop
    }
}   /* RCC_voidEnablePeripheralCLK */
 8000ca8:	bf00      	nop
 8000caa:	370c      	adds	r7, #12
 8000cac:	46bd      	mov	sp, r7
 8000cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb2:	4770      	bx	lr
 8000cb4:	40023830 	.word	0x40023830
 8000cb8:	40023834 	.word	0x40023834
 8000cbc:	40023840 	.word	0x40023840
 8000cc0:	40023844 	.word	0x40023844

08000cc4 <KeyPad_Intialize>:
#include "STD_TYPES.h"
#include "keypad.h"
#include "keypad_config.h"

void  KeyPad_Intialize(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0

	//set rows as input
	//port c pin 0
	Clear_bit(keypad_port_mode,0);
 8000cc8:	4b3e      	ldr	r3, [pc, #248]	; (8000dc4 <KeyPad_Intialize+0x100>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a3d      	ldr	r2, [pc, #244]	; (8000dc4 <KeyPad_Intialize+0x100>)
 8000cce:	f023 0301 	bic.w	r3, r3, #1
 8000cd2:	6013      	str	r3, [r2, #0]
	Clear_bit(keypad_port_mode,1);
 8000cd4:	4b3b      	ldr	r3, [pc, #236]	; (8000dc4 <KeyPad_Intialize+0x100>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a3a      	ldr	r2, [pc, #232]	; (8000dc4 <KeyPad_Intialize+0x100>)
 8000cda:	f023 0302 	bic.w	r3, r3, #2
 8000cde:	6013      	str	r3, [r2, #0]

	//port c pin 1
	Clear_bit(keypad_port_mode,2);
 8000ce0:	4b38      	ldr	r3, [pc, #224]	; (8000dc4 <KeyPad_Intialize+0x100>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4a37      	ldr	r2, [pc, #220]	; (8000dc4 <KeyPad_Intialize+0x100>)
 8000ce6:	f023 0304 	bic.w	r3, r3, #4
 8000cea:	6013      	str	r3, [r2, #0]
	Clear_bit(keypad_port_mode,3);
 8000cec:	4b35      	ldr	r3, [pc, #212]	; (8000dc4 <KeyPad_Intialize+0x100>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a34      	ldr	r2, [pc, #208]	; (8000dc4 <KeyPad_Intialize+0x100>)
 8000cf2:	f023 0308 	bic.w	r3, r3, #8
 8000cf6:	6013      	str	r3, [r2, #0]
	//port c pin 2
	Clear_bit(keypad_port_mode,4);
 8000cf8:	4b32      	ldr	r3, [pc, #200]	; (8000dc4 <KeyPad_Intialize+0x100>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a31      	ldr	r2, [pc, #196]	; (8000dc4 <KeyPad_Intialize+0x100>)
 8000cfe:	f023 0310 	bic.w	r3, r3, #16
 8000d02:	6013      	str	r3, [r2, #0]
	Clear_bit(keypad_port_mode,5);
 8000d04:	4b2f      	ldr	r3, [pc, #188]	; (8000dc4 <KeyPad_Intialize+0x100>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4a2e      	ldr	r2, [pc, #184]	; (8000dc4 <KeyPad_Intialize+0x100>)
 8000d0a:	f023 0320 	bic.w	r3, r3, #32
 8000d0e:	6013      	str	r3, [r2, #0]
	//port c pin 3
	Clear_bit(keypad_port_mode,6);
 8000d10:	4b2c      	ldr	r3, [pc, #176]	; (8000dc4 <KeyPad_Intialize+0x100>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4a2b      	ldr	r2, [pc, #172]	; (8000dc4 <KeyPad_Intialize+0x100>)
 8000d16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000d1a:	6013      	str	r3, [r2, #0]
	Clear_bit(keypad_port_mode,7);
 8000d1c:	4b29      	ldr	r3, [pc, #164]	; (8000dc4 <KeyPad_Intialize+0x100>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4a28      	ldr	r2, [pc, #160]	; (8000dc4 <KeyPad_Intialize+0x100>)
 8000d22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000d26:	6013      	str	r3, [r2, #0]
	//port c pin 4 // column input
	SET_BIT(keypad_port_mode,8);
 8000d28:	4b26      	ldr	r3, [pc, #152]	; (8000dc4 <KeyPad_Intialize+0x100>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a25      	ldr	r2, [pc, #148]	; (8000dc4 <KeyPad_Intialize+0x100>)
 8000d2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d32:	6013      	str	r3, [r2, #0]
	Clear_bit(keypad_port_mode,9);
 8000d34:	4b23      	ldr	r3, [pc, #140]	; (8000dc4 <KeyPad_Intialize+0x100>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4a22      	ldr	r2, [pc, #136]	; (8000dc4 <KeyPad_Intialize+0x100>)
 8000d3a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000d3e:	6013      	str	r3, [r2, #0]
	Clear_bit(keypad_port_type,4);
 8000d40:	4b21      	ldr	r3, [pc, #132]	; (8000dc8 <KeyPad_Intialize+0x104>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4a20      	ldr	r2, [pc, #128]	; (8000dc8 <KeyPad_Intialize+0x104>)
 8000d46:	f023 0310 	bic.w	r3, r3, #16
 8000d4a:	6013      	str	r3, [r2, #0]

	//port c pin 5 // column input
	SET_BIT(keypad_port_mode,10);
 8000d4c:	4b1d      	ldr	r3, [pc, #116]	; (8000dc4 <KeyPad_Intialize+0x100>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4a1c      	ldr	r2, [pc, #112]	; (8000dc4 <KeyPad_Intialize+0x100>)
 8000d52:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d56:	6013      	str	r3, [r2, #0]
	Clear_bit(keypad_port_mode,11);
 8000d58:	4b1a      	ldr	r3, [pc, #104]	; (8000dc4 <KeyPad_Intialize+0x100>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	4a19      	ldr	r2, [pc, #100]	; (8000dc4 <KeyPad_Intialize+0x100>)
 8000d5e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000d62:	6013      	str	r3, [r2, #0]
	Clear_bit(keypad_port_type,5);
 8000d64:	4b18      	ldr	r3, [pc, #96]	; (8000dc8 <KeyPad_Intialize+0x104>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4a17      	ldr	r2, [pc, #92]	; (8000dc8 <KeyPad_Intialize+0x104>)
 8000d6a:	f023 0320 	bic.w	r3, r3, #32
 8000d6e:	6013      	str	r3, [r2, #0]
	//port c pin 6 // column input
	SET_BIT(keypad_port_mode,12);
 8000d70:	4b14      	ldr	r3, [pc, #80]	; (8000dc4 <KeyPad_Intialize+0x100>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4a13      	ldr	r2, [pc, #76]	; (8000dc4 <KeyPad_Intialize+0x100>)
 8000d76:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d7a:	6013      	str	r3, [r2, #0]
	Clear_bit(keypad_port_mode,13);
 8000d7c:	4b11      	ldr	r3, [pc, #68]	; (8000dc4 <KeyPad_Intialize+0x100>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4a10      	ldr	r2, [pc, #64]	; (8000dc4 <KeyPad_Intialize+0x100>)
 8000d82:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000d86:	6013      	str	r3, [r2, #0]
	Clear_bit(keypad_port_type,6);
 8000d88:	4b0f      	ldr	r3, [pc, #60]	; (8000dc8 <KeyPad_Intialize+0x104>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a0e      	ldr	r2, [pc, #56]	; (8000dc8 <KeyPad_Intialize+0x104>)
 8000d8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000d92:	6013      	str	r3, [r2, #0]
	//port c pin 7 // column input
	SET_BIT(keypad_port_mode,14);
 8000d94:	4b0b      	ldr	r3, [pc, #44]	; (8000dc4 <KeyPad_Intialize+0x100>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4a0a      	ldr	r2, [pc, #40]	; (8000dc4 <KeyPad_Intialize+0x100>)
 8000d9a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d9e:	6013      	str	r3, [r2, #0]
	Clear_bit(keypad_port_mode,15);
 8000da0:	4b08      	ldr	r3, [pc, #32]	; (8000dc4 <KeyPad_Intialize+0x100>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a07      	ldr	r2, [pc, #28]	; (8000dc4 <KeyPad_Intialize+0x100>)
 8000da6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000daa:	6013      	str	r3, [r2, #0]
	Clear_bit(keypad_port_type,7);
 8000dac:	4b06      	ldr	r3, [pc, #24]	; (8000dc8 <KeyPad_Intialize+0x104>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a05      	ldr	r2, [pc, #20]	; (8000dc8 <KeyPad_Intialize+0x104>)
 8000db2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000db6:	6013      	str	r3, [r2, #0]

}
 8000db8:	bf00      	nop
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop
 8000dc4:	40020800 	.word	0x40020800
 8000dc8:	40020804 	.word	0x40020804

08000dcc <KeyPad_4x4_adjustKeyNumber>:




static u8 KeyPad_4x4_adjustKeyNumber(u8 button_number)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b083      	sub	sp, #12
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	71fb      	strb	r3, [r7, #7]
	switch(button_number)
 8000dd6:	79fb      	ldrb	r3, [r7, #7]
 8000dd8:	3b01      	subs	r3, #1
 8000dda:	2b0f      	cmp	r3, #15
 8000ddc:	d842      	bhi.n	8000e64 <KeyPad_4x4_adjustKeyNumber+0x98>
 8000dde:	a201      	add	r2, pc, #4	; (adr r2, 8000de4 <KeyPad_4x4_adjustKeyNumber+0x18>)
 8000de0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000de4:	08000e25 	.word	0x08000e25
 8000de8:	08000e29 	.word	0x08000e29
 8000dec:	08000e2d 	.word	0x08000e2d
 8000df0:	08000e31 	.word	0x08000e31
 8000df4:	08000e35 	.word	0x08000e35
 8000df8:	08000e39 	.word	0x08000e39
 8000dfc:	08000e3d 	.word	0x08000e3d
 8000e00:	08000e41 	.word	0x08000e41
 8000e04:	08000e45 	.word	0x08000e45
 8000e08:	08000e49 	.word	0x08000e49
 8000e0c:	08000e4d 	.word	0x08000e4d
 8000e10:	08000e51 	.word	0x08000e51
 8000e14:	08000e55 	.word	0x08000e55
 8000e18:	08000e59 	.word	0x08000e59
 8000e1c:	08000e5d 	.word	0x08000e5d
 8000e20:	08000e61 	.word	0x08000e61
	{
		case 1: return 7;
 8000e24:	2307      	movs	r3, #7
 8000e26:	e01e      	b.n	8000e66 <KeyPad_4x4_adjustKeyNumber+0x9a>
				break;
		case 2: return 8;
 8000e28:	2308      	movs	r3, #8
 8000e2a:	e01c      	b.n	8000e66 <KeyPad_4x4_adjustKeyNumber+0x9a>
				break;
		case 3: return 9;
 8000e2c:	2309      	movs	r3, #9
 8000e2e:	e01a      	b.n	8000e66 <KeyPad_4x4_adjustKeyNumber+0x9a>
				break;
		case 4: return '%'; // ASCII Code of %
 8000e30:	2325      	movs	r3, #37	; 0x25
 8000e32:	e018      	b.n	8000e66 <KeyPad_4x4_adjustKeyNumber+0x9a>
				break;
		case 5: return 4;
 8000e34:	2304      	movs	r3, #4
 8000e36:	e016      	b.n	8000e66 <KeyPad_4x4_adjustKeyNumber+0x9a>
				break;
		case 6: return 5;
 8000e38:	2305      	movs	r3, #5
 8000e3a:	e014      	b.n	8000e66 <KeyPad_4x4_adjustKeyNumber+0x9a>
				break;
		case 7: return 6;
 8000e3c:	2306      	movs	r3, #6
 8000e3e:	e012      	b.n	8000e66 <KeyPad_4x4_adjustKeyNumber+0x9a>
				break;
		case 8: return '*'; /* ASCII Code of '*' */
 8000e40:	232a      	movs	r3, #42	; 0x2a
 8000e42:	e010      	b.n	8000e66 <KeyPad_4x4_adjustKeyNumber+0x9a>
				break;
		case 9: return 1;
 8000e44:	2301      	movs	r3, #1
 8000e46:	e00e      	b.n	8000e66 <KeyPad_4x4_adjustKeyNumber+0x9a>
				break;
		case 10: return 2;
 8000e48:	2302      	movs	r3, #2
 8000e4a:	e00c      	b.n	8000e66 <KeyPad_4x4_adjustKeyNumber+0x9a>
				break;
		case 11: return 3;
 8000e4c:	2303      	movs	r3, #3
 8000e4e:	e00a      	b.n	8000e66 <KeyPad_4x4_adjustKeyNumber+0x9a>
				break;
		case 12: return '-'; /* ASCII Code of '-' */
 8000e50:	232d      	movs	r3, #45	; 0x2d
 8000e52:	e008      	b.n	8000e66 <KeyPad_4x4_adjustKeyNumber+0x9a>
				break;
		case 13: return 13;  /* ASCII of Enter */
 8000e54:	230d      	movs	r3, #13
 8000e56:	e006      	b.n	8000e66 <KeyPad_4x4_adjustKeyNumber+0x9a>
				break;
		case 14: return 0;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	e004      	b.n	8000e66 <KeyPad_4x4_adjustKeyNumber+0x9a>
				break;
		case 15: return '='; /* ASCII Code of '=' */
 8000e5c:	233d      	movs	r3, #61	; 0x3d
 8000e5e:	e002      	b.n	8000e66 <KeyPad_4x4_adjustKeyNumber+0x9a>
				break;
		case 16: return '+'; /* ASCII Code of '+' */
 8000e60:	232b      	movs	r3, #43	; 0x2b
 8000e62:	e000      	b.n	8000e66 <KeyPad_4x4_adjustKeyNumber+0x9a>
				break;
		default: return button_number;
 8000e64:	79fb      	ldrb	r3, [r7, #7]
	}
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	370c      	adds	r7, #12
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop

08000e74 <KeyPad_getPressedKey>:
//			}
//		}
//	}
//}
u8 KeyPad_getPressedKey(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
	u8 col,row;

	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	71fb      	strb	r3, [r7, #7]
 8000e7e:	e028      	b.n	8000ed2 <KeyPad_getPressedKey+0x5e>

			/*
			 * clear the output pin column in this trace and enable the internal
			 * pull up resistors for the rows pins
			 */
			keypad_ODR = (~(0b0000000000010000<<col));
 8000e80:	79fb      	ldrb	r3, [r7, #7]
 8000e82:	2210      	movs	r2, #16
 8000e84:	fa02 f303 	lsl.w	r3, r2, r3
 8000e88:	43da      	mvns	r2, r3
 8000e8a:	4b16      	ldr	r3, [pc, #88]	; (8000ee4 <KeyPad_getPressedKey+0x70>)
 8000e8c:	601a      	str	r2, [r3, #0]
			for(row=0;row<N_row;row++) /* loop for rows */
 8000e8e:	2300      	movs	r3, #0
 8000e90:	71bb      	strb	r3, [r7, #6]
 8000e92:	e018      	b.n	8000ec6 <KeyPad_getPressedKey+0x52>
			{
				if(BIT_IS_CLEAR(keypad_IDR,row)) /* if the switch is press in this row */
 8000e94:	4b14      	ldr	r3, [pc, #80]	; (8000ee8 <KeyPad_getPressedKey+0x74>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	79ba      	ldrb	r2, [r7, #6]
 8000e9a:	2101      	movs	r1, #1
 8000e9c:	fa01 f202 	lsl.w	r2, r1, r2
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d10c      	bne.n	8000ec0 <KeyPad_getPressedKey+0x4c>
				{
						return KeyPad_4x4_adjustKeyNumber((row*N_col)+col+1);
 8000ea6:	79bb      	ldrb	r3, [r7, #6]
 8000ea8:	009b      	lsls	r3, r3, #2
 8000eaa:	b2da      	uxtb	r2, r3
 8000eac:	79fb      	ldrb	r3, [r7, #7]
 8000eae:	4413      	add	r3, r2
 8000eb0:	b2db      	uxtb	r3, r3
 8000eb2:	3301      	adds	r3, #1
 8000eb4:	b2db      	uxtb	r3, r3
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f7ff ff88 	bl	8000dcc <KeyPad_4x4_adjustKeyNumber>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	e00c      	b.n	8000eda <KeyPad_getPressedKey+0x66>
			for(row=0;row<N_row;row++) /* loop for rows */
 8000ec0:	79bb      	ldrb	r3, [r7, #6]
 8000ec2:	3301      	adds	r3, #1
 8000ec4:	71bb      	strb	r3, [r7, #6]
 8000ec6:	79bb      	ldrb	r3, [r7, #6]
 8000ec8:	2b03      	cmp	r3, #3
 8000eca:	d9e3      	bls.n	8000e94 <KeyPad_getPressedKey+0x20>
		for(col=0;col<N_col;col++) /* loop for columns */
 8000ecc:	79fb      	ldrb	r3, [r7, #7]
 8000ece:	3301      	adds	r3, #1
 8000ed0:	71fb      	strb	r3, [r7, #7]
 8000ed2:	79fb      	ldrb	r3, [r7, #7]
 8000ed4:	2b03      	cmp	r3, #3
 8000ed6:	d9d3      	bls.n	8000e80 <KeyPad_getPressedKey+0xc>
 8000ed8:	e7cf      	b.n	8000e7a <KeyPad_getPressedKey+0x6>

				}
			}
		}
	}
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	3708      	adds	r7, #8
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	40020814 	.word	0x40020814
 8000ee8:	40020810 	.word	0x40020810

08000eec <main>:
#include "NVIC_interface.h"
#include "EXTI_Interface.h"
#include "usart_interface.h"


int main(){
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
//

		//RCC/
		RCC_voidInit();
 8000ef2:	f7ff fe65 	bl	8000bc0 <RCC_voidInit>
		RCC_voidEnablePeripheralCLK(RCC_AHB1,RCC_GPIOA_EN);
 8000ef6:	2100      	movs	r1, #0
 8000ef8:	2000      	movs	r0, #0
 8000efa:	f7ff fe93 	bl	8000c24 <RCC_voidEnablePeripheralCLK>
		RCC_voidEnablePeripheralCLK(RCC_AHB1,RCC_GPIOB_EN);
 8000efe:	2101      	movs	r1, #1
 8000f00:	2000      	movs	r0, #0
 8000f02:	f7ff fe8f 	bl	8000c24 <RCC_voidEnablePeripheralCLK>
		RCC_voidEnablePeripheralCLK(RCC_AHB1,RCC_GPIOC_EN);
 8000f06:	2102      	movs	r1, #2
 8000f08:	2000      	movs	r0, #0
 8000f0a:	f7ff fe8b 	bl	8000c24 <RCC_voidEnablePeripheralCLK>


				//Keypad
				KeyPad_Intialize();
 8000f0e:	f7ff fed9 	bl	8000cc4 <KeyPad_Intialize>
				u8 key;
				//usart2 enable
				delay(500);
 8000f12:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f16:	f7ff fe33 	bl	8000b80 <delay>
				USART_voidInit();// initialize UART
 8000f1a:	f000 f82f 	bl	8000f7c <USART_voidInit>
				//delay(500);
		L:
				for (int i = 0 ; i < 6 ; i++)
 8000f1e:	2300      	movs	r3, #0
 8000f20:	607b      	str	r3, [r7, #4]
 8000f22:	e017      	b.n	8000f54 <main+0x68>
				{
				key = KeyPad_getPressedKey();
 8000f24:	f7ff ffa6 	bl	8000e74 <KeyPad_getPressedKey>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	70fb      	strb	r3, [r7, #3]
					if (key >0 && key <= 9)
 8000f2c:	78fb      	ldrb	r3, [r7, #3]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d00d      	beq.n	8000f4e <main+0x62>
 8000f32:	78fb      	ldrb	r3, [r7, #3]
 8000f34:	2b09      	cmp	r3, #9
 8000f36:	d80a      	bhi.n	8000f4e <main+0x62>
					{ delay(150);
 8000f38:	2096      	movs	r0, #150	; 0x96
 8000f3a:	f7ff fe21 	bl	8000b80 <delay>
					  USART_voidTransmit(key);
 8000f3e:	78fb      	ldrb	r3, [r7, #3]
 8000f40:	4618      	mov	r0, r3
 8000f42:	f000 f86f 	bl	8001024 <USART_voidTransmit>
					  delay(500);
 8000f46:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f4a:	f7ff fe19 	bl	8000b80 <delay>
				for (int i = 0 ; i < 6 ; i++)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	3301      	adds	r3, #1
 8000f52:	607b      	str	r3, [r7, #4]
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	2b05      	cmp	r3, #5
 8000f58:	dde4      	ble.n	8000f24 <main+0x38>
					}//end if
				}//end for
				for(;;)
				{
					if (USART_u8Receive() == 1 )
 8000f5a:	f000 f887 	bl	800106c <USART_u8Receive>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b01      	cmp	r3, #1
 8000f62:	d1fa      	bne.n	8000f5a <main+0x6e>
					{
						delay(100);
 8000f64:	2064      	movs	r0, #100	; 0x64
 8000f66:	f7ff fe0b 	bl	8000b80 <delay>
						goto	L;
 8000f6a:	e7d8      	b.n	8000f1e <main+0x32>

08000f6c <SPI1_IRQHandler>:
	//SS high
GPIO_void_setPin_value(SPI_PORT_SS, SPI1_SS_Pin, HIGH);
}

void SPI1_IRQHandler(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
	//SPI_PfCallBack(u8);
}
 8000f70:	bf00      	nop
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr
	...

08000f7c <USART_voidInit>:
//}



void USART_voidInit(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
	/*		 RCC CLK EN for USART		 */
	RCC_voidEnablePeripheralCLK(RCC_ABP1, 17);// USART2 enable
 8000f80:	2111      	movs	r1, #17
 8000f82:	2002      	movs	r0, #2
 8000f84:	f7ff fe4e 	bl	8000c24 <RCC_voidEnablePeripheralCLK>

	/*		 RCC GPIOA EN 				 */
	RCC_voidEnablePeripheralCLK(RCC_AHB1,RCC_GPIOA_EN);
 8000f88:	2100      	movs	r1, #0
 8000f8a:	2000      	movs	r0, #0
 8000f8c:	f7ff fe4a 	bl	8000c24 <RCC_voidEnablePeripheralCLK>

	/* 	TX --> PA2  Mode (AF) 	&&	 RCC_GPIOA EN 	*/
	GPIO_void_setPin_Direction(PORT_A, PIN2, ALTERNATIVE_FUNCTION_MODE);
 8000f90:	2202      	movs	r2, #2
 8000f92:	2102      	movs	r1, #2
 8000f94:	2000      	movs	r0, #0
 8000f96:	f7ff f941 	bl	800021c <GPIO_void_setPin_Direction>
	GPIO_void_setPin_Output_Type(PORT_A, PIN2, OUTPUT_PUSH_PULL);
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	2102      	movs	r1, #2
 8000f9e:	2000      	movs	r0, #0
 8000fa0:	f7ff fc2e 	bl	8000800 <GPIO_void_setPin_Output_Type>


	/* 	RX --> PA3  Mode (AF) 	&&	 RCC_GPIOA EN 	*/

	GPIO_void_setPin_Direction(PORT_A, PIN3, ALTERNATIVE_FUNCTION_MODE);
 8000fa4:	2202      	movs	r2, #2
 8000fa6:	2103      	movs	r1, #3
 8000fa8:	2000      	movs	r0, #0
 8000faa:	f7ff f937 	bl	800021c <GPIO_void_setPin_Direction>
	GPIO_void_setPin_Output_Type(PORT_A, PIN3, OUTPUT_PUSH_PULL);
 8000fae:	2200      	movs	r2, #0
 8000fb0:	2103      	movs	r1, #3
 8000fb2:	2000      	movs	r0, #0
 8000fb4:	f7ff fc24 	bl	8000800 <GPIO_void_setPin_Output_Type>

	/* 		Alternative function 7 for PA2	 	 */
	GPIO_voidSetAltFunction(PORT_A, PIN2, AF7);
 8000fb8:	2207      	movs	r2, #7
 8000fba:	2102      	movs	r1, #2
 8000fbc:	2000      	movs	r0, #0
 8000fbe:	f7ff fd01 	bl	80009c4 <GPIO_voidSetAltFunction>

	/* 		Alternative function 7 for PA3  	 */
	GPIO_voidSetAltFunction(PORT_A, PIN3, AF7);
 8000fc2:	2207      	movs	r2, #7
 8000fc4:	2103      	movs	r1, #3
 8000fc6:	2000      	movs	r0, #0
 8000fc8:	f7ff fcfc 	bl	80009c4 <GPIO_voidSetAltFunction>


	/* Set baud rate 9600 on HSI = 16 MHZ */
	USART2->BRR = 0x0683;
 8000fcc:	4b14      	ldr	r3, [pc, #80]	; (8001020 <USART_voidInit+0xa4>)
 8000fce:	f240 6283 	movw	r2, #1667	; 0x683
 8000fd2:	609a      	str	r2, [r3, #8]

	/*	Receive Enable	*/
	SET_BIT(USART2->CR1,2);
 8000fd4:	4b12      	ldr	r3, [pc, #72]	; (8001020 <USART_voidInit+0xa4>)
 8000fd6:	68db      	ldr	r3, [r3, #12]
 8000fd8:	4a11      	ldr	r2, [pc, #68]	; (8001020 <USART_voidInit+0xa4>)
 8000fda:	f043 0304 	orr.w	r3, r3, #4
 8000fde:	60d3      	str	r3, [r2, #12]

	/*  transmit Enable */
	SET_BIT(USART2->CR1,3);
 8000fe0:	4b0f      	ldr	r3, [pc, #60]	; (8001020 <USART_voidInit+0xa4>)
 8000fe2:	68db      	ldr	r3, [r3, #12]
 8000fe4:	4a0e      	ldr	r2, [pc, #56]	; (8001020 <USART_voidInit+0xa4>)
 8000fe6:	f043 0308 	orr.w	r3, r3, #8
 8000fea:	60d3      	str	r3, [r2, #12]

	/* 	1 Start bit, 8 Data bits, n Stop bit 	 */
	Clear_bit(USART2->CR1,12);
 8000fec:	4b0c      	ldr	r3, [pc, #48]	; (8001020 <USART_voidInit+0xa4>)
 8000fee:	68db      	ldr	r3, [r3, #12]
 8000ff0:	4a0b      	ldr	r2, [pc, #44]	; (8001020 <USART_voidInit+0xa4>)
 8000ff2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000ff6:	60d3      	str	r3, [r2, #12]

	/*	 1 stop bit		*/
	Clear_bit(USART2->CR2,12);
 8000ff8:	4b09      	ldr	r3, [pc, #36]	; (8001020 <USART_voidInit+0xa4>)
 8000ffa:	691b      	ldr	r3, [r3, #16]
 8000ffc:	4a08      	ldr	r2, [pc, #32]	; (8001020 <USART_voidInit+0xa4>)
 8000ffe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001002:	6113      	str	r3, [r2, #16]
	Clear_bit(USART2->CR2,13);
 8001004:	4b06      	ldr	r3, [pc, #24]	; (8001020 <USART_voidInit+0xa4>)
 8001006:	691b      	ldr	r3, [r3, #16]
 8001008:	4a05      	ldr	r2, [pc, #20]	; (8001020 <USART_voidInit+0xa4>)
 800100a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800100e:	6113      	str	r3, [r2, #16]

	/*	 Enable USART2	 */
	SET_BIT(USART2->CR1,13);
 8001010:	4b03      	ldr	r3, [pc, #12]	; (8001020 <USART_voidInit+0xa4>)
 8001012:	68db      	ldr	r3, [r3, #12]
 8001014:	4a02      	ldr	r2, [pc, #8]	; (8001020 <USART_voidInit+0xa4>)
 8001016:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800101a:	60d3      	str	r3, [r2, #12]

}
 800101c:	bf00      	nop
 800101e:	bd80      	pop	{r7, pc}
 8001020:	40004400 	.word	0x40004400

08001024 <USART_voidTransmit>:

void USART_voidTransmit(u8 Copy_u8TransmitData)
{
 8001024:	b480      	push	{r7}
 8001026:	b085      	sub	sp, #20
 8001028:	af00      	add	r7, sp, #0
 800102a:	4603      	mov	r3, r0
 800102c:	71fb      	strb	r3, [r7, #7]
	/*		Local Variable for time out 	*/
	u32 Local_u32TimeOut = 0;
 800102e:	2300      	movs	r3, #0
 8001030:	60fb      	str	r3, [r7, #12]

	/*	 Write Data to send		*/
	USART2->DR = Copy_u8TransmitData;
 8001032:	4a0c      	ldr	r2, [pc, #48]	; (8001064 <USART_voidTransmit+0x40>)
 8001034:	79fb      	ldrb	r3, [r7, #7]
 8001036:	6053      	str	r3, [r2, #4]

	/* 		polling with time out technique		 */
	while( (GET_BIT(USART2->SR,7) == 0) && (Local_u32TimeOut < 100000000) )
 8001038:	e002      	b.n	8001040 <USART_voidTransmit+0x1c>
	{
		Local_u32TimeOut++;
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	3301      	adds	r3, #1
 800103e:	60fb      	str	r3, [r7, #12]
	while( (GET_BIT(USART2->SR,7) == 0) && (Local_u32TimeOut < 100000000) )
 8001040:	4b08      	ldr	r3, [pc, #32]	; (8001064 <USART_voidTransmit+0x40>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	09db      	lsrs	r3, r3, #7
 8001046:	f003 0301 	and.w	r3, r3, #1
 800104a:	2b00      	cmp	r3, #0
 800104c:	d103      	bne.n	8001056 <USART_voidTransmit+0x32>
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	4a05      	ldr	r2, [pc, #20]	; (8001068 <USART_voidTransmit+0x44>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d9f1      	bls.n	800103a <USART_voidTransmit+0x16>
	}
}
 8001056:	bf00      	nop
 8001058:	3714      	adds	r7, #20
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	40004400 	.word	0x40004400
 8001068:	05f5e0ff 	.word	0x05f5e0ff

0800106c <USART_u8Receive>:

u8 USART_u8Receive(void)
{
 800106c:	b480      	push	{r7}
 800106e:	b083      	sub	sp, #12
 8001070:	af00      	add	r7, sp, #0
	/*		Local Variable for time out 	*/
	u32 Local_u32TimeOut = 0;
 8001072:	2300      	movs	r3, #0
 8001074:	607b      	str	r3, [r7, #4]

	/* 		Waiting for data to be ready to read with time out   	*/
	while( (GET_BIT(USART2->SR,5) == 0) && (Local_u32TimeOut < 100000000) )
 8001076:	e002      	b.n	800107e <USART_u8Receive+0x12>
	{
		Local_u32TimeOut++;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	3301      	adds	r3, #1
 800107c:	607b      	str	r3, [r7, #4]
	while( (GET_BIT(USART2->SR,5) == 0) && (Local_u32TimeOut < 100000000) )
 800107e:	4b0a      	ldr	r3, [pc, #40]	; (80010a8 <USART_u8Receive+0x3c>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	095b      	lsrs	r3, r3, #5
 8001084:	f003 0301 	and.w	r3, r3, #1
 8001088:	2b00      	cmp	r3, #0
 800108a:	d103      	bne.n	8001094 <USART_u8Receive+0x28>
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	4a07      	ldr	r2, [pc, #28]	; (80010ac <USART_u8Receive+0x40>)
 8001090:	4293      	cmp	r3, r2
 8001092:	d9f1      	bls.n	8001078 <USART_u8Receive+0xc>
	}
	return USART2->DR;
 8001094:	4b04      	ldr	r3, [pc, #16]	; (80010a8 <USART_u8Receive+0x3c>)
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	b2db      	uxtb	r3, r3
}
 800109a:	4618      	mov	r0, r3
 800109c:	370c      	adds	r7, #12
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	40004400 	.word	0x40004400
 80010ac:	05f5e0ff 	.word	0x05f5e0ff

080010b0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80010b0:	480d      	ldr	r0, [pc, #52]	; (80010e8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80010b2:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80010b4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010b8:	480c      	ldr	r0, [pc, #48]	; (80010ec <LoopForever+0x6>)
  ldr r1, =_edata
 80010ba:	490d      	ldr	r1, [pc, #52]	; (80010f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80010bc:	4a0d      	ldr	r2, [pc, #52]	; (80010f4 <LoopForever+0xe>)
  movs r3, #0
 80010be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010c0:	e002      	b.n	80010c8 <LoopCopyDataInit>

080010c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010c6:	3304      	adds	r3, #4

080010c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010cc:	d3f9      	bcc.n	80010c2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010ce:	4a0a      	ldr	r2, [pc, #40]	; (80010f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80010d0:	4c0a      	ldr	r4, [pc, #40]	; (80010fc <LoopForever+0x16>)
  movs r3, #0
 80010d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010d4:	e001      	b.n	80010da <LoopFillZerobss>

080010d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010d8:	3204      	adds	r2, #4

080010da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010dc:	d3fb      	bcc.n	80010d6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80010de:	f000 f811 	bl	8001104 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80010e2:	f7ff ff03 	bl	8000eec <main>

080010e6 <LoopForever>:

LoopForever:
    b LoopForever
 80010e6:	e7fe      	b.n	80010e6 <LoopForever>
  ldr   r0, =_estack
 80010e8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80010ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010f0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80010f4:	0800116c 	.word	0x0800116c
  ldr r2, =_sbss
 80010f8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80010fc:	20000024 	.word	0x20000024

08001100 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001100:	e7fe      	b.n	8001100 <ADC_IRQHandler>
	...

08001104 <__libc_init_array>:
 8001104:	b570      	push	{r4, r5, r6, lr}
 8001106:	4d0d      	ldr	r5, [pc, #52]	; (800113c <__libc_init_array+0x38>)
 8001108:	4c0d      	ldr	r4, [pc, #52]	; (8001140 <__libc_init_array+0x3c>)
 800110a:	1b64      	subs	r4, r4, r5
 800110c:	10a4      	asrs	r4, r4, #2
 800110e:	2600      	movs	r6, #0
 8001110:	42a6      	cmp	r6, r4
 8001112:	d109      	bne.n	8001128 <__libc_init_array+0x24>
 8001114:	4d0b      	ldr	r5, [pc, #44]	; (8001144 <__libc_init_array+0x40>)
 8001116:	4c0c      	ldr	r4, [pc, #48]	; (8001148 <__libc_init_array+0x44>)
 8001118:	f000 f818 	bl	800114c <_init>
 800111c:	1b64      	subs	r4, r4, r5
 800111e:	10a4      	asrs	r4, r4, #2
 8001120:	2600      	movs	r6, #0
 8001122:	42a6      	cmp	r6, r4
 8001124:	d105      	bne.n	8001132 <__libc_init_array+0x2e>
 8001126:	bd70      	pop	{r4, r5, r6, pc}
 8001128:	f855 3b04 	ldr.w	r3, [r5], #4
 800112c:	4798      	blx	r3
 800112e:	3601      	adds	r6, #1
 8001130:	e7ee      	b.n	8001110 <__libc_init_array+0xc>
 8001132:	f855 3b04 	ldr.w	r3, [r5], #4
 8001136:	4798      	blx	r3
 8001138:	3601      	adds	r6, #1
 800113a:	e7f2      	b.n	8001122 <__libc_init_array+0x1e>
 800113c:	08001164 	.word	0x08001164
 8001140:	08001164 	.word	0x08001164
 8001144:	08001164 	.word	0x08001164
 8001148:	08001168 	.word	0x08001168

0800114c <_init>:
 800114c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800114e:	bf00      	nop
 8001150:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001152:	bc08      	pop	{r3}
 8001154:	469e      	mov	lr, r3
 8001156:	4770      	bx	lr

08001158 <_fini>:
 8001158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800115a:	bf00      	nop
 800115c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800115e:	bc08      	pop	{r3}
 8001160:	469e      	mov	lr, r3
 8001162:	4770      	bx	lr
