
Final_version_Garage_system-TX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000f78  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800110c  08001114  00011114  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800110c  0800110c  00011114  2**0
                  CONTENTS
  4 .ARM          00000000  0800110c  0800110c  00011114  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800110c  08001114  00011114  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800110c  0800110c  0001110c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001110  08001110  00011110  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00011114  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08001114  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08001114  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00011114  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000b2e  00000000  00000000  00011144  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000043d  00000000  00000000  00011c72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000128  00000000  00000000  000120b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000000d0  00000000  00000000  000121d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001498  00000000  00000000  000122a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000d1c  00000000  00000000  00013740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000057d4  00000000  00000000  0001445c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00019c30  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000304  00000000  00000000  00019c84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080010f4 	.word	0x080010f4

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	080010f4 	.word	0x080010f4

080001d4 <GPIO_void_setPin_Direction>:
#include "GPIO_Config.h"
#include "GPIO_Interface.h"

#include "BIT_MATH.h"
void GPIO_void_setPin_Direction(PORT_ID port , PIN_ID pin , DIRECTION_MODE Direction)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
 80001da:	4603      	mov	r3, r0
 80001dc:	71fb      	strb	r3, [r7, #7]
 80001de:	460b      	mov	r3, r1
 80001e0:	71bb      	strb	r3, [r7, #6]
 80001e2:	4613      	mov	r3, r2
 80001e4:	717b      	strb	r3, [r7, #5]
	switch(port)
 80001e6:	79fb      	ldrb	r3, [r7, #7]
 80001e8:	2b05      	cmp	r3, #5
 80001ea:	f200 82d9 	bhi.w	80007a0 <GPIO_void_setPin_Direction+0x5cc>
 80001ee:	a201      	add	r2, pc, #4	; (adr r2, 80001f4 <GPIO_void_setPin_Direction+0x20>)
 80001f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001f4:	0800020d 	.word	0x0800020d
 80001f8:	080002f7 	.word	0x080002f7
 80001fc:	080003df 	.word	0x080003df
 8000200:	080004c7 	.word	0x080004c7
 8000204:	080005bb 	.word	0x080005bb
 8000208:	080006a3 	.word	0x080006a3
	{
	case PORT_A:
		switch(Direction)
 800020c:	797b      	ldrb	r3, [r7, #5]
 800020e:	2b03      	cmp	r3, #3
 8000210:	f200 82bb 	bhi.w	800078a <GPIO_void_setPin_Direction+0x5b6>
 8000214:	a201      	add	r2, pc, #4	; (adr r2, 800021c <GPIO_void_setPin_Direction+0x48>)
 8000216:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800021a:	bf00      	nop
 800021c:	0800022d 	.word	0x0800022d
 8000220:	08000261 	.word	0x08000261
 8000224:	08000293 	.word	0x08000293
 8000228:	080002c5 	.word	0x080002c5
		{
		case INPUT_MODE:Clear_bit(GPIOA_MODER,pin*2);Clear_bit(GPIOA_MODER,(pin*2+1));break;
 800022c:	4bad      	ldr	r3, [pc, #692]	; (80004e4 <GPIO_void_setPin_Direction+0x310>)
 800022e:	681b      	ldr	r3, [r3, #0]
 8000230:	79ba      	ldrb	r2, [r7, #6]
 8000232:	0052      	lsls	r2, r2, #1
 8000234:	2101      	movs	r1, #1
 8000236:	fa01 f202 	lsl.w	r2, r1, r2
 800023a:	43d2      	mvns	r2, r2
 800023c:	4611      	mov	r1, r2
 800023e:	4aa9      	ldr	r2, [pc, #676]	; (80004e4 <GPIO_void_setPin_Direction+0x310>)
 8000240:	400b      	ands	r3, r1
 8000242:	6013      	str	r3, [r2, #0]
 8000244:	4ba7      	ldr	r3, [pc, #668]	; (80004e4 <GPIO_void_setPin_Direction+0x310>)
 8000246:	681b      	ldr	r3, [r3, #0]
 8000248:	79ba      	ldrb	r2, [r7, #6]
 800024a:	0052      	lsls	r2, r2, #1
 800024c:	3201      	adds	r2, #1
 800024e:	2101      	movs	r1, #1
 8000250:	fa01 f202 	lsl.w	r2, r1, r2
 8000254:	43d2      	mvns	r2, r2
 8000256:	4611      	mov	r1, r2
 8000258:	4aa2      	ldr	r2, [pc, #648]	; (80004e4 <GPIO_void_setPin_Direction+0x310>)
 800025a:	400b      	ands	r3, r1
 800025c:	6013      	str	r3, [r2, #0]
 800025e:	e049      	b.n	80002f4 <GPIO_void_setPin_Direction+0x120>
		case GENERAL_PURPOSE_OUTPUT_MODE:SET_BIT(GPIOA_MODER,pin*2);Clear_bit(GPIOA_MODER,(pin*2+1));
 8000260:	4ba0      	ldr	r3, [pc, #640]	; (80004e4 <GPIO_void_setPin_Direction+0x310>)
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	79ba      	ldrb	r2, [r7, #6]
 8000266:	0052      	lsls	r2, r2, #1
 8000268:	2101      	movs	r1, #1
 800026a:	fa01 f202 	lsl.w	r2, r1, r2
 800026e:	4611      	mov	r1, r2
 8000270:	4a9c      	ldr	r2, [pc, #624]	; (80004e4 <GPIO_void_setPin_Direction+0x310>)
 8000272:	430b      	orrs	r3, r1
 8000274:	6013      	str	r3, [r2, #0]
 8000276:	4b9b      	ldr	r3, [pc, #620]	; (80004e4 <GPIO_void_setPin_Direction+0x310>)
 8000278:	681b      	ldr	r3, [r3, #0]
 800027a:	79ba      	ldrb	r2, [r7, #6]
 800027c:	0052      	lsls	r2, r2, #1
 800027e:	3201      	adds	r2, #1
 8000280:	2101      	movs	r1, #1
 8000282:	fa01 f202 	lsl.w	r2, r1, r2
 8000286:	43d2      	mvns	r2, r2
 8000288:	4611      	mov	r1, r2
 800028a:	4a96      	ldr	r2, [pc, #600]	; (80004e4 <GPIO_void_setPin_Direction+0x310>)
 800028c:	400b      	ands	r3, r1
 800028e:	6013      	str	r3, [r2, #0]
		break;
 8000290:	e030      	b.n	80002f4 <GPIO_void_setPin_Direction+0x120>
		case ALTERNATIVE_FUNCTION_MODE:Clear_bit(GPIOA_MODER,pin*2);SET_BIT(GPIOA_MODER,(pin*2+1));break;
 8000292:	4b94      	ldr	r3, [pc, #592]	; (80004e4 <GPIO_void_setPin_Direction+0x310>)
 8000294:	681b      	ldr	r3, [r3, #0]
 8000296:	79ba      	ldrb	r2, [r7, #6]
 8000298:	0052      	lsls	r2, r2, #1
 800029a:	2101      	movs	r1, #1
 800029c:	fa01 f202 	lsl.w	r2, r1, r2
 80002a0:	43d2      	mvns	r2, r2
 80002a2:	4611      	mov	r1, r2
 80002a4:	4a8f      	ldr	r2, [pc, #572]	; (80004e4 <GPIO_void_setPin_Direction+0x310>)
 80002a6:	400b      	ands	r3, r1
 80002a8:	6013      	str	r3, [r2, #0]
 80002aa:	4b8e      	ldr	r3, [pc, #568]	; (80004e4 <GPIO_void_setPin_Direction+0x310>)
 80002ac:	681b      	ldr	r3, [r3, #0]
 80002ae:	79ba      	ldrb	r2, [r7, #6]
 80002b0:	0052      	lsls	r2, r2, #1
 80002b2:	3201      	adds	r2, #1
 80002b4:	2101      	movs	r1, #1
 80002b6:	fa01 f202 	lsl.w	r2, r1, r2
 80002ba:	4611      	mov	r1, r2
 80002bc:	4a89      	ldr	r2, [pc, #548]	; (80004e4 <GPIO_void_setPin_Direction+0x310>)
 80002be:	430b      	orrs	r3, r1
 80002c0:	6013      	str	r3, [r2, #0]
 80002c2:	e017      	b.n	80002f4 <GPIO_void_setPin_Direction+0x120>
		case ANALOG_MODE:SET_BIT(GPIOA_MODER,pin*2);SET_BIT(GPIOA_MODER,(pin*2+1));break;
 80002c4:	4b87      	ldr	r3, [pc, #540]	; (80004e4 <GPIO_void_setPin_Direction+0x310>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	79ba      	ldrb	r2, [r7, #6]
 80002ca:	0052      	lsls	r2, r2, #1
 80002cc:	2101      	movs	r1, #1
 80002ce:	fa01 f202 	lsl.w	r2, r1, r2
 80002d2:	4611      	mov	r1, r2
 80002d4:	4a83      	ldr	r2, [pc, #524]	; (80004e4 <GPIO_void_setPin_Direction+0x310>)
 80002d6:	430b      	orrs	r3, r1
 80002d8:	6013      	str	r3, [r2, #0]
 80002da:	4b82      	ldr	r3, [pc, #520]	; (80004e4 <GPIO_void_setPin_Direction+0x310>)
 80002dc:	681b      	ldr	r3, [r3, #0]
 80002de:	79ba      	ldrb	r2, [r7, #6]
 80002e0:	0052      	lsls	r2, r2, #1
 80002e2:	3201      	adds	r2, #1
 80002e4:	2101      	movs	r1, #1
 80002e6:	fa01 f202 	lsl.w	r2, r1, r2
 80002ea:	4611      	mov	r1, r2
 80002ec:	4a7d      	ldr	r2, [pc, #500]	; (80004e4 <GPIO_void_setPin_Direction+0x310>)
 80002ee:	430b      	orrs	r3, r1
 80002f0:	6013      	str	r3, [r2, #0]
 80002f2:	bf00      	nop
		}
	break;
 80002f4:	e249      	b.n	800078a <GPIO_void_setPin_Direction+0x5b6>

	case PORT_B:
		switch(Direction)
 80002f6:	797b      	ldrb	r3, [r7, #5]
 80002f8:	2b03      	cmp	r3, #3
 80002fa:	f200 8248 	bhi.w	800078e <GPIO_void_setPin_Direction+0x5ba>
 80002fe:	a201      	add	r2, pc, #4	; (adr r2, 8000304 <GPIO_void_setPin_Direction+0x130>)
 8000300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000304:	08000315 	.word	0x08000315
 8000308:	08000349 	.word	0x08000349
 800030c:	0800037b 	.word	0x0800037b
 8000310:	080003ad 	.word	0x080003ad
		{
		case INPUT_MODE:Clear_bit(GPIOB_MODER,pin*2);Clear_bit(GPIOB_MODER,(pin*2+1));break;
 8000314:	4b74      	ldr	r3, [pc, #464]	; (80004e8 <GPIO_void_setPin_Direction+0x314>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	79ba      	ldrb	r2, [r7, #6]
 800031a:	0052      	lsls	r2, r2, #1
 800031c:	2101      	movs	r1, #1
 800031e:	fa01 f202 	lsl.w	r2, r1, r2
 8000322:	43d2      	mvns	r2, r2
 8000324:	4611      	mov	r1, r2
 8000326:	4a70      	ldr	r2, [pc, #448]	; (80004e8 <GPIO_void_setPin_Direction+0x314>)
 8000328:	400b      	ands	r3, r1
 800032a:	6013      	str	r3, [r2, #0]
 800032c:	4b6e      	ldr	r3, [pc, #440]	; (80004e8 <GPIO_void_setPin_Direction+0x314>)
 800032e:	681b      	ldr	r3, [r3, #0]
 8000330:	79ba      	ldrb	r2, [r7, #6]
 8000332:	0052      	lsls	r2, r2, #1
 8000334:	3201      	adds	r2, #1
 8000336:	2101      	movs	r1, #1
 8000338:	fa01 f202 	lsl.w	r2, r1, r2
 800033c:	43d2      	mvns	r2, r2
 800033e:	4611      	mov	r1, r2
 8000340:	4a69      	ldr	r2, [pc, #420]	; (80004e8 <GPIO_void_setPin_Direction+0x314>)
 8000342:	400b      	ands	r3, r1
 8000344:	6013      	str	r3, [r2, #0]
 8000346:	e049      	b.n	80003dc <GPIO_void_setPin_Direction+0x208>
		case GENERAL_PURPOSE_OUTPUT_MODE:SET_BIT(GPIOB_MODER,pin*2);Clear_bit(GPIOB_MODER,(pin*2+1));
 8000348:	4b67      	ldr	r3, [pc, #412]	; (80004e8 <GPIO_void_setPin_Direction+0x314>)
 800034a:	681b      	ldr	r3, [r3, #0]
 800034c:	79ba      	ldrb	r2, [r7, #6]
 800034e:	0052      	lsls	r2, r2, #1
 8000350:	2101      	movs	r1, #1
 8000352:	fa01 f202 	lsl.w	r2, r1, r2
 8000356:	4611      	mov	r1, r2
 8000358:	4a63      	ldr	r2, [pc, #396]	; (80004e8 <GPIO_void_setPin_Direction+0x314>)
 800035a:	430b      	orrs	r3, r1
 800035c:	6013      	str	r3, [r2, #0]
 800035e:	4b62      	ldr	r3, [pc, #392]	; (80004e8 <GPIO_void_setPin_Direction+0x314>)
 8000360:	681b      	ldr	r3, [r3, #0]
 8000362:	79ba      	ldrb	r2, [r7, #6]
 8000364:	0052      	lsls	r2, r2, #1
 8000366:	3201      	adds	r2, #1
 8000368:	2101      	movs	r1, #1
 800036a:	fa01 f202 	lsl.w	r2, r1, r2
 800036e:	43d2      	mvns	r2, r2
 8000370:	4611      	mov	r1, r2
 8000372:	4a5d      	ldr	r2, [pc, #372]	; (80004e8 <GPIO_void_setPin_Direction+0x314>)
 8000374:	400b      	ands	r3, r1
 8000376:	6013      	str	r3, [r2, #0]
		break;
 8000378:	e030      	b.n	80003dc <GPIO_void_setPin_Direction+0x208>
		case ALTERNATIVE_FUNCTION_MODE:Clear_bit(GPIOB_MODER,pin*2);SET_BIT(GPIOB_MODER,(pin*2+1));break;
 800037a:	4b5b      	ldr	r3, [pc, #364]	; (80004e8 <GPIO_void_setPin_Direction+0x314>)
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	79ba      	ldrb	r2, [r7, #6]
 8000380:	0052      	lsls	r2, r2, #1
 8000382:	2101      	movs	r1, #1
 8000384:	fa01 f202 	lsl.w	r2, r1, r2
 8000388:	43d2      	mvns	r2, r2
 800038a:	4611      	mov	r1, r2
 800038c:	4a56      	ldr	r2, [pc, #344]	; (80004e8 <GPIO_void_setPin_Direction+0x314>)
 800038e:	400b      	ands	r3, r1
 8000390:	6013      	str	r3, [r2, #0]
 8000392:	4b55      	ldr	r3, [pc, #340]	; (80004e8 <GPIO_void_setPin_Direction+0x314>)
 8000394:	681b      	ldr	r3, [r3, #0]
 8000396:	79ba      	ldrb	r2, [r7, #6]
 8000398:	0052      	lsls	r2, r2, #1
 800039a:	3201      	adds	r2, #1
 800039c:	2101      	movs	r1, #1
 800039e:	fa01 f202 	lsl.w	r2, r1, r2
 80003a2:	4611      	mov	r1, r2
 80003a4:	4a50      	ldr	r2, [pc, #320]	; (80004e8 <GPIO_void_setPin_Direction+0x314>)
 80003a6:	430b      	orrs	r3, r1
 80003a8:	6013      	str	r3, [r2, #0]
 80003aa:	e017      	b.n	80003dc <GPIO_void_setPin_Direction+0x208>
		case ANALOG_MODE:SET_BIT(GPIOB_MODER,pin*2);SET_BIT(GPIOB_MODER,(pin*2+1));break;
 80003ac:	4b4e      	ldr	r3, [pc, #312]	; (80004e8 <GPIO_void_setPin_Direction+0x314>)
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	79ba      	ldrb	r2, [r7, #6]
 80003b2:	0052      	lsls	r2, r2, #1
 80003b4:	2101      	movs	r1, #1
 80003b6:	fa01 f202 	lsl.w	r2, r1, r2
 80003ba:	4611      	mov	r1, r2
 80003bc:	4a4a      	ldr	r2, [pc, #296]	; (80004e8 <GPIO_void_setPin_Direction+0x314>)
 80003be:	430b      	orrs	r3, r1
 80003c0:	6013      	str	r3, [r2, #0]
 80003c2:	4b49      	ldr	r3, [pc, #292]	; (80004e8 <GPIO_void_setPin_Direction+0x314>)
 80003c4:	681b      	ldr	r3, [r3, #0]
 80003c6:	79ba      	ldrb	r2, [r7, #6]
 80003c8:	0052      	lsls	r2, r2, #1
 80003ca:	3201      	adds	r2, #1
 80003cc:	2101      	movs	r1, #1
 80003ce:	fa01 f202 	lsl.w	r2, r1, r2
 80003d2:	4611      	mov	r1, r2
 80003d4:	4a44      	ldr	r2, [pc, #272]	; (80004e8 <GPIO_void_setPin_Direction+0x314>)
 80003d6:	430b      	orrs	r3, r1
 80003d8:	6013      	str	r3, [r2, #0]
 80003da:	bf00      	nop
		}
	break;
 80003dc:	e1d7      	b.n	800078e <GPIO_void_setPin_Direction+0x5ba>

	case PORT_C:
		switch(Direction)
 80003de:	797b      	ldrb	r3, [r7, #5]
 80003e0:	2b03      	cmp	r3, #3
 80003e2:	f200 81d6 	bhi.w	8000792 <GPIO_void_setPin_Direction+0x5be>
 80003e6:	a201      	add	r2, pc, #4	; (adr r2, 80003ec <GPIO_void_setPin_Direction+0x218>)
 80003e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003ec:	080003fd 	.word	0x080003fd
 80003f0:	08000431 	.word	0x08000431
 80003f4:	08000463 	.word	0x08000463
 80003f8:	08000495 	.word	0x08000495
		{
		case INPUT_MODE:Clear_bit(GPIOC_MODER,pin*2);Clear_bit(GPIOC_MODER,(pin*2+1));break;
 80003fc:	4b3b      	ldr	r3, [pc, #236]	; (80004ec <GPIO_void_setPin_Direction+0x318>)
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	79ba      	ldrb	r2, [r7, #6]
 8000402:	0052      	lsls	r2, r2, #1
 8000404:	2101      	movs	r1, #1
 8000406:	fa01 f202 	lsl.w	r2, r1, r2
 800040a:	43d2      	mvns	r2, r2
 800040c:	4611      	mov	r1, r2
 800040e:	4a37      	ldr	r2, [pc, #220]	; (80004ec <GPIO_void_setPin_Direction+0x318>)
 8000410:	400b      	ands	r3, r1
 8000412:	6013      	str	r3, [r2, #0]
 8000414:	4b35      	ldr	r3, [pc, #212]	; (80004ec <GPIO_void_setPin_Direction+0x318>)
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	79ba      	ldrb	r2, [r7, #6]
 800041a:	0052      	lsls	r2, r2, #1
 800041c:	3201      	adds	r2, #1
 800041e:	2101      	movs	r1, #1
 8000420:	fa01 f202 	lsl.w	r2, r1, r2
 8000424:	43d2      	mvns	r2, r2
 8000426:	4611      	mov	r1, r2
 8000428:	4a30      	ldr	r2, [pc, #192]	; (80004ec <GPIO_void_setPin_Direction+0x318>)
 800042a:	400b      	ands	r3, r1
 800042c:	6013      	str	r3, [r2, #0]
 800042e:	e049      	b.n	80004c4 <GPIO_void_setPin_Direction+0x2f0>
		case GENERAL_PURPOSE_OUTPUT_MODE:SET_BIT(GPIOC_MODER,pin*2);Clear_bit(GPIOC_MODER,(pin*2+1));
 8000430:	4b2e      	ldr	r3, [pc, #184]	; (80004ec <GPIO_void_setPin_Direction+0x318>)
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	79ba      	ldrb	r2, [r7, #6]
 8000436:	0052      	lsls	r2, r2, #1
 8000438:	2101      	movs	r1, #1
 800043a:	fa01 f202 	lsl.w	r2, r1, r2
 800043e:	4611      	mov	r1, r2
 8000440:	4a2a      	ldr	r2, [pc, #168]	; (80004ec <GPIO_void_setPin_Direction+0x318>)
 8000442:	430b      	orrs	r3, r1
 8000444:	6013      	str	r3, [r2, #0]
 8000446:	4b29      	ldr	r3, [pc, #164]	; (80004ec <GPIO_void_setPin_Direction+0x318>)
 8000448:	681b      	ldr	r3, [r3, #0]
 800044a:	79ba      	ldrb	r2, [r7, #6]
 800044c:	0052      	lsls	r2, r2, #1
 800044e:	3201      	adds	r2, #1
 8000450:	2101      	movs	r1, #1
 8000452:	fa01 f202 	lsl.w	r2, r1, r2
 8000456:	43d2      	mvns	r2, r2
 8000458:	4611      	mov	r1, r2
 800045a:	4a24      	ldr	r2, [pc, #144]	; (80004ec <GPIO_void_setPin_Direction+0x318>)
 800045c:	400b      	ands	r3, r1
 800045e:	6013      	str	r3, [r2, #0]
		break;
 8000460:	e030      	b.n	80004c4 <GPIO_void_setPin_Direction+0x2f0>
		case ALTERNATIVE_FUNCTION_MODE:Clear_bit(GPIOC_MODER,pin*2);SET_BIT(GPIOC_MODER,(pin*2+1));break;
 8000462:	4b22      	ldr	r3, [pc, #136]	; (80004ec <GPIO_void_setPin_Direction+0x318>)
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	79ba      	ldrb	r2, [r7, #6]
 8000468:	0052      	lsls	r2, r2, #1
 800046a:	2101      	movs	r1, #1
 800046c:	fa01 f202 	lsl.w	r2, r1, r2
 8000470:	43d2      	mvns	r2, r2
 8000472:	4611      	mov	r1, r2
 8000474:	4a1d      	ldr	r2, [pc, #116]	; (80004ec <GPIO_void_setPin_Direction+0x318>)
 8000476:	400b      	ands	r3, r1
 8000478:	6013      	str	r3, [r2, #0]
 800047a:	4b1c      	ldr	r3, [pc, #112]	; (80004ec <GPIO_void_setPin_Direction+0x318>)
 800047c:	681b      	ldr	r3, [r3, #0]
 800047e:	79ba      	ldrb	r2, [r7, #6]
 8000480:	0052      	lsls	r2, r2, #1
 8000482:	3201      	adds	r2, #1
 8000484:	2101      	movs	r1, #1
 8000486:	fa01 f202 	lsl.w	r2, r1, r2
 800048a:	4611      	mov	r1, r2
 800048c:	4a17      	ldr	r2, [pc, #92]	; (80004ec <GPIO_void_setPin_Direction+0x318>)
 800048e:	430b      	orrs	r3, r1
 8000490:	6013      	str	r3, [r2, #0]
 8000492:	e017      	b.n	80004c4 <GPIO_void_setPin_Direction+0x2f0>
		case ANALOG_MODE:SET_BIT(GPIOC_MODER,pin*2);SET_BIT(GPIOC_MODER,(pin*2+1));break;
 8000494:	4b15      	ldr	r3, [pc, #84]	; (80004ec <GPIO_void_setPin_Direction+0x318>)
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	79ba      	ldrb	r2, [r7, #6]
 800049a:	0052      	lsls	r2, r2, #1
 800049c:	2101      	movs	r1, #1
 800049e:	fa01 f202 	lsl.w	r2, r1, r2
 80004a2:	4611      	mov	r1, r2
 80004a4:	4a11      	ldr	r2, [pc, #68]	; (80004ec <GPIO_void_setPin_Direction+0x318>)
 80004a6:	430b      	orrs	r3, r1
 80004a8:	6013      	str	r3, [r2, #0]
 80004aa:	4b10      	ldr	r3, [pc, #64]	; (80004ec <GPIO_void_setPin_Direction+0x318>)
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	79ba      	ldrb	r2, [r7, #6]
 80004b0:	0052      	lsls	r2, r2, #1
 80004b2:	3201      	adds	r2, #1
 80004b4:	2101      	movs	r1, #1
 80004b6:	fa01 f202 	lsl.w	r2, r1, r2
 80004ba:	4611      	mov	r1, r2
 80004bc:	4a0b      	ldr	r2, [pc, #44]	; (80004ec <GPIO_void_setPin_Direction+0x318>)
 80004be:	430b      	orrs	r3, r1
 80004c0:	6013      	str	r3, [r2, #0]
 80004c2:	bf00      	nop
		}
	break;
 80004c4:	e165      	b.n	8000792 <GPIO_void_setPin_Direction+0x5be>

	case PORT_D:
		switch(Direction)
 80004c6:	797b      	ldrb	r3, [r7, #5]
 80004c8:	2b03      	cmp	r3, #3
 80004ca:	f200 8164 	bhi.w	8000796 <GPIO_void_setPin_Direction+0x5c2>
 80004ce:	a201      	add	r2, pc, #4	; (adr r2, 80004d4 <GPIO_void_setPin_Direction+0x300>)
 80004d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004d4:	080004f1 	.word	0x080004f1
 80004d8:	08000525 	.word	0x08000525
 80004dc:	08000557 	.word	0x08000557
 80004e0:	08000589 	.word	0x08000589
 80004e4:	40020000 	.word	0x40020000
 80004e8:	40020400 	.word	0x40020400
 80004ec:	40020800 	.word	0x40020800
		{
		case INPUT_MODE:Clear_bit(GPIOD_MODER,pin*2);Clear_bit(GPIOD_MODER,(pin*2+1));break;
 80004f0:	4bae      	ldr	r3, [pc, #696]	; (80007ac <GPIO_void_setPin_Direction+0x5d8>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	79ba      	ldrb	r2, [r7, #6]
 80004f6:	0052      	lsls	r2, r2, #1
 80004f8:	2101      	movs	r1, #1
 80004fa:	fa01 f202 	lsl.w	r2, r1, r2
 80004fe:	43d2      	mvns	r2, r2
 8000500:	4611      	mov	r1, r2
 8000502:	4aaa      	ldr	r2, [pc, #680]	; (80007ac <GPIO_void_setPin_Direction+0x5d8>)
 8000504:	400b      	ands	r3, r1
 8000506:	6013      	str	r3, [r2, #0]
 8000508:	4ba8      	ldr	r3, [pc, #672]	; (80007ac <GPIO_void_setPin_Direction+0x5d8>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	79ba      	ldrb	r2, [r7, #6]
 800050e:	0052      	lsls	r2, r2, #1
 8000510:	3201      	adds	r2, #1
 8000512:	2101      	movs	r1, #1
 8000514:	fa01 f202 	lsl.w	r2, r1, r2
 8000518:	43d2      	mvns	r2, r2
 800051a:	4611      	mov	r1, r2
 800051c:	4aa3      	ldr	r2, [pc, #652]	; (80007ac <GPIO_void_setPin_Direction+0x5d8>)
 800051e:	400b      	ands	r3, r1
 8000520:	6013      	str	r3, [r2, #0]
 8000522:	e049      	b.n	80005b8 <GPIO_void_setPin_Direction+0x3e4>
		case GENERAL_PURPOSE_OUTPUT_MODE:SET_BIT(GPIOD_MODER,pin*2);Clear_bit(GPIOD_MODER,(pin*2+1));
 8000524:	4ba1      	ldr	r3, [pc, #644]	; (80007ac <GPIO_void_setPin_Direction+0x5d8>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	79ba      	ldrb	r2, [r7, #6]
 800052a:	0052      	lsls	r2, r2, #1
 800052c:	2101      	movs	r1, #1
 800052e:	fa01 f202 	lsl.w	r2, r1, r2
 8000532:	4611      	mov	r1, r2
 8000534:	4a9d      	ldr	r2, [pc, #628]	; (80007ac <GPIO_void_setPin_Direction+0x5d8>)
 8000536:	430b      	orrs	r3, r1
 8000538:	6013      	str	r3, [r2, #0]
 800053a:	4b9c      	ldr	r3, [pc, #624]	; (80007ac <GPIO_void_setPin_Direction+0x5d8>)
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	79ba      	ldrb	r2, [r7, #6]
 8000540:	0052      	lsls	r2, r2, #1
 8000542:	3201      	adds	r2, #1
 8000544:	2101      	movs	r1, #1
 8000546:	fa01 f202 	lsl.w	r2, r1, r2
 800054a:	43d2      	mvns	r2, r2
 800054c:	4611      	mov	r1, r2
 800054e:	4a97      	ldr	r2, [pc, #604]	; (80007ac <GPIO_void_setPin_Direction+0x5d8>)
 8000550:	400b      	ands	r3, r1
 8000552:	6013      	str	r3, [r2, #0]
		break;
 8000554:	e030      	b.n	80005b8 <GPIO_void_setPin_Direction+0x3e4>
		case ALTERNATIVE_FUNCTION_MODE:Clear_bit(GPIOD_MODER,pin*2);SET_BIT(GPIOD_MODER,(pin*2+1));break;
 8000556:	4b95      	ldr	r3, [pc, #596]	; (80007ac <GPIO_void_setPin_Direction+0x5d8>)
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	79ba      	ldrb	r2, [r7, #6]
 800055c:	0052      	lsls	r2, r2, #1
 800055e:	2101      	movs	r1, #1
 8000560:	fa01 f202 	lsl.w	r2, r1, r2
 8000564:	43d2      	mvns	r2, r2
 8000566:	4611      	mov	r1, r2
 8000568:	4a90      	ldr	r2, [pc, #576]	; (80007ac <GPIO_void_setPin_Direction+0x5d8>)
 800056a:	400b      	ands	r3, r1
 800056c:	6013      	str	r3, [r2, #0]
 800056e:	4b8f      	ldr	r3, [pc, #572]	; (80007ac <GPIO_void_setPin_Direction+0x5d8>)
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	79ba      	ldrb	r2, [r7, #6]
 8000574:	0052      	lsls	r2, r2, #1
 8000576:	3201      	adds	r2, #1
 8000578:	2101      	movs	r1, #1
 800057a:	fa01 f202 	lsl.w	r2, r1, r2
 800057e:	4611      	mov	r1, r2
 8000580:	4a8a      	ldr	r2, [pc, #552]	; (80007ac <GPIO_void_setPin_Direction+0x5d8>)
 8000582:	430b      	orrs	r3, r1
 8000584:	6013      	str	r3, [r2, #0]
 8000586:	e017      	b.n	80005b8 <GPIO_void_setPin_Direction+0x3e4>
		case ANALOG_MODE:SET_BIT(GPIOD_MODER,pin*2);SET_BIT(GPIOD_MODER,(pin*2+1));break;
 8000588:	4b88      	ldr	r3, [pc, #544]	; (80007ac <GPIO_void_setPin_Direction+0x5d8>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	79ba      	ldrb	r2, [r7, #6]
 800058e:	0052      	lsls	r2, r2, #1
 8000590:	2101      	movs	r1, #1
 8000592:	fa01 f202 	lsl.w	r2, r1, r2
 8000596:	4611      	mov	r1, r2
 8000598:	4a84      	ldr	r2, [pc, #528]	; (80007ac <GPIO_void_setPin_Direction+0x5d8>)
 800059a:	430b      	orrs	r3, r1
 800059c:	6013      	str	r3, [r2, #0]
 800059e:	4b83      	ldr	r3, [pc, #524]	; (80007ac <GPIO_void_setPin_Direction+0x5d8>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	79ba      	ldrb	r2, [r7, #6]
 80005a4:	0052      	lsls	r2, r2, #1
 80005a6:	3201      	adds	r2, #1
 80005a8:	2101      	movs	r1, #1
 80005aa:	fa01 f202 	lsl.w	r2, r1, r2
 80005ae:	4611      	mov	r1, r2
 80005b0:	4a7e      	ldr	r2, [pc, #504]	; (80007ac <GPIO_void_setPin_Direction+0x5d8>)
 80005b2:	430b      	orrs	r3, r1
 80005b4:	6013      	str	r3, [r2, #0]
 80005b6:	bf00      	nop
		}
	break;
 80005b8:	e0ed      	b.n	8000796 <GPIO_void_setPin_Direction+0x5c2>

	case PORT_E:
		switch(Direction)
 80005ba:	797b      	ldrb	r3, [r7, #5]
 80005bc:	2b03      	cmp	r3, #3
 80005be:	f200 80ec 	bhi.w	800079a <GPIO_void_setPin_Direction+0x5c6>
 80005c2:	a201      	add	r2, pc, #4	; (adr r2, 80005c8 <GPIO_void_setPin_Direction+0x3f4>)
 80005c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005c8:	080005d9 	.word	0x080005d9
 80005cc:	0800060d 	.word	0x0800060d
 80005d0:	0800063f 	.word	0x0800063f
 80005d4:	08000671 	.word	0x08000671
		{
		case INPUT_MODE:Clear_bit(GPIOE_MODER,pin*2);Clear_bit(GPIOE_MODER,(pin*2+1));break;
 80005d8:	4b75      	ldr	r3, [pc, #468]	; (80007b0 <GPIO_void_setPin_Direction+0x5dc>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	79ba      	ldrb	r2, [r7, #6]
 80005de:	0052      	lsls	r2, r2, #1
 80005e0:	2101      	movs	r1, #1
 80005e2:	fa01 f202 	lsl.w	r2, r1, r2
 80005e6:	43d2      	mvns	r2, r2
 80005e8:	4611      	mov	r1, r2
 80005ea:	4a71      	ldr	r2, [pc, #452]	; (80007b0 <GPIO_void_setPin_Direction+0x5dc>)
 80005ec:	400b      	ands	r3, r1
 80005ee:	6013      	str	r3, [r2, #0]
 80005f0:	4b6f      	ldr	r3, [pc, #444]	; (80007b0 <GPIO_void_setPin_Direction+0x5dc>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	79ba      	ldrb	r2, [r7, #6]
 80005f6:	0052      	lsls	r2, r2, #1
 80005f8:	3201      	adds	r2, #1
 80005fa:	2101      	movs	r1, #1
 80005fc:	fa01 f202 	lsl.w	r2, r1, r2
 8000600:	43d2      	mvns	r2, r2
 8000602:	4611      	mov	r1, r2
 8000604:	4a6a      	ldr	r2, [pc, #424]	; (80007b0 <GPIO_void_setPin_Direction+0x5dc>)
 8000606:	400b      	ands	r3, r1
 8000608:	6013      	str	r3, [r2, #0]
 800060a:	e049      	b.n	80006a0 <GPIO_void_setPin_Direction+0x4cc>
		case GENERAL_PURPOSE_OUTPUT_MODE:SET_BIT(GPIOE_MODER,pin*2);Clear_bit(GPIOE_MODER,(pin*2+1));
 800060c:	4b68      	ldr	r3, [pc, #416]	; (80007b0 <GPIO_void_setPin_Direction+0x5dc>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	79ba      	ldrb	r2, [r7, #6]
 8000612:	0052      	lsls	r2, r2, #1
 8000614:	2101      	movs	r1, #1
 8000616:	fa01 f202 	lsl.w	r2, r1, r2
 800061a:	4611      	mov	r1, r2
 800061c:	4a64      	ldr	r2, [pc, #400]	; (80007b0 <GPIO_void_setPin_Direction+0x5dc>)
 800061e:	430b      	orrs	r3, r1
 8000620:	6013      	str	r3, [r2, #0]
 8000622:	4b63      	ldr	r3, [pc, #396]	; (80007b0 <GPIO_void_setPin_Direction+0x5dc>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	79ba      	ldrb	r2, [r7, #6]
 8000628:	0052      	lsls	r2, r2, #1
 800062a:	3201      	adds	r2, #1
 800062c:	2101      	movs	r1, #1
 800062e:	fa01 f202 	lsl.w	r2, r1, r2
 8000632:	43d2      	mvns	r2, r2
 8000634:	4611      	mov	r1, r2
 8000636:	4a5e      	ldr	r2, [pc, #376]	; (80007b0 <GPIO_void_setPin_Direction+0x5dc>)
 8000638:	400b      	ands	r3, r1
 800063a:	6013      	str	r3, [r2, #0]
		break;
 800063c:	e030      	b.n	80006a0 <GPIO_void_setPin_Direction+0x4cc>
		case ALTERNATIVE_FUNCTION_MODE:Clear_bit(GPIOE_MODER,pin*2);SET_BIT(GPIOE_MODER,(pin*2+1));break;
 800063e:	4b5c      	ldr	r3, [pc, #368]	; (80007b0 <GPIO_void_setPin_Direction+0x5dc>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	79ba      	ldrb	r2, [r7, #6]
 8000644:	0052      	lsls	r2, r2, #1
 8000646:	2101      	movs	r1, #1
 8000648:	fa01 f202 	lsl.w	r2, r1, r2
 800064c:	43d2      	mvns	r2, r2
 800064e:	4611      	mov	r1, r2
 8000650:	4a57      	ldr	r2, [pc, #348]	; (80007b0 <GPIO_void_setPin_Direction+0x5dc>)
 8000652:	400b      	ands	r3, r1
 8000654:	6013      	str	r3, [r2, #0]
 8000656:	4b56      	ldr	r3, [pc, #344]	; (80007b0 <GPIO_void_setPin_Direction+0x5dc>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	79ba      	ldrb	r2, [r7, #6]
 800065c:	0052      	lsls	r2, r2, #1
 800065e:	3201      	adds	r2, #1
 8000660:	2101      	movs	r1, #1
 8000662:	fa01 f202 	lsl.w	r2, r1, r2
 8000666:	4611      	mov	r1, r2
 8000668:	4a51      	ldr	r2, [pc, #324]	; (80007b0 <GPIO_void_setPin_Direction+0x5dc>)
 800066a:	430b      	orrs	r3, r1
 800066c:	6013      	str	r3, [r2, #0]
 800066e:	e017      	b.n	80006a0 <GPIO_void_setPin_Direction+0x4cc>
		case ANALOG_MODE:SET_BIT(GPIOE_MODER,pin*2);SET_BIT(GPIOE_MODER,(pin*2+1));break;
 8000670:	4b4f      	ldr	r3, [pc, #316]	; (80007b0 <GPIO_void_setPin_Direction+0x5dc>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	79ba      	ldrb	r2, [r7, #6]
 8000676:	0052      	lsls	r2, r2, #1
 8000678:	2101      	movs	r1, #1
 800067a:	fa01 f202 	lsl.w	r2, r1, r2
 800067e:	4611      	mov	r1, r2
 8000680:	4a4b      	ldr	r2, [pc, #300]	; (80007b0 <GPIO_void_setPin_Direction+0x5dc>)
 8000682:	430b      	orrs	r3, r1
 8000684:	6013      	str	r3, [r2, #0]
 8000686:	4b4a      	ldr	r3, [pc, #296]	; (80007b0 <GPIO_void_setPin_Direction+0x5dc>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	79ba      	ldrb	r2, [r7, #6]
 800068c:	0052      	lsls	r2, r2, #1
 800068e:	3201      	adds	r2, #1
 8000690:	2101      	movs	r1, #1
 8000692:	fa01 f202 	lsl.w	r2, r1, r2
 8000696:	4611      	mov	r1, r2
 8000698:	4a45      	ldr	r2, [pc, #276]	; (80007b0 <GPIO_void_setPin_Direction+0x5dc>)
 800069a:	430b      	orrs	r3, r1
 800069c:	6013      	str	r3, [r2, #0]
 800069e:	bf00      	nop
		}
	break;
 80006a0:	e07b      	b.n	800079a <GPIO_void_setPin_Direction+0x5c6>

	case PORT_H:
		switch(Direction)
 80006a2:	797b      	ldrb	r3, [r7, #5]
 80006a4:	2b03      	cmp	r3, #3
 80006a6:	d87a      	bhi.n	800079e <GPIO_void_setPin_Direction+0x5ca>
 80006a8:	a201      	add	r2, pc, #4	; (adr r2, 80006b0 <GPIO_void_setPin_Direction+0x4dc>)
 80006aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006ae:	bf00      	nop
 80006b0:	080006c1 	.word	0x080006c1
 80006b4:	080006f5 	.word	0x080006f5
 80006b8:	08000727 	.word	0x08000727
 80006bc:	08000759 	.word	0x08000759
		{
		case INPUT_MODE:Clear_bit(GPIOH_MODER,pin*2);Clear_bit(GPIOH_MODER,(pin*2+1));break;
 80006c0:	4b3c      	ldr	r3, [pc, #240]	; (80007b4 <GPIO_void_setPin_Direction+0x5e0>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	79ba      	ldrb	r2, [r7, #6]
 80006c6:	0052      	lsls	r2, r2, #1
 80006c8:	2101      	movs	r1, #1
 80006ca:	fa01 f202 	lsl.w	r2, r1, r2
 80006ce:	43d2      	mvns	r2, r2
 80006d0:	4611      	mov	r1, r2
 80006d2:	4a38      	ldr	r2, [pc, #224]	; (80007b4 <GPIO_void_setPin_Direction+0x5e0>)
 80006d4:	400b      	ands	r3, r1
 80006d6:	6013      	str	r3, [r2, #0]
 80006d8:	4b36      	ldr	r3, [pc, #216]	; (80007b4 <GPIO_void_setPin_Direction+0x5e0>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	79ba      	ldrb	r2, [r7, #6]
 80006de:	0052      	lsls	r2, r2, #1
 80006e0:	3201      	adds	r2, #1
 80006e2:	2101      	movs	r1, #1
 80006e4:	fa01 f202 	lsl.w	r2, r1, r2
 80006e8:	43d2      	mvns	r2, r2
 80006ea:	4611      	mov	r1, r2
 80006ec:	4a31      	ldr	r2, [pc, #196]	; (80007b4 <GPIO_void_setPin_Direction+0x5e0>)
 80006ee:	400b      	ands	r3, r1
 80006f0:	6013      	str	r3, [r2, #0]
 80006f2:	e049      	b.n	8000788 <GPIO_void_setPin_Direction+0x5b4>
		case GENERAL_PURPOSE_OUTPUT_MODE:SET_BIT(GPIOH_MODER,pin*2);Clear_bit(GPIOH_MODER,(pin*2+1));
 80006f4:	4b2f      	ldr	r3, [pc, #188]	; (80007b4 <GPIO_void_setPin_Direction+0x5e0>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	79ba      	ldrb	r2, [r7, #6]
 80006fa:	0052      	lsls	r2, r2, #1
 80006fc:	2101      	movs	r1, #1
 80006fe:	fa01 f202 	lsl.w	r2, r1, r2
 8000702:	4611      	mov	r1, r2
 8000704:	4a2b      	ldr	r2, [pc, #172]	; (80007b4 <GPIO_void_setPin_Direction+0x5e0>)
 8000706:	430b      	orrs	r3, r1
 8000708:	6013      	str	r3, [r2, #0]
 800070a:	4b2a      	ldr	r3, [pc, #168]	; (80007b4 <GPIO_void_setPin_Direction+0x5e0>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	79ba      	ldrb	r2, [r7, #6]
 8000710:	0052      	lsls	r2, r2, #1
 8000712:	3201      	adds	r2, #1
 8000714:	2101      	movs	r1, #1
 8000716:	fa01 f202 	lsl.w	r2, r1, r2
 800071a:	43d2      	mvns	r2, r2
 800071c:	4611      	mov	r1, r2
 800071e:	4a25      	ldr	r2, [pc, #148]	; (80007b4 <GPIO_void_setPin_Direction+0x5e0>)
 8000720:	400b      	ands	r3, r1
 8000722:	6013      	str	r3, [r2, #0]
		break;
 8000724:	e030      	b.n	8000788 <GPIO_void_setPin_Direction+0x5b4>
		case ALTERNATIVE_FUNCTION_MODE:Clear_bit(GPIOH_MODER,pin*2);SET_BIT(GPIOH_MODER,(pin*2+1));break;
 8000726:	4b23      	ldr	r3, [pc, #140]	; (80007b4 <GPIO_void_setPin_Direction+0x5e0>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	79ba      	ldrb	r2, [r7, #6]
 800072c:	0052      	lsls	r2, r2, #1
 800072e:	2101      	movs	r1, #1
 8000730:	fa01 f202 	lsl.w	r2, r1, r2
 8000734:	43d2      	mvns	r2, r2
 8000736:	4611      	mov	r1, r2
 8000738:	4a1e      	ldr	r2, [pc, #120]	; (80007b4 <GPIO_void_setPin_Direction+0x5e0>)
 800073a:	400b      	ands	r3, r1
 800073c:	6013      	str	r3, [r2, #0]
 800073e:	4b1d      	ldr	r3, [pc, #116]	; (80007b4 <GPIO_void_setPin_Direction+0x5e0>)
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	79ba      	ldrb	r2, [r7, #6]
 8000744:	0052      	lsls	r2, r2, #1
 8000746:	3201      	adds	r2, #1
 8000748:	2101      	movs	r1, #1
 800074a:	fa01 f202 	lsl.w	r2, r1, r2
 800074e:	4611      	mov	r1, r2
 8000750:	4a18      	ldr	r2, [pc, #96]	; (80007b4 <GPIO_void_setPin_Direction+0x5e0>)
 8000752:	430b      	orrs	r3, r1
 8000754:	6013      	str	r3, [r2, #0]
 8000756:	e017      	b.n	8000788 <GPIO_void_setPin_Direction+0x5b4>
		case ANALOG_MODE:SET_BIT(GPIOH_MODER,pin*2);SET_BIT(GPIOH_MODER,(pin*2+1));break;
 8000758:	4b16      	ldr	r3, [pc, #88]	; (80007b4 <GPIO_void_setPin_Direction+0x5e0>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	79ba      	ldrb	r2, [r7, #6]
 800075e:	0052      	lsls	r2, r2, #1
 8000760:	2101      	movs	r1, #1
 8000762:	fa01 f202 	lsl.w	r2, r1, r2
 8000766:	4611      	mov	r1, r2
 8000768:	4a12      	ldr	r2, [pc, #72]	; (80007b4 <GPIO_void_setPin_Direction+0x5e0>)
 800076a:	430b      	orrs	r3, r1
 800076c:	6013      	str	r3, [r2, #0]
 800076e:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <GPIO_void_setPin_Direction+0x5e0>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	79ba      	ldrb	r2, [r7, #6]
 8000774:	0052      	lsls	r2, r2, #1
 8000776:	3201      	adds	r2, #1
 8000778:	2101      	movs	r1, #1
 800077a:	fa01 f202 	lsl.w	r2, r1, r2
 800077e:	4611      	mov	r1, r2
 8000780:	4a0c      	ldr	r2, [pc, #48]	; (80007b4 <GPIO_void_setPin_Direction+0x5e0>)
 8000782:	430b      	orrs	r3, r1
 8000784:	6013      	str	r3, [r2, #0]
 8000786:	bf00      	nop
		}
	break;
 8000788:	e009      	b.n	800079e <GPIO_void_setPin_Direction+0x5ca>
	break;
 800078a:	bf00      	nop
 800078c:	e008      	b.n	80007a0 <GPIO_void_setPin_Direction+0x5cc>
	break;
 800078e:	bf00      	nop
 8000790:	e006      	b.n	80007a0 <GPIO_void_setPin_Direction+0x5cc>
	break;
 8000792:	bf00      	nop
 8000794:	e004      	b.n	80007a0 <GPIO_void_setPin_Direction+0x5cc>
	break;
 8000796:	bf00      	nop
 8000798:	e002      	b.n	80007a0 <GPIO_void_setPin_Direction+0x5cc>
	break;
 800079a:	bf00      	nop
 800079c:	e000      	b.n	80007a0 <GPIO_void_setPin_Direction+0x5cc>
	break;
 800079e:	bf00      	nop

	}
}
 80007a0:	bf00      	nop
 80007a2:	370c      	adds	r7, #12
 80007a4:	46bd      	mov	sp, r7
 80007a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007aa:	4770      	bx	lr
 80007ac:	40020c00 	.word	0x40020c00
 80007b0:	40021000 	.word	0x40021000
 80007b4:	40021c00 	.word	0x40021c00

080007b8 <GPIO_void_setPin_Output_Type>:
//////////////////////////////////////////////////////////////////////////////////////////////


void GPIO_void_setPin_Output_Type(PORT_ID port , PIN_ID pin , OUTPUT_TYPE output_type)
{
 80007b8:	b480      	push	{r7}
 80007ba:	b083      	sub	sp, #12
 80007bc:	af00      	add	r7, sp, #0
 80007be:	4603      	mov	r3, r0
 80007c0:	71fb      	strb	r3, [r7, #7]
 80007c2:	460b      	mov	r3, r1
 80007c4:	71bb      	strb	r3, [r7, #6]
 80007c6:	4613      	mov	r3, r2
 80007c8:	717b      	strb	r3, [r7, #5]
	switch(port)
 80007ca:	79fb      	ldrb	r3, [r7, #7]
 80007cc:	2b05      	cmp	r3, #5
 80007ce:	f200 80c3 	bhi.w	8000958 <GPIO_void_setPin_Output_Type+0x1a0>
 80007d2:	a201      	add	r2, pc, #4	; (adr r2, 80007d8 <GPIO_void_setPin_Output_Type+0x20>)
 80007d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007d8:	080007f1 	.word	0x080007f1
 80007dc:	0800082d 	.word	0x0800082d
 80007e0:	08000869 	.word	0x08000869
 80007e4:	080008a5 	.word	0x080008a5
 80007e8:	080008e1 	.word	0x080008e1
 80007ec:	0800091d 	.word	0x0800091d
	{
	case PORT_A:
		switch(output_type)
 80007f0:	797b      	ldrb	r3, [r7, #5]
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d002      	beq.n	80007fc <GPIO_void_setPin_Output_Type+0x44>
 80007f6:	2b01      	cmp	r3, #1
 80007f8:	d00c      	beq.n	8000814 <GPIO_void_setPin_Output_Type+0x5c>
		{
		case OUTPUT_PUSH_PULL: Clear_bit(GPIOA_OTYPER,pin);break;
		case OUTPUT_OPEN_DRAIN:SET_BIT(GPIOA_OTYPER,pin);break;
		}
	break;
 80007fa:	e0ad      	b.n	8000958 <GPIO_void_setPin_Output_Type+0x1a0>
		case OUTPUT_PUSH_PULL: Clear_bit(GPIOA_OTYPER,pin);break;
 80007fc:	4b59      	ldr	r3, [pc, #356]	; (8000964 <GPIO_void_setPin_Output_Type+0x1ac>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	79ba      	ldrb	r2, [r7, #6]
 8000802:	2101      	movs	r1, #1
 8000804:	fa01 f202 	lsl.w	r2, r1, r2
 8000808:	43d2      	mvns	r2, r2
 800080a:	4611      	mov	r1, r2
 800080c:	4a55      	ldr	r2, [pc, #340]	; (8000964 <GPIO_void_setPin_Output_Type+0x1ac>)
 800080e:	400b      	ands	r3, r1
 8000810:	6013      	str	r3, [r2, #0]
 8000812:	e00a      	b.n	800082a <GPIO_void_setPin_Output_Type+0x72>
		case OUTPUT_OPEN_DRAIN:SET_BIT(GPIOA_OTYPER,pin);break;
 8000814:	4b53      	ldr	r3, [pc, #332]	; (8000964 <GPIO_void_setPin_Output_Type+0x1ac>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	79ba      	ldrb	r2, [r7, #6]
 800081a:	2101      	movs	r1, #1
 800081c:	fa01 f202 	lsl.w	r2, r1, r2
 8000820:	4611      	mov	r1, r2
 8000822:	4a50      	ldr	r2, [pc, #320]	; (8000964 <GPIO_void_setPin_Output_Type+0x1ac>)
 8000824:	430b      	orrs	r3, r1
 8000826:	6013      	str	r3, [r2, #0]
 8000828:	bf00      	nop
	break;
 800082a:	e095      	b.n	8000958 <GPIO_void_setPin_Output_Type+0x1a0>

	case PORT_B:
		switch(output_type)
 800082c:	797b      	ldrb	r3, [r7, #5]
 800082e:	2b00      	cmp	r3, #0
 8000830:	d002      	beq.n	8000838 <GPIO_void_setPin_Output_Type+0x80>
 8000832:	2b01      	cmp	r3, #1
 8000834:	d00c      	beq.n	8000850 <GPIO_void_setPin_Output_Type+0x98>
		{
		case OUTPUT_PUSH_PULL: Clear_bit(GPIOB_OTYPER,pin);break;
		case OUTPUT_OPEN_DRAIN:SET_BIT(GPIOB_OTYPER,pin);break;
		}
	break;
 8000836:	e08f      	b.n	8000958 <GPIO_void_setPin_Output_Type+0x1a0>
		case OUTPUT_PUSH_PULL: Clear_bit(GPIOB_OTYPER,pin);break;
 8000838:	4b4b      	ldr	r3, [pc, #300]	; (8000968 <GPIO_void_setPin_Output_Type+0x1b0>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	79ba      	ldrb	r2, [r7, #6]
 800083e:	2101      	movs	r1, #1
 8000840:	fa01 f202 	lsl.w	r2, r1, r2
 8000844:	43d2      	mvns	r2, r2
 8000846:	4611      	mov	r1, r2
 8000848:	4a47      	ldr	r2, [pc, #284]	; (8000968 <GPIO_void_setPin_Output_Type+0x1b0>)
 800084a:	400b      	ands	r3, r1
 800084c:	6013      	str	r3, [r2, #0]
 800084e:	e00a      	b.n	8000866 <GPIO_void_setPin_Output_Type+0xae>
		case OUTPUT_OPEN_DRAIN:SET_BIT(GPIOB_OTYPER,pin);break;
 8000850:	4b45      	ldr	r3, [pc, #276]	; (8000968 <GPIO_void_setPin_Output_Type+0x1b0>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	79ba      	ldrb	r2, [r7, #6]
 8000856:	2101      	movs	r1, #1
 8000858:	fa01 f202 	lsl.w	r2, r1, r2
 800085c:	4611      	mov	r1, r2
 800085e:	4a42      	ldr	r2, [pc, #264]	; (8000968 <GPIO_void_setPin_Output_Type+0x1b0>)
 8000860:	430b      	orrs	r3, r1
 8000862:	6013      	str	r3, [r2, #0]
 8000864:	bf00      	nop
	break;
 8000866:	e077      	b.n	8000958 <GPIO_void_setPin_Output_Type+0x1a0>

	case PORT_C:
		switch(output_type)
 8000868:	797b      	ldrb	r3, [r7, #5]
 800086a:	2b00      	cmp	r3, #0
 800086c:	d002      	beq.n	8000874 <GPIO_void_setPin_Output_Type+0xbc>
 800086e:	2b01      	cmp	r3, #1
 8000870:	d00c      	beq.n	800088c <GPIO_void_setPin_Output_Type+0xd4>
		{
		case OUTPUT_PUSH_PULL: Clear_bit(GPIOC_OTYPER,pin);break;
		case OUTPUT_OPEN_DRAIN:SET_BIT(GPIOC_OTYPER,pin);break;
		}
	break;
 8000872:	e071      	b.n	8000958 <GPIO_void_setPin_Output_Type+0x1a0>
		case OUTPUT_PUSH_PULL: Clear_bit(GPIOC_OTYPER,pin);break;
 8000874:	4b3d      	ldr	r3, [pc, #244]	; (800096c <GPIO_void_setPin_Output_Type+0x1b4>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	79ba      	ldrb	r2, [r7, #6]
 800087a:	2101      	movs	r1, #1
 800087c:	fa01 f202 	lsl.w	r2, r1, r2
 8000880:	43d2      	mvns	r2, r2
 8000882:	4611      	mov	r1, r2
 8000884:	4a39      	ldr	r2, [pc, #228]	; (800096c <GPIO_void_setPin_Output_Type+0x1b4>)
 8000886:	400b      	ands	r3, r1
 8000888:	6013      	str	r3, [r2, #0]
 800088a:	e00a      	b.n	80008a2 <GPIO_void_setPin_Output_Type+0xea>
		case OUTPUT_OPEN_DRAIN:SET_BIT(GPIOC_OTYPER,pin);break;
 800088c:	4b37      	ldr	r3, [pc, #220]	; (800096c <GPIO_void_setPin_Output_Type+0x1b4>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	79ba      	ldrb	r2, [r7, #6]
 8000892:	2101      	movs	r1, #1
 8000894:	fa01 f202 	lsl.w	r2, r1, r2
 8000898:	4611      	mov	r1, r2
 800089a:	4a34      	ldr	r2, [pc, #208]	; (800096c <GPIO_void_setPin_Output_Type+0x1b4>)
 800089c:	430b      	orrs	r3, r1
 800089e:	6013      	str	r3, [r2, #0]
 80008a0:	bf00      	nop
	break;
 80008a2:	e059      	b.n	8000958 <GPIO_void_setPin_Output_Type+0x1a0>

	case PORT_D:
		switch(output_type)
 80008a4:	797b      	ldrb	r3, [r7, #5]
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d002      	beq.n	80008b0 <GPIO_void_setPin_Output_Type+0xf8>
 80008aa:	2b01      	cmp	r3, #1
 80008ac:	d00c      	beq.n	80008c8 <GPIO_void_setPin_Output_Type+0x110>
		{
		case OUTPUT_PUSH_PULL: Clear_bit(GPIOD_OTYPER,pin);break;
		case OUTPUT_OPEN_DRAIN:SET_BIT(GPIOD_OTYPER,pin);break;
		}
	break;
 80008ae:	e053      	b.n	8000958 <GPIO_void_setPin_Output_Type+0x1a0>
		case OUTPUT_PUSH_PULL: Clear_bit(GPIOD_OTYPER,pin);break;
 80008b0:	4b2f      	ldr	r3, [pc, #188]	; (8000970 <GPIO_void_setPin_Output_Type+0x1b8>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	79ba      	ldrb	r2, [r7, #6]
 80008b6:	2101      	movs	r1, #1
 80008b8:	fa01 f202 	lsl.w	r2, r1, r2
 80008bc:	43d2      	mvns	r2, r2
 80008be:	4611      	mov	r1, r2
 80008c0:	4a2b      	ldr	r2, [pc, #172]	; (8000970 <GPIO_void_setPin_Output_Type+0x1b8>)
 80008c2:	400b      	ands	r3, r1
 80008c4:	6013      	str	r3, [r2, #0]
 80008c6:	e00a      	b.n	80008de <GPIO_void_setPin_Output_Type+0x126>
		case OUTPUT_OPEN_DRAIN:SET_BIT(GPIOD_OTYPER,pin);break;
 80008c8:	4b29      	ldr	r3, [pc, #164]	; (8000970 <GPIO_void_setPin_Output_Type+0x1b8>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	79ba      	ldrb	r2, [r7, #6]
 80008ce:	2101      	movs	r1, #1
 80008d0:	fa01 f202 	lsl.w	r2, r1, r2
 80008d4:	4611      	mov	r1, r2
 80008d6:	4a26      	ldr	r2, [pc, #152]	; (8000970 <GPIO_void_setPin_Output_Type+0x1b8>)
 80008d8:	430b      	orrs	r3, r1
 80008da:	6013      	str	r3, [r2, #0]
 80008dc:	bf00      	nop
	break;
 80008de:	e03b      	b.n	8000958 <GPIO_void_setPin_Output_Type+0x1a0>

	case PORT_E:
		switch(output_type)
 80008e0:	797b      	ldrb	r3, [r7, #5]
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d002      	beq.n	80008ec <GPIO_void_setPin_Output_Type+0x134>
 80008e6:	2b01      	cmp	r3, #1
 80008e8:	d00c      	beq.n	8000904 <GPIO_void_setPin_Output_Type+0x14c>
		{
		case OUTPUT_PUSH_PULL: Clear_bit(GPIOE_OTYPER,pin);break;
		case OUTPUT_OPEN_DRAIN:SET_BIT(GPIOE_OTYPER,pin);break;
		}
	break;
 80008ea:	e035      	b.n	8000958 <GPIO_void_setPin_Output_Type+0x1a0>
		case OUTPUT_PUSH_PULL: Clear_bit(GPIOE_OTYPER,pin);break;
 80008ec:	4b21      	ldr	r3, [pc, #132]	; (8000974 <GPIO_void_setPin_Output_Type+0x1bc>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	79ba      	ldrb	r2, [r7, #6]
 80008f2:	2101      	movs	r1, #1
 80008f4:	fa01 f202 	lsl.w	r2, r1, r2
 80008f8:	43d2      	mvns	r2, r2
 80008fa:	4611      	mov	r1, r2
 80008fc:	4a1d      	ldr	r2, [pc, #116]	; (8000974 <GPIO_void_setPin_Output_Type+0x1bc>)
 80008fe:	400b      	ands	r3, r1
 8000900:	6013      	str	r3, [r2, #0]
 8000902:	e00a      	b.n	800091a <GPIO_void_setPin_Output_Type+0x162>
		case OUTPUT_OPEN_DRAIN:SET_BIT(GPIOE_OTYPER,pin);break;
 8000904:	4b1b      	ldr	r3, [pc, #108]	; (8000974 <GPIO_void_setPin_Output_Type+0x1bc>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	79ba      	ldrb	r2, [r7, #6]
 800090a:	2101      	movs	r1, #1
 800090c:	fa01 f202 	lsl.w	r2, r1, r2
 8000910:	4611      	mov	r1, r2
 8000912:	4a18      	ldr	r2, [pc, #96]	; (8000974 <GPIO_void_setPin_Output_Type+0x1bc>)
 8000914:	430b      	orrs	r3, r1
 8000916:	6013      	str	r3, [r2, #0]
 8000918:	bf00      	nop
	break;
 800091a:	e01d      	b.n	8000958 <GPIO_void_setPin_Output_Type+0x1a0>

	case PORT_H:
		switch(output_type)
 800091c:	797b      	ldrb	r3, [r7, #5]
 800091e:	2b00      	cmp	r3, #0
 8000920:	d002      	beq.n	8000928 <GPIO_void_setPin_Output_Type+0x170>
 8000922:	2b01      	cmp	r3, #1
 8000924:	d00c      	beq.n	8000940 <GPIO_void_setPin_Output_Type+0x188>
		{
		case OUTPUT_PUSH_PULL: Clear_bit(GPIOH_OTYPER,pin);break;
		case OUTPUT_OPEN_DRAIN:SET_BIT(GPIOH_OTYPER,pin);break;
		}
	break;
 8000926:	e016      	b.n	8000956 <GPIO_void_setPin_Output_Type+0x19e>
		case OUTPUT_PUSH_PULL: Clear_bit(GPIOH_OTYPER,pin);break;
 8000928:	4b13      	ldr	r3, [pc, #76]	; (8000978 <GPIO_void_setPin_Output_Type+0x1c0>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	79ba      	ldrb	r2, [r7, #6]
 800092e:	2101      	movs	r1, #1
 8000930:	fa01 f202 	lsl.w	r2, r1, r2
 8000934:	43d2      	mvns	r2, r2
 8000936:	4611      	mov	r1, r2
 8000938:	4a0f      	ldr	r2, [pc, #60]	; (8000978 <GPIO_void_setPin_Output_Type+0x1c0>)
 800093a:	400b      	ands	r3, r1
 800093c:	6013      	str	r3, [r2, #0]
 800093e:	e00a      	b.n	8000956 <GPIO_void_setPin_Output_Type+0x19e>
		case OUTPUT_OPEN_DRAIN:SET_BIT(GPIOH_OTYPER,pin);break;
 8000940:	4b0d      	ldr	r3, [pc, #52]	; (8000978 <GPIO_void_setPin_Output_Type+0x1c0>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	79ba      	ldrb	r2, [r7, #6]
 8000946:	2101      	movs	r1, #1
 8000948:	fa01 f202 	lsl.w	r2, r1, r2
 800094c:	4611      	mov	r1, r2
 800094e:	4a0a      	ldr	r2, [pc, #40]	; (8000978 <GPIO_void_setPin_Output_Type+0x1c0>)
 8000950:	430b      	orrs	r3, r1
 8000952:	6013      	str	r3, [r2, #0]
 8000954:	bf00      	nop
	break;
 8000956:	bf00      	nop
	}
}
 8000958:	bf00      	nop
 800095a:	370c      	adds	r7, #12
 800095c:	46bd      	mov	sp, r7
 800095e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000962:	4770      	bx	lr
 8000964:	40020004 	.word	0x40020004
 8000968:	40020404 	.word	0x40020404
 800096c:	40020804 	.word	0x40020804
 8000970:	40020c04 	.word	0x40020c04
 8000974:	40021004 	.word	0x40021004
 8000978:	40021c04 	.word	0x40021c04

0800097c <GPIO_voidSetAltFunction>:
	}
}


void GPIO_voidSetAltFunction(u8 Copy_u8PortID,u8 Copy_u8PinID ,u32 Copy_u8AltValue)
{
 800097c:	b480      	push	{r7}
 800097e:	b083      	sub	sp, #12
 8000980:	af00      	add	r7, sp, #0
 8000982:	4603      	mov	r3, r0
 8000984:	603a      	str	r2, [r7, #0]
 8000986:	71fb      	strb	r3, [r7, #7]
 8000988:	460b      	mov	r3, r1
 800098a:	71bb      	strb	r3, [r7, #6]
	switch(Copy_u8PortID)
 800098c:	79fb      	ldrb	r3, [r7, #7]
 800098e:	2b05      	cmp	r3, #5
 8000990:	f200 80b2 	bhi.w	8000af8 <GPIO_voidSetAltFunction+0x17c>
 8000994:	a201      	add	r2, pc, #4	; (adr r2, 800099c <GPIO_voidSetAltFunction+0x20>)
 8000996:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800099a:	bf00      	nop
 800099c:	080009b5 	.word	0x080009b5
 80009a0:	080009eb 	.word	0x080009eb
 80009a4:	08000a21 	.word	0x08000a21
 80009a8:	08000a57 	.word	0x08000a57
 80009ac:	08000a8d 	.word	0x08000a8d
 80009b0:	08000ac3 	.word	0x08000ac3
	{
		case PORT_A:
			if(Copy_u8PinID < PIN8)
 80009b4:	79bb      	ldrb	r3, [r7, #6]
 80009b6:	2b07      	cmp	r3, #7
 80009b8:	d80a      	bhi.n	80009d0 <GPIO_voidSetAltFunction+0x54>
			{
				GPIOA_AFRL |= ( Copy_u8AltValue << (Copy_u8PinID*4) );
 80009ba:	4b53      	ldr	r3, [pc, #332]	; (8000b08 <GPIO_voidSetAltFunction+0x18c>)
 80009bc:	681a      	ldr	r2, [r3, #0]
 80009be:	79bb      	ldrb	r3, [r7, #6]
 80009c0:	009b      	lsls	r3, r3, #2
 80009c2:	6839      	ldr	r1, [r7, #0]
 80009c4:	fa01 f303 	lsl.w	r3, r1, r3
 80009c8:	494f      	ldr	r1, [pc, #316]	; (8000b08 <GPIO_voidSetAltFunction+0x18c>)
 80009ca:	4313      	orrs	r3, r2
 80009cc:	600b      	str	r3, [r1, #0]
			}
			else
			{
				GPIOA_AFRH |= ( Copy_u8AltValue << ( (Copy_u8PinID%8) * 4 ) );
			}break;
 80009ce:	e094      	b.n	8000afa <GPIO_voidSetAltFunction+0x17e>
				GPIOA_AFRH |= ( Copy_u8AltValue << ( (Copy_u8PinID%8) * 4 ) );
 80009d0:	4b4e      	ldr	r3, [pc, #312]	; (8000b0c <GPIO_voidSetAltFunction+0x190>)
 80009d2:	681a      	ldr	r2, [r3, #0]
 80009d4:	79bb      	ldrb	r3, [r7, #6]
 80009d6:	f003 0307 	and.w	r3, r3, #7
 80009da:	009b      	lsls	r3, r3, #2
 80009dc:	6839      	ldr	r1, [r7, #0]
 80009de:	fa01 f303 	lsl.w	r3, r1, r3
 80009e2:	494a      	ldr	r1, [pc, #296]	; (8000b0c <GPIO_voidSetAltFunction+0x190>)
 80009e4:	4313      	orrs	r3, r2
 80009e6:	600b      	str	r3, [r1, #0]
			}break;
 80009e8:	e087      	b.n	8000afa <GPIO_voidSetAltFunction+0x17e>

		case PORT_B:
			if(Copy_u8PinID < PIN8)
 80009ea:	79bb      	ldrb	r3, [r7, #6]
 80009ec:	2b07      	cmp	r3, #7
 80009ee:	d80a      	bhi.n	8000a06 <GPIO_voidSetAltFunction+0x8a>
			{
				GPIOB_AFRL |= ( Copy_u8AltValue << (Copy_u8PinID*4) );
 80009f0:	4b47      	ldr	r3, [pc, #284]	; (8000b10 <GPIO_voidSetAltFunction+0x194>)
 80009f2:	681a      	ldr	r2, [r3, #0]
 80009f4:	79bb      	ldrb	r3, [r7, #6]
 80009f6:	009b      	lsls	r3, r3, #2
 80009f8:	6839      	ldr	r1, [r7, #0]
 80009fa:	fa01 f303 	lsl.w	r3, r1, r3
 80009fe:	4944      	ldr	r1, [pc, #272]	; (8000b10 <GPIO_voidSetAltFunction+0x194>)
 8000a00:	4313      	orrs	r3, r2
 8000a02:	600b      	str	r3, [r1, #0]
			}
			else
			{
				GPIOB_AFRH |= ( Copy_u8AltValue << ( (Copy_u8PinID%8) * 4 ) );
			}break;
 8000a04:	e079      	b.n	8000afa <GPIO_voidSetAltFunction+0x17e>
				GPIOB_AFRH |= ( Copy_u8AltValue << ( (Copy_u8PinID%8) * 4 ) );
 8000a06:	4b43      	ldr	r3, [pc, #268]	; (8000b14 <GPIO_voidSetAltFunction+0x198>)
 8000a08:	681a      	ldr	r2, [r3, #0]
 8000a0a:	79bb      	ldrb	r3, [r7, #6]
 8000a0c:	f003 0307 	and.w	r3, r3, #7
 8000a10:	009b      	lsls	r3, r3, #2
 8000a12:	6839      	ldr	r1, [r7, #0]
 8000a14:	fa01 f303 	lsl.w	r3, r1, r3
 8000a18:	493e      	ldr	r1, [pc, #248]	; (8000b14 <GPIO_voidSetAltFunction+0x198>)
 8000a1a:	4313      	orrs	r3, r2
 8000a1c:	600b      	str	r3, [r1, #0]
			}break;
 8000a1e:	e06c      	b.n	8000afa <GPIO_voidSetAltFunction+0x17e>

		case PORT_C:
			if(Copy_u8PinID < PIN8)
 8000a20:	79bb      	ldrb	r3, [r7, #6]
 8000a22:	2b07      	cmp	r3, #7
 8000a24:	d80a      	bhi.n	8000a3c <GPIO_voidSetAltFunction+0xc0>
			{
				GPIOC_AFRL |= ( Copy_u8AltValue << (Copy_u8PinID*4) );
 8000a26:	4b3c      	ldr	r3, [pc, #240]	; (8000b18 <GPIO_voidSetAltFunction+0x19c>)
 8000a28:	681a      	ldr	r2, [r3, #0]
 8000a2a:	79bb      	ldrb	r3, [r7, #6]
 8000a2c:	009b      	lsls	r3, r3, #2
 8000a2e:	6839      	ldr	r1, [r7, #0]
 8000a30:	fa01 f303 	lsl.w	r3, r1, r3
 8000a34:	4938      	ldr	r1, [pc, #224]	; (8000b18 <GPIO_voidSetAltFunction+0x19c>)
 8000a36:	4313      	orrs	r3, r2
 8000a38:	600b      	str	r3, [r1, #0]
			}
			else
			{
				GPIOC_AFRH |= ( Copy_u8AltValue << ( (Copy_u8PinID%8) * 4 ) );
			}break;
 8000a3a:	e05e      	b.n	8000afa <GPIO_voidSetAltFunction+0x17e>
				GPIOC_AFRH |= ( Copy_u8AltValue << ( (Copy_u8PinID%8) * 4 ) );
 8000a3c:	4b37      	ldr	r3, [pc, #220]	; (8000b1c <GPIO_voidSetAltFunction+0x1a0>)
 8000a3e:	681a      	ldr	r2, [r3, #0]
 8000a40:	79bb      	ldrb	r3, [r7, #6]
 8000a42:	f003 0307 	and.w	r3, r3, #7
 8000a46:	009b      	lsls	r3, r3, #2
 8000a48:	6839      	ldr	r1, [r7, #0]
 8000a4a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a4e:	4933      	ldr	r1, [pc, #204]	; (8000b1c <GPIO_voidSetAltFunction+0x1a0>)
 8000a50:	4313      	orrs	r3, r2
 8000a52:	600b      	str	r3, [r1, #0]
			}break;
 8000a54:	e051      	b.n	8000afa <GPIO_voidSetAltFunction+0x17e>

		case PORT_D:
			if(Copy_u8PinID < PIN8)
 8000a56:	79bb      	ldrb	r3, [r7, #6]
 8000a58:	2b07      	cmp	r3, #7
 8000a5a:	d80a      	bhi.n	8000a72 <GPIO_voidSetAltFunction+0xf6>
			{
				GPIOD_AFRL |= ( Copy_u8AltValue << (Copy_u8PinID*4) );
 8000a5c:	4b30      	ldr	r3, [pc, #192]	; (8000b20 <GPIO_voidSetAltFunction+0x1a4>)
 8000a5e:	681a      	ldr	r2, [r3, #0]
 8000a60:	79bb      	ldrb	r3, [r7, #6]
 8000a62:	009b      	lsls	r3, r3, #2
 8000a64:	6839      	ldr	r1, [r7, #0]
 8000a66:	fa01 f303 	lsl.w	r3, r1, r3
 8000a6a:	492d      	ldr	r1, [pc, #180]	; (8000b20 <GPIO_voidSetAltFunction+0x1a4>)
 8000a6c:	4313      	orrs	r3, r2
 8000a6e:	600b      	str	r3, [r1, #0]
			}
			else
			{
				GPIOD_AFRH |= ( Copy_u8AltValue << ( (Copy_u8PinID%8) * 4 ) );
			}break;
 8000a70:	e043      	b.n	8000afa <GPIO_voidSetAltFunction+0x17e>
				GPIOD_AFRH |= ( Copy_u8AltValue << ( (Copy_u8PinID%8) * 4 ) );
 8000a72:	4b2c      	ldr	r3, [pc, #176]	; (8000b24 <GPIO_voidSetAltFunction+0x1a8>)
 8000a74:	681a      	ldr	r2, [r3, #0]
 8000a76:	79bb      	ldrb	r3, [r7, #6]
 8000a78:	f003 0307 	and.w	r3, r3, #7
 8000a7c:	009b      	lsls	r3, r3, #2
 8000a7e:	6839      	ldr	r1, [r7, #0]
 8000a80:	fa01 f303 	lsl.w	r3, r1, r3
 8000a84:	4927      	ldr	r1, [pc, #156]	; (8000b24 <GPIO_voidSetAltFunction+0x1a8>)
 8000a86:	4313      	orrs	r3, r2
 8000a88:	600b      	str	r3, [r1, #0]
			}break;
 8000a8a:	e036      	b.n	8000afa <GPIO_voidSetAltFunction+0x17e>

		case PORT_E:
			if(Copy_u8PinID < PIN8)
 8000a8c:	79bb      	ldrb	r3, [r7, #6]
 8000a8e:	2b07      	cmp	r3, #7
 8000a90:	d80a      	bhi.n	8000aa8 <GPIO_voidSetAltFunction+0x12c>
			{
				GPIOE_AFRL |= ( Copy_u8AltValue << (Copy_u8PinID*4) );
 8000a92:	4b25      	ldr	r3, [pc, #148]	; (8000b28 <GPIO_voidSetAltFunction+0x1ac>)
 8000a94:	681a      	ldr	r2, [r3, #0]
 8000a96:	79bb      	ldrb	r3, [r7, #6]
 8000a98:	009b      	lsls	r3, r3, #2
 8000a9a:	6839      	ldr	r1, [r7, #0]
 8000a9c:	fa01 f303 	lsl.w	r3, r1, r3
 8000aa0:	4921      	ldr	r1, [pc, #132]	; (8000b28 <GPIO_voidSetAltFunction+0x1ac>)
 8000aa2:	4313      	orrs	r3, r2
 8000aa4:	600b      	str	r3, [r1, #0]
			}
			else
			{
				GPIOE_AFRH |= ( Copy_u8AltValue << ( (Copy_u8PinID%8) * 4 ) );
			}break;
 8000aa6:	e028      	b.n	8000afa <GPIO_voidSetAltFunction+0x17e>
				GPIOE_AFRH |= ( Copy_u8AltValue << ( (Copy_u8PinID%8) * 4 ) );
 8000aa8:	4b20      	ldr	r3, [pc, #128]	; (8000b2c <GPIO_voidSetAltFunction+0x1b0>)
 8000aaa:	681a      	ldr	r2, [r3, #0]
 8000aac:	79bb      	ldrb	r3, [r7, #6]
 8000aae:	f003 0307 	and.w	r3, r3, #7
 8000ab2:	009b      	lsls	r3, r3, #2
 8000ab4:	6839      	ldr	r1, [r7, #0]
 8000ab6:	fa01 f303 	lsl.w	r3, r1, r3
 8000aba:	491c      	ldr	r1, [pc, #112]	; (8000b2c <GPIO_voidSetAltFunction+0x1b0>)
 8000abc:	4313      	orrs	r3, r2
 8000abe:	600b      	str	r3, [r1, #0]
			}break;
 8000ac0:	e01b      	b.n	8000afa <GPIO_voidSetAltFunction+0x17e>

		case PORT_H:
			if(Copy_u8PinID < PIN8)
 8000ac2:	79bb      	ldrb	r3, [r7, #6]
 8000ac4:	2b07      	cmp	r3, #7
 8000ac6:	d80a      	bhi.n	8000ade <GPIO_voidSetAltFunction+0x162>
			{
				GPIOH_AFRL |= ( Copy_u8AltValue << (Copy_u8PinID*4) );
 8000ac8:	4b19      	ldr	r3, [pc, #100]	; (8000b30 <GPIO_voidSetAltFunction+0x1b4>)
 8000aca:	681a      	ldr	r2, [r3, #0]
 8000acc:	79bb      	ldrb	r3, [r7, #6]
 8000ace:	009b      	lsls	r3, r3, #2
 8000ad0:	6839      	ldr	r1, [r7, #0]
 8000ad2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ad6:	4916      	ldr	r1, [pc, #88]	; (8000b30 <GPIO_voidSetAltFunction+0x1b4>)
 8000ad8:	4313      	orrs	r3, r2
 8000ada:	600b      	str	r3, [r1, #0]
			}
			else
			{
				GPIOH_AFRH |= ( Copy_u8AltValue << ( (Copy_u8PinID%8) * 4 ) );
			}break;
 8000adc:	e00d      	b.n	8000afa <GPIO_voidSetAltFunction+0x17e>
				GPIOH_AFRH |= ( Copy_u8AltValue << ( (Copy_u8PinID%8) * 4 ) );
 8000ade:	4b15      	ldr	r3, [pc, #84]	; (8000b34 <GPIO_voidSetAltFunction+0x1b8>)
 8000ae0:	681a      	ldr	r2, [r3, #0]
 8000ae2:	79bb      	ldrb	r3, [r7, #6]
 8000ae4:	f003 0307 	and.w	r3, r3, #7
 8000ae8:	009b      	lsls	r3, r3, #2
 8000aea:	6839      	ldr	r1, [r7, #0]
 8000aec:	fa01 f303 	lsl.w	r3, r1, r3
 8000af0:	4910      	ldr	r1, [pc, #64]	; (8000b34 <GPIO_voidSetAltFunction+0x1b8>)
 8000af2:	4313      	orrs	r3, r2
 8000af4:	600b      	str	r3, [r1, #0]
			}break;
 8000af6:	e000      	b.n	8000afa <GPIO_voidSetAltFunction+0x17e>
		default:
			break;
 8000af8:	bf00      	nop
	}
}
 8000afa:	bf00      	nop
 8000afc:	370c      	adds	r7, #12
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop
 8000b08:	40020020 	.word	0x40020020
 8000b0c:	40020024 	.word	0x40020024
 8000b10:	40020420 	.word	0x40020420
 8000b14:	40020424 	.word	0x40020424
 8000b18:	40020820 	.word	0x40020820
 8000b1c:	40020824 	.word	0x40020824
 8000b20:	40020c20 	.word	0x40020c20
 8000b24:	40020c24 	.word	0x40020c24
 8000b28:	40021020 	.word	0x40021020
 8000b2c:	40021024 	.word	0x40021024
 8000b30:	40021c20 	.word	0x40021c20
 8000b34:	40021c24 	.word	0x40021c24

08000b38 <RCC_voidInit>:
#include "RCC_private.h"
#include "RCC_config.h"


 void RCC_voidInit(void)
 {
 8000b38:	b480      	push	{r7}
 8000b3a:	b083      	sub	sp, #12
 8000b3c:	af00      	add	r7, sp, #0
	 u32 Local_u32TimeOut = 0;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	607b      	str	r3, [r7, #4]

	 	 /* RCC Configurations */


	 	 /* HSI ON */
         SET_BIT(RCC_CR, RCC_HSION);
 8000b42:	4b14      	ldr	r3, [pc, #80]	; (8000b94 <RCC_voidInit+0x5c>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	4a13      	ldr	r2, [pc, #76]	; (8000b94 <RCC_voidInit+0x5c>)
 8000b48:	f043 0301 	orr.w	r3, r3, #1
 8000b4c:	6013      	str	r3, [r2, #0]
         /* polling to check if the HSI is ready or not */
         while((GET_BIT(RCC_CR, RCC_HSIRDY)==0) && (Local_u32TimeOut < 10000))
 8000b4e:	e002      	b.n	8000b56 <RCC_voidInit+0x1e>
         {
        	 Local_u32TimeOut++;
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	3301      	adds	r3, #1
 8000b54:	607b      	str	r3, [r7, #4]
         while((GET_BIT(RCC_CR, RCC_HSIRDY)==0) && (Local_u32TimeOut < 10000))
 8000b56:	4b0f      	ldr	r3, [pc, #60]	; (8000b94 <RCC_voidInit+0x5c>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	085b      	lsrs	r3, r3, #1
 8000b5c:	f003 0301 	and.w	r3, r3, #1
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d104      	bne.n	8000b6e <RCC_voidInit+0x36>
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	f242 720f 	movw	r2, #9999	; 0x270f
 8000b6a:	4293      	cmp	r3, r2
 8000b6c:	d9f0      	bls.n	8000b50 <RCC_voidInit+0x18>
         }
         Clear_bit(RCC_CFGR, 0);
 8000b6e:	4b0a      	ldr	r3, [pc, #40]	; (8000b98 <RCC_voidInit+0x60>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	4a09      	ldr	r2, [pc, #36]	; (8000b98 <RCC_voidInit+0x60>)
 8000b74:	f023 0301 	bic.w	r3, r3, #1
 8000b78:	6013      	str	r3, [r2, #0]
         Clear_bit(RCC_CFGR, 1);
 8000b7a:	4b07      	ldr	r3, [pc, #28]	; (8000b98 <RCC_voidInit+0x60>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	4a06      	ldr	r2, [pc, #24]	; (8000b98 <RCC_voidInit+0x60>)
 8000b80:	f023 0302 	bic.w	r3, r3, #2
 8000b84:	6013      	str	r3, [r2, #0]
		#error "Wrong Choice of Clock Type"
    
     	 #endif
	#endif

 }
 8000b86:	bf00      	nop
 8000b88:	370c      	adds	r7, #12
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop
 8000b94:	40023800 	.word	0x40023800
 8000b98:	40023808 	.word	0x40023808

08000b9c <RCC_voidEnablePeripheralCLK>:
//    }
//}   /* RCC_voidInit */

/* this function for enable Periperal CLK for GPIO, DMA and OTG */
void RCC_voidEnablePeripheralCLK(RCC_Bus Copy_u8BusID, gpio_type Copy_u8PerID)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b083      	sub	sp, #12
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	460a      	mov	r2, r1
 8000ba6:	71fb      	strb	r3, [r7, #7]
 8000ba8:	4613      	mov	r3, r2
 8000baa:	71bb      	strb	r3, [r7, #6]
    switch (Copy_u8BusID)
 8000bac:	79fb      	ldrb	r3, [r7, #7]
 8000bae:	2b03      	cmp	r3, #3
 8000bb0:	d836      	bhi.n	8000c20 <RCC_voidEnablePeripheralCLK+0x84>
 8000bb2:	a201      	add	r2, pc, #4	; (adr r2, 8000bb8 <RCC_voidEnablePeripheralCLK+0x1c>)
 8000bb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bb8:	08000bc9 	.word	0x08000bc9
 8000bbc:	08000bdf 	.word	0x08000bdf
 8000bc0:	08000bf5 	.word	0x08000bf5
 8000bc4:	08000c0b 	.word	0x08000c0b
    {
        case RCC_AHB1: SET_BIT(RCC_AHB1ENR, Copy_u8PerID); break;
 8000bc8:	4b18      	ldr	r3, [pc, #96]	; (8000c2c <RCC_voidEnablePeripheralCLK+0x90>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	79ba      	ldrb	r2, [r7, #6]
 8000bce:	2101      	movs	r1, #1
 8000bd0:	fa01 f202 	lsl.w	r2, r1, r2
 8000bd4:	4611      	mov	r1, r2
 8000bd6:	4a15      	ldr	r2, [pc, #84]	; (8000c2c <RCC_voidEnablePeripheralCLK+0x90>)
 8000bd8:	430b      	orrs	r3, r1
 8000bda:	6013      	str	r3, [r2, #0]
 8000bdc:	e020      	b.n	8000c20 <RCC_voidEnablePeripheralCLK+0x84>
        case RCC_AHB2: SET_BIT(RCC_AHB2ENR, Copy_u8PerID); break;
 8000bde:	4b14      	ldr	r3, [pc, #80]	; (8000c30 <RCC_voidEnablePeripheralCLK+0x94>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	79ba      	ldrb	r2, [r7, #6]
 8000be4:	2101      	movs	r1, #1
 8000be6:	fa01 f202 	lsl.w	r2, r1, r2
 8000bea:	4611      	mov	r1, r2
 8000bec:	4a10      	ldr	r2, [pc, #64]	; (8000c30 <RCC_voidEnablePeripheralCLK+0x94>)
 8000bee:	430b      	orrs	r3, r1
 8000bf0:	6013      	str	r3, [r2, #0]
 8000bf2:	e015      	b.n	8000c20 <RCC_voidEnablePeripheralCLK+0x84>
        case RCC_ABP1: SET_BIT(RCC_APB1ENR, Copy_u8PerID); break;
 8000bf4:	4b0f      	ldr	r3, [pc, #60]	; (8000c34 <RCC_voidEnablePeripheralCLK+0x98>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	79ba      	ldrb	r2, [r7, #6]
 8000bfa:	2101      	movs	r1, #1
 8000bfc:	fa01 f202 	lsl.w	r2, r1, r2
 8000c00:	4611      	mov	r1, r2
 8000c02:	4a0c      	ldr	r2, [pc, #48]	; (8000c34 <RCC_voidEnablePeripheralCLK+0x98>)
 8000c04:	430b      	orrs	r3, r1
 8000c06:	6013      	str	r3, [r2, #0]
 8000c08:	e00a      	b.n	8000c20 <RCC_voidEnablePeripheralCLK+0x84>
        case RCC_ABP2: SET_BIT(RCC_APB2ENR, Copy_u8PerID); break;
 8000c0a:	4b0b      	ldr	r3, [pc, #44]	; (8000c38 <RCC_voidEnablePeripheralCLK+0x9c>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	79ba      	ldrb	r2, [r7, #6]
 8000c10:	2101      	movs	r1, #1
 8000c12:	fa01 f202 	lsl.w	r2, r1, r2
 8000c16:	4611      	mov	r1, r2
 8000c18:	4a07      	ldr	r2, [pc, #28]	; (8000c38 <RCC_voidEnablePeripheralCLK+0x9c>)
 8000c1a:	430b      	orrs	r3, r1
 8000c1c:	6013      	str	r3, [r2, #0]
 8000c1e:	bf00      	nop
    }
}   /* RCC_voidEnablePeripheralCLK */
 8000c20:	bf00      	nop
 8000c22:	370c      	adds	r7, #12
 8000c24:	46bd      	mov	sp, r7
 8000c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2a:	4770      	bx	lr
 8000c2c:	40023830 	.word	0x40023830
 8000c30:	40023834 	.word	0x40023834
 8000c34:	40023840 	.word	0x40023840
 8000c38:	40023844 	.word	0x40023844

08000c3c <KeyPad_Intialize>:
#include "STD_TYPES.h"
#include "keypad.h"
#include "keypad_config.h"

void  KeyPad_Intialize(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0

	//set rows as input
	//port c pin 0
	Clear_bit(keypad_port_mode,0);
 8000c40:	4b3e      	ldr	r3, [pc, #248]	; (8000d3c <KeyPad_Intialize+0x100>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4a3d      	ldr	r2, [pc, #244]	; (8000d3c <KeyPad_Intialize+0x100>)
 8000c46:	f023 0301 	bic.w	r3, r3, #1
 8000c4a:	6013      	str	r3, [r2, #0]
	Clear_bit(keypad_port_mode,1);
 8000c4c:	4b3b      	ldr	r3, [pc, #236]	; (8000d3c <KeyPad_Intialize+0x100>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4a3a      	ldr	r2, [pc, #232]	; (8000d3c <KeyPad_Intialize+0x100>)
 8000c52:	f023 0302 	bic.w	r3, r3, #2
 8000c56:	6013      	str	r3, [r2, #0]

	//port c pin 1
	Clear_bit(keypad_port_mode,2);
 8000c58:	4b38      	ldr	r3, [pc, #224]	; (8000d3c <KeyPad_Intialize+0x100>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4a37      	ldr	r2, [pc, #220]	; (8000d3c <KeyPad_Intialize+0x100>)
 8000c5e:	f023 0304 	bic.w	r3, r3, #4
 8000c62:	6013      	str	r3, [r2, #0]
	Clear_bit(keypad_port_mode,3);
 8000c64:	4b35      	ldr	r3, [pc, #212]	; (8000d3c <KeyPad_Intialize+0x100>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4a34      	ldr	r2, [pc, #208]	; (8000d3c <KeyPad_Intialize+0x100>)
 8000c6a:	f023 0308 	bic.w	r3, r3, #8
 8000c6e:	6013      	str	r3, [r2, #0]
	//port c pin 2
	Clear_bit(keypad_port_mode,4);
 8000c70:	4b32      	ldr	r3, [pc, #200]	; (8000d3c <KeyPad_Intialize+0x100>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4a31      	ldr	r2, [pc, #196]	; (8000d3c <KeyPad_Intialize+0x100>)
 8000c76:	f023 0310 	bic.w	r3, r3, #16
 8000c7a:	6013      	str	r3, [r2, #0]
	Clear_bit(keypad_port_mode,5);
 8000c7c:	4b2f      	ldr	r3, [pc, #188]	; (8000d3c <KeyPad_Intialize+0x100>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a2e      	ldr	r2, [pc, #184]	; (8000d3c <KeyPad_Intialize+0x100>)
 8000c82:	f023 0320 	bic.w	r3, r3, #32
 8000c86:	6013      	str	r3, [r2, #0]
	//port c pin 3
	Clear_bit(keypad_port_mode,6);
 8000c88:	4b2c      	ldr	r3, [pc, #176]	; (8000d3c <KeyPad_Intialize+0x100>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4a2b      	ldr	r2, [pc, #172]	; (8000d3c <KeyPad_Intialize+0x100>)
 8000c8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000c92:	6013      	str	r3, [r2, #0]
	Clear_bit(keypad_port_mode,7);
 8000c94:	4b29      	ldr	r3, [pc, #164]	; (8000d3c <KeyPad_Intialize+0x100>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a28      	ldr	r2, [pc, #160]	; (8000d3c <KeyPad_Intialize+0x100>)
 8000c9a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000c9e:	6013      	str	r3, [r2, #0]
	//port c pin 4 // column input
	SET_BIT(keypad_port_mode,8);
 8000ca0:	4b26      	ldr	r3, [pc, #152]	; (8000d3c <KeyPad_Intialize+0x100>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4a25      	ldr	r2, [pc, #148]	; (8000d3c <KeyPad_Intialize+0x100>)
 8000ca6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000caa:	6013      	str	r3, [r2, #0]
	Clear_bit(keypad_port_mode,9);
 8000cac:	4b23      	ldr	r3, [pc, #140]	; (8000d3c <KeyPad_Intialize+0x100>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	4a22      	ldr	r2, [pc, #136]	; (8000d3c <KeyPad_Intialize+0x100>)
 8000cb2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000cb6:	6013      	str	r3, [r2, #0]
	Clear_bit(keypad_port_type,4);
 8000cb8:	4b21      	ldr	r3, [pc, #132]	; (8000d40 <KeyPad_Intialize+0x104>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4a20      	ldr	r2, [pc, #128]	; (8000d40 <KeyPad_Intialize+0x104>)
 8000cbe:	f023 0310 	bic.w	r3, r3, #16
 8000cc2:	6013      	str	r3, [r2, #0]

	//port c pin 5 // column input
	SET_BIT(keypad_port_mode,10);
 8000cc4:	4b1d      	ldr	r3, [pc, #116]	; (8000d3c <KeyPad_Intialize+0x100>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4a1c      	ldr	r2, [pc, #112]	; (8000d3c <KeyPad_Intialize+0x100>)
 8000cca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cce:	6013      	str	r3, [r2, #0]
	Clear_bit(keypad_port_mode,11);
 8000cd0:	4b1a      	ldr	r3, [pc, #104]	; (8000d3c <KeyPad_Intialize+0x100>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4a19      	ldr	r2, [pc, #100]	; (8000d3c <KeyPad_Intialize+0x100>)
 8000cd6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000cda:	6013      	str	r3, [r2, #0]
	Clear_bit(keypad_port_type,5);
 8000cdc:	4b18      	ldr	r3, [pc, #96]	; (8000d40 <KeyPad_Intialize+0x104>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4a17      	ldr	r2, [pc, #92]	; (8000d40 <KeyPad_Intialize+0x104>)
 8000ce2:	f023 0320 	bic.w	r3, r3, #32
 8000ce6:	6013      	str	r3, [r2, #0]
	//port c pin 6 // column input
	SET_BIT(keypad_port_mode,12);
 8000ce8:	4b14      	ldr	r3, [pc, #80]	; (8000d3c <KeyPad_Intialize+0x100>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a13      	ldr	r2, [pc, #76]	; (8000d3c <KeyPad_Intialize+0x100>)
 8000cee:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000cf2:	6013      	str	r3, [r2, #0]
	Clear_bit(keypad_port_mode,13);
 8000cf4:	4b11      	ldr	r3, [pc, #68]	; (8000d3c <KeyPad_Intialize+0x100>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4a10      	ldr	r2, [pc, #64]	; (8000d3c <KeyPad_Intialize+0x100>)
 8000cfa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000cfe:	6013      	str	r3, [r2, #0]
	Clear_bit(keypad_port_type,6);
 8000d00:	4b0f      	ldr	r3, [pc, #60]	; (8000d40 <KeyPad_Intialize+0x104>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4a0e      	ldr	r2, [pc, #56]	; (8000d40 <KeyPad_Intialize+0x104>)
 8000d06:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000d0a:	6013      	str	r3, [r2, #0]
	//port c pin 7 // column input
	SET_BIT(keypad_port_mode,14);
 8000d0c:	4b0b      	ldr	r3, [pc, #44]	; (8000d3c <KeyPad_Intialize+0x100>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a0a      	ldr	r2, [pc, #40]	; (8000d3c <KeyPad_Intialize+0x100>)
 8000d12:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d16:	6013      	str	r3, [r2, #0]
	Clear_bit(keypad_port_mode,15);
 8000d18:	4b08      	ldr	r3, [pc, #32]	; (8000d3c <KeyPad_Intialize+0x100>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a07      	ldr	r2, [pc, #28]	; (8000d3c <KeyPad_Intialize+0x100>)
 8000d1e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000d22:	6013      	str	r3, [r2, #0]
	Clear_bit(keypad_port_type,7);
 8000d24:	4b06      	ldr	r3, [pc, #24]	; (8000d40 <KeyPad_Intialize+0x104>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4a05      	ldr	r2, [pc, #20]	; (8000d40 <KeyPad_Intialize+0x104>)
 8000d2a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000d2e:	6013      	str	r3, [r2, #0]

}
 8000d30:	bf00      	nop
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop
 8000d3c:	40020800 	.word	0x40020800
 8000d40:	40020804 	.word	0x40020804

08000d44 <KeyPad_4x4_adjustKeyNumber>:




static u8 KeyPad_4x4_adjustKeyNumber(u8 button_number)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b083      	sub	sp, #12
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	71fb      	strb	r3, [r7, #7]
	switch(button_number)
 8000d4e:	79fb      	ldrb	r3, [r7, #7]
 8000d50:	3b01      	subs	r3, #1
 8000d52:	2b0f      	cmp	r3, #15
 8000d54:	d842      	bhi.n	8000ddc <KeyPad_4x4_adjustKeyNumber+0x98>
 8000d56:	a201      	add	r2, pc, #4	; (adr r2, 8000d5c <KeyPad_4x4_adjustKeyNumber+0x18>)
 8000d58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d5c:	08000d9d 	.word	0x08000d9d
 8000d60:	08000da1 	.word	0x08000da1
 8000d64:	08000da5 	.word	0x08000da5
 8000d68:	08000da9 	.word	0x08000da9
 8000d6c:	08000dad 	.word	0x08000dad
 8000d70:	08000db1 	.word	0x08000db1
 8000d74:	08000db5 	.word	0x08000db5
 8000d78:	08000db9 	.word	0x08000db9
 8000d7c:	08000dbd 	.word	0x08000dbd
 8000d80:	08000dc1 	.word	0x08000dc1
 8000d84:	08000dc5 	.word	0x08000dc5
 8000d88:	08000dc9 	.word	0x08000dc9
 8000d8c:	08000dcd 	.word	0x08000dcd
 8000d90:	08000dd1 	.word	0x08000dd1
 8000d94:	08000dd5 	.word	0x08000dd5
 8000d98:	08000dd9 	.word	0x08000dd9
	{
		case 1: return 7;
 8000d9c:	2307      	movs	r3, #7
 8000d9e:	e01e      	b.n	8000dde <KeyPad_4x4_adjustKeyNumber+0x9a>
				break;
		case 2: return 8;
 8000da0:	2308      	movs	r3, #8
 8000da2:	e01c      	b.n	8000dde <KeyPad_4x4_adjustKeyNumber+0x9a>
				break;
		case 3: return 9;
 8000da4:	2309      	movs	r3, #9
 8000da6:	e01a      	b.n	8000dde <KeyPad_4x4_adjustKeyNumber+0x9a>
				break;
		case 4: return '%'; // ASCII Code of %
 8000da8:	2325      	movs	r3, #37	; 0x25
 8000daa:	e018      	b.n	8000dde <KeyPad_4x4_adjustKeyNumber+0x9a>
				break;
		case 5: return 4;
 8000dac:	2304      	movs	r3, #4
 8000dae:	e016      	b.n	8000dde <KeyPad_4x4_adjustKeyNumber+0x9a>
				break;
		case 6: return 5;
 8000db0:	2305      	movs	r3, #5
 8000db2:	e014      	b.n	8000dde <KeyPad_4x4_adjustKeyNumber+0x9a>
				break;
		case 7: return 6;
 8000db4:	2306      	movs	r3, #6
 8000db6:	e012      	b.n	8000dde <KeyPad_4x4_adjustKeyNumber+0x9a>
				break;
		case 8: return '*'; /* ASCII Code of '*' */
 8000db8:	232a      	movs	r3, #42	; 0x2a
 8000dba:	e010      	b.n	8000dde <KeyPad_4x4_adjustKeyNumber+0x9a>
				break;
		case 9: return 1;
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	e00e      	b.n	8000dde <KeyPad_4x4_adjustKeyNumber+0x9a>
				break;
		case 10: return 2;
 8000dc0:	2302      	movs	r3, #2
 8000dc2:	e00c      	b.n	8000dde <KeyPad_4x4_adjustKeyNumber+0x9a>
				break;
		case 11: return 3;
 8000dc4:	2303      	movs	r3, #3
 8000dc6:	e00a      	b.n	8000dde <KeyPad_4x4_adjustKeyNumber+0x9a>
				break;
		case 12: return '-'; /* ASCII Code of '-' */
 8000dc8:	232d      	movs	r3, #45	; 0x2d
 8000dca:	e008      	b.n	8000dde <KeyPad_4x4_adjustKeyNumber+0x9a>
				break;
		case 13: return 13;  /* ASCII of Enter */
 8000dcc:	230d      	movs	r3, #13
 8000dce:	e006      	b.n	8000dde <KeyPad_4x4_adjustKeyNumber+0x9a>
				break;
		case 14: return 0;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	e004      	b.n	8000dde <KeyPad_4x4_adjustKeyNumber+0x9a>
				break;
		case 15: return '='; /* ASCII Code of '=' */
 8000dd4:	233d      	movs	r3, #61	; 0x3d
 8000dd6:	e002      	b.n	8000dde <KeyPad_4x4_adjustKeyNumber+0x9a>
				break;
		case 16: return '+'; /* ASCII Code of '+' */
 8000dd8:	232b      	movs	r3, #43	; 0x2b
 8000dda:	e000      	b.n	8000dde <KeyPad_4x4_adjustKeyNumber+0x9a>
				break;
		default: return button_number;
 8000ddc:	79fb      	ldrb	r3, [r7, #7]
	}
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	370c      	adds	r7, #12
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop

08000dec <KeyPad_getPressedKey>:
//			}
//		}
//	}
//}
u8 KeyPad_getPressedKey(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
	u8 col,row;

	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
 8000df2:	2300      	movs	r3, #0
 8000df4:	71fb      	strb	r3, [r7, #7]
 8000df6:	e028      	b.n	8000e4a <KeyPad_getPressedKey+0x5e>

			/*
			 * clear the output pin column in this trace and enable the internal
			 * pull up resistors for the rows pins
			 */
			keypad_ODR = (~(0b0000000000010000<<col));
 8000df8:	79fb      	ldrb	r3, [r7, #7]
 8000dfa:	2210      	movs	r2, #16
 8000dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000e00:	43da      	mvns	r2, r3
 8000e02:	4b16      	ldr	r3, [pc, #88]	; (8000e5c <KeyPad_getPressedKey+0x70>)
 8000e04:	601a      	str	r2, [r3, #0]
			for(row=0;row<N_row;row++) /* loop for rows */
 8000e06:	2300      	movs	r3, #0
 8000e08:	71bb      	strb	r3, [r7, #6]
 8000e0a:	e018      	b.n	8000e3e <KeyPad_getPressedKey+0x52>
			{
				if(BIT_IS_CLEAR(keypad_IDR,row)) /* if the switch is press in this row */
 8000e0c:	4b14      	ldr	r3, [pc, #80]	; (8000e60 <KeyPad_getPressedKey+0x74>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	79ba      	ldrb	r2, [r7, #6]
 8000e12:	2101      	movs	r1, #1
 8000e14:	fa01 f202 	lsl.w	r2, r1, r2
 8000e18:	4013      	ands	r3, r2
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d10c      	bne.n	8000e38 <KeyPad_getPressedKey+0x4c>
				{
						return KeyPad_4x4_adjustKeyNumber((row*N_col)+col+1);
 8000e1e:	79bb      	ldrb	r3, [r7, #6]
 8000e20:	009b      	lsls	r3, r3, #2
 8000e22:	b2da      	uxtb	r2, r3
 8000e24:	79fb      	ldrb	r3, [r7, #7]
 8000e26:	4413      	add	r3, r2
 8000e28:	b2db      	uxtb	r3, r3
 8000e2a:	3301      	adds	r3, #1
 8000e2c:	b2db      	uxtb	r3, r3
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f7ff ff88 	bl	8000d44 <KeyPad_4x4_adjustKeyNumber>
 8000e34:	4603      	mov	r3, r0
 8000e36:	e00c      	b.n	8000e52 <KeyPad_getPressedKey+0x66>
			for(row=0;row<N_row;row++) /* loop for rows */
 8000e38:	79bb      	ldrb	r3, [r7, #6]
 8000e3a:	3301      	adds	r3, #1
 8000e3c:	71bb      	strb	r3, [r7, #6]
 8000e3e:	79bb      	ldrb	r3, [r7, #6]
 8000e40:	2b03      	cmp	r3, #3
 8000e42:	d9e3      	bls.n	8000e0c <KeyPad_getPressedKey+0x20>
		for(col=0;col<N_col;col++) /* loop for columns */
 8000e44:	79fb      	ldrb	r3, [r7, #7]
 8000e46:	3301      	adds	r3, #1
 8000e48:	71fb      	strb	r3, [r7, #7]
 8000e4a:	79fb      	ldrb	r3, [r7, #7]
 8000e4c:	2b03      	cmp	r3, #3
 8000e4e:	d9d3      	bls.n	8000df8 <KeyPad_getPressedKey+0xc>
 8000e50:	e7cf      	b.n	8000df2 <KeyPad_getPressedKey+0x6>

				}
			}
		}
	}
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	3708      	adds	r7, #8
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	40020814 	.word	0x40020814
 8000e60:	40020810 	.word	0x40020810

08000e64 <delay>:


void delay(u32 Copy_u32Time)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b085      	sub	sp, #20
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
	for(u32 i = 0 ; i < Copy_u32Time ; i++)
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	60fb      	str	r3, [r7, #12]
 8000e70:	e00d      	b.n	8000e8e <delay+0x2a>
	{
		for(u16 j = 0 ; j < 565 ; j++)
 8000e72:	2300      	movs	r3, #0
 8000e74:	817b      	strh	r3, [r7, #10]
 8000e76:	e003      	b.n	8000e80 <delay+0x1c>
		{
			asm("NOP");
 8000e78:	bf00      	nop
		for(u16 j = 0 ; j < 565 ; j++)
 8000e7a:	897b      	ldrh	r3, [r7, #10]
 8000e7c:	3301      	adds	r3, #1
 8000e7e:	817b      	strh	r3, [r7, #10]
 8000e80:	897b      	ldrh	r3, [r7, #10]
 8000e82:	f5b3 7f0d 	cmp.w	r3, #564	; 0x234
 8000e86:	d9f7      	bls.n	8000e78 <delay+0x14>
	for(u32 i = 0 ; i < Copy_u32Time ; i++)
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	3301      	adds	r3, #1
 8000e8c:	60fb      	str	r3, [r7, #12]
 8000e8e:	68fa      	ldr	r2, [r7, #12]
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	429a      	cmp	r2, r3
 8000e94:	d3ed      	bcc.n	8000e72 <delay+0xe>
		}
	}
}
 8000e96:	bf00      	nop
 8000e98:	bf00      	nop
 8000e9a:	3714      	adds	r7, #20
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr

08000ea4 <main>:
#include "GPIO_Interface.h"
#include "keypad.h"
#include "usart_interface.h"


int main(){
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
//

		//RCC/
		RCC_voidInit();
 8000eaa:	f7ff fe45 	bl	8000b38 <RCC_voidInit>
		RCC_voidEnablePeripheralCLK(RCC_AHB1,RCC_GPIOA_EN);
 8000eae:	2100      	movs	r1, #0
 8000eb0:	2000      	movs	r0, #0
 8000eb2:	f7ff fe73 	bl	8000b9c <RCC_voidEnablePeripheralCLK>
		RCC_voidEnablePeripheralCLK(RCC_AHB1,RCC_GPIOB_EN);
 8000eb6:	2101      	movs	r1, #1
 8000eb8:	2000      	movs	r0, #0
 8000eba:	f7ff fe6f 	bl	8000b9c <RCC_voidEnablePeripheralCLK>
		RCC_voidEnablePeripheralCLK(RCC_AHB1,RCC_GPIOC_EN);
 8000ebe:	2102      	movs	r1, #2
 8000ec0:	2000      	movs	r0, #0
 8000ec2:	f7ff fe6b 	bl	8000b9c <RCC_voidEnablePeripheralCLK>


				//Keypad
				KeyPad_Intialize();
 8000ec6:	f7ff feb9 	bl	8000c3c <KeyPad_Intialize>
				u8 key;
				//usart2 enable
				delay(500);
 8000eca:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ece:	f7ff ffc9 	bl	8000e64 <delay>
				USART_voidInit();// initialize UART
 8000ed2:	f000 f827 	bl	8000f24 <USART_voidInit>
				//delay(500);
		L:
				for (int i = 0 ; i < 6 ; i++)
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	607b      	str	r3, [r7, #4]
 8000eda:	e017      	b.n	8000f0c <main+0x68>
				{
				key = KeyPad_getPressedKey();
 8000edc:	f7ff ff86 	bl	8000dec <KeyPad_getPressedKey>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	70fb      	strb	r3, [r7, #3]
					if (key >0 && key <= 9)
 8000ee4:	78fb      	ldrb	r3, [r7, #3]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d00d      	beq.n	8000f06 <main+0x62>
 8000eea:	78fb      	ldrb	r3, [r7, #3]
 8000eec:	2b09      	cmp	r3, #9
 8000eee:	d80a      	bhi.n	8000f06 <main+0x62>
					{ delay(150);
 8000ef0:	2096      	movs	r0, #150	; 0x96
 8000ef2:	f7ff ffb7 	bl	8000e64 <delay>
					  USART_voidTransmit(key);
 8000ef6:	78fb      	ldrb	r3, [r7, #3]
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f000 f867 	bl	8000fcc <USART_voidTransmit>
					  delay(500);
 8000efe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f02:	f7ff ffaf 	bl	8000e64 <delay>
				for (int i = 0 ; i < 6 ; i++)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	3301      	adds	r3, #1
 8000f0a:	607b      	str	r3, [r7, #4]
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	2b05      	cmp	r3, #5
 8000f10:	dde4      	ble.n	8000edc <main+0x38>
					}//end if
				}//end for
				for(;;)
				{
					if (USART_u8Receive() == 1 )
 8000f12:	f000 f87f 	bl	8001014 <USART_u8Receive>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b01      	cmp	r3, #1
 8000f1a:	d1fa      	bne.n	8000f12 <main+0x6e>
					{
						delay(100);
 8000f1c:	2064      	movs	r0, #100	; 0x64
 8000f1e:	f7ff ffa1 	bl	8000e64 <delay>
						goto	L;
 8000f22:	e7d8      	b.n	8000ed6 <main+0x32>

08000f24 <USART_voidInit>:
//}



void USART_voidInit(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
	/*		 RCC CLK EN for USART		 */
	RCC_voidEnablePeripheralCLK(RCC_ABP1, 17);// USART2 enable
 8000f28:	2111      	movs	r1, #17
 8000f2a:	2002      	movs	r0, #2
 8000f2c:	f7ff fe36 	bl	8000b9c <RCC_voidEnablePeripheralCLK>

	/*		 RCC GPIOA EN 				 */
	RCC_voidEnablePeripheralCLK(RCC_AHB1,RCC_GPIOA_EN);
 8000f30:	2100      	movs	r1, #0
 8000f32:	2000      	movs	r0, #0
 8000f34:	f7ff fe32 	bl	8000b9c <RCC_voidEnablePeripheralCLK>

	/* 	TX --> PA2  Mode (AF) 	&&	 RCC_GPIOA EN 	*/
	GPIO_void_setPin_Direction(PORT_A, PIN2, ALTERNATIVE_FUNCTION_MODE);
 8000f38:	2202      	movs	r2, #2
 8000f3a:	2102      	movs	r1, #2
 8000f3c:	2000      	movs	r0, #0
 8000f3e:	f7ff f949 	bl	80001d4 <GPIO_void_setPin_Direction>
	GPIO_void_setPin_Output_Type(PORT_A, PIN2, OUTPUT_PUSH_PULL);
 8000f42:	2200      	movs	r2, #0
 8000f44:	2102      	movs	r1, #2
 8000f46:	2000      	movs	r0, #0
 8000f48:	f7ff fc36 	bl	80007b8 <GPIO_void_setPin_Output_Type>


	/* 	RX --> PA3  Mode (AF) 	&&	 RCC_GPIOA EN 	*/

	GPIO_void_setPin_Direction(PORT_A, PIN3, ALTERNATIVE_FUNCTION_MODE);
 8000f4c:	2202      	movs	r2, #2
 8000f4e:	2103      	movs	r1, #3
 8000f50:	2000      	movs	r0, #0
 8000f52:	f7ff f93f 	bl	80001d4 <GPIO_void_setPin_Direction>
	GPIO_void_setPin_Output_Type(PORT_A, PIN3, OUTPUT_PUSH_PULL);
 8000f56:	2200      	movs	r2, #0
 8000f58:	2103      	movs	r1, #3
 8000f5a:	2000      	movs	r0, #0
 8000f5c:	f7ff fc2c 	bl	80007b8 <GPIO_void_setPin_Output_Type>

	/* 		Alternative function 7 for PA2	 	 */
	GPIO_voidSetAltFunction(PORT_A, PIN2, AF7);
 8000f60:	2207      	movs	r2, #7
 8000f62:	2102      	movs	r1, #2
 8000f64:	2000      	movs	r0, #0
 8000f66:	f7ff fd09 	bl	800097c <GPIO_voidSetAltFunction>

	/* 		Alternative function 7 for PA3  	 */
	GPIO_voidSetAltFunction(PORT_A, PIN3, AF7);
 8000f6a:	2207      	movs	r2, #7
 8000f6c:	2103      	movs	r1, #3
 8000f6e:	2000      	movs	r0, #0
 8000f70:	f7ff fd04 	bl	800097c <GPIO_voidSetAltFunction>


	/* Set baud rate 9600 on HSI = 16 MHZ */
	USART2->BRR = 0x0683;
 8000f74:	4b14      	ldr	r3, [pc, #80]	; (8000fc8 <USART_voidInit+0xa4>)
 8000f76:	f240 6283 	movw	r2, #1667	; 0x683
 8000f7a:	609a      	str	r2, [r3, #8]

	/*	Receive Enable	*/
	SET_BIT(USART2->CR1,2);
 8000f7c:	4b12      	ldr	r3, [pc, #72]	; (8000fc8 <USART_voidInit+0xa4>)
 8000f7e:	68db      	ldr	r3, [r3, #12]
 8000f80:	4a11      	ldr	r2, [pc, #68]	; (8000fc8 <USART_voidInit+0xa4>)
 8000f82:	f043 0304 	orr.w	r3, r3, #4
 8000f86:	60d3      	str	r3, [r2, #12]

	/*  transmit Enable */
	SET_BIT(USART2->CR1,3);
 8000f88:	4b0f      	ldr	r3, [pc, #60]	; (8000fc8 <USART_voidInit+0xa4>)
 8000f8a:	68db      	ldr	r3, [r3, #12]
 8000f8c:	4a0e      	ldr	r2, [pc, #56]	; (8000fc8 <USART_voidInit+0xa4>)
 8000f8e:	f043 0308 	orr.w	r3, r3, #8
 8000f92:	60d3      	str	r3, [r2, #12]

	/* 	1 Start bit, 8 Data bits, n Stop bit 	 */
	Clear_bit(USART2->CR1,12);
 8000f94:	4b0c      	ldr	r3, [pc, #48]	; (8000fc8 <USART_voidInit+0xa4>)
 8000f96:	68db      	ldr	r3, [r3, #12]
 8000f98:	4a0b      	ldr	r2, [pc, #44]	; (8000fc8 <USART_voidInit+0xa4>)
 8000f9a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000f9e:	60d3      	str	r3, [r2, #12]

	/*	 1 stop bit		*/
	Clear_bit(USART2->CR2,12);
 8000fa0:	4b09      	ldr	r3, [pc, #36]	; (8000fc8 <USART_voidInit+0xa4>)
 8000fa2:	691b      	ldr	r3, [r3, #16]
 8000fa4:	4a08      	ldr	r2, [pc, #32]	; (8000fc8 <USART_voidInit+0xa4>)
 8000fa6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000faa:	6113      	str	r3, [r2, #16]
	Clear_bit(USART2->CR2,13);
 8000fac:	4b06      	ldr	r3, [pc, #24]	; (8000fc8 <USART_voidInit+0xa4>)
 8000fae:	691b      	ldr	r3, [r3, #16]
 8000fb0:	4a05      	ldr	r2, [pc, #20]	; (8000fc8 <USART_voidInit+0xa4>)
 8000fb2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000fb6:	6113      	str	r3, [r2, #16]

	/*	 Enable USART2	 */
	SET_BIT(USART2->CR1,13);
 8000fb8:	4b03      	ldr	r3, [pc, #12]	; (8000fc8 <USART_voidInit+0xa4>)
 8000fba:	68db      	ldr	r3, [r3, #12]
 8000fbc:	4a02      	ldr	r2, [pc, #8]	; (8000fc8 <USART_voidInit+0xa4>)
 8000fbe:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000fc2:	60d3      	str	r3, [r2, #12]

}
 8000fc4:	bf00      	nop
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	40004400 	.word	0x40004400

08000fcc <USART_voidTransmit>:

void USART_voidTransmit(u8 Copy_u8TransmitData)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b085      	sub	sp, #20
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	71fb      	strb	r3, [r7, #7]
	/*		Local Variable for time out 	*/
	u32 Local_u32TimeOut = 0;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	60fb      	str	r3, [r7, #12]

	/*	 Write Data to send		*/
	USART2->DR = Copy_u8TransmitData;
 8000fda:	4a0c      	ldr	r2, [pc, #48]	; (800100c <USART_voidTransmit+0x40>)
 8000fdc:	79fb      	ldrb	r3, [r7, #7]
 8000fde:	6053      	str	r3, [r2, #4]

	/* 		polling with time out technique		 */
	while( (GET_BIT(USART2->SR,7) == 0) && (Local_u32TimeOut < 100000000) )
 8000fe0:	e002      	b.n	8000fe8 <USART_voidTransmit+0x1c>
	{
		Local_u32TimeOut++;
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	3301      	adds	r3, #1
 8000fe6:	60fb      	str	r3, [r7, #12]
	while( (GET_BIT(USART2->SR,7) == 0) && (Local_u32TimeOut < 100000000) )
 8000fe8:	4b08      	ldr	r3, [pc, #32]	; (800100c <USART_voidTransmit+0x40>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	09db      	lsrs	r3, r3, #7
 8000fee:	f003 0301 	and.w	r3, r3, #1
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d103      	bne.n	8000ffe <USART_voidTransmit+0x32>
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	4a05      	ldr	r2, [pc, #20]	; (8001010 <USART_voidTransmit+0x44>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d9f1      	bls.n	8000fe2 <USART_voidTransmit+0x16>
	}
}
 8000ffe:	bf00      	nop
 8001000:	3714      	adds	r7, #20
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	40004400 	.word	0x40004400
 8001010:	05f5e0ff 	.word	0x05f5e0ff

08001014 <USART_u8Receive>:

u8 USART_u8Receive(void)
{
 8001014:	b480      	push	{r7}
 8001016:	b083      	sub	sp, #12
 8001018:	af00      	add	r7, sp, #0
	/*		Local Variable for time out 	*/
	u32 Local_u32TimeOut = 0;
 800101a:	2300      	movs	r3, #0
 800101c:	607b      	str	r3, [r7, #4]

	/* 		Waiting for data to be ready to read with time out   	*/
	while( (GET_BIT(USART2->SR,5) == 0) && (Local_u32TimeOut < 100000000) )
 800101e:	e002      	b.n	8001026 <USART_u8Receive+0x12>
	{
		Local_u32TimeOut++;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	3301      	adds	r3, #1
 8001024:	607b      	str	r3, [r7, #4]
	while( (GET_BIT(USART2->SR,5) == 0) && (Local_u32TimeOut < 100000000) )
 8001026:	4b0a      	ldr	r3, [pc, #40]	; (8001050 <USART_u8Receive+0x3c>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	095b      	lsrs	r3, r3, #5
 800102c:	f003 0301 	and.w	r3, r3, #1
 8001030:	2b00      	cmp	r3, #0
 8001032:	d103      	bne.n	800103c <USART_u8Receive+0x28>
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	4a07      	ldr	r2, [pc, #28]	; (8001054 <USART_u8Receive+0x40>)
 8001038:	4293      	cmp	r3, r2
 800103a:	d9f1      	bls.n	8001020 <USART_u8Receive+0xc>
	}
	return USART2->DR;
 800103c:	4b04      	ldr	r3, [pc, #16]	; (8001050 <USART_u8Receive+0x3c>)
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	b2db      	uxtb	r3, r3
}
 8001042:	4618      	mov	r0, r3
 8001044:	370c      	adds	r7, #12
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop
 8001050:	40004400 	.word	0x40004400
 8001054:	05f5e0ff 	.word	0x05f5e0ff

08001058 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001058:	480d      	ldr	r0, [pc, #52]	; (8001090 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800105a:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 800105c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001060:	480c      	ldr	r0, [pc, #48]	; (8001094 <LoopForever+0x6>)
  ldr r1, =_edata
 8001062:	490d      	ldr	r1, [pc, #52]	; (8001098 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001064:	4a0d      	ldr	r2, [pc, #52]	; (800109c <LoopForever+0xe>)
  movs r3, #0
 8001066:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001068:	e002      	b.n	8001070 <LoopCopyDataInit>

0800106a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800106a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800106c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800106e:	3304      	adds	r3, #4

08001070 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001070:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001072:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001074:	d3f9      	bcc.n	800106a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001076:	4a0a      	ldr	r2, [pc, #40]	; (80010a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001078:	4c0a      	ldr	r4, [pc, #40]	; (80010a4 <LoopForever+0x16>)
  movs r3, #0
 800107a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800107c:	e001      	b.n	8001082 <LoopFillZerobss>

0800107e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800107e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001080:	3204      	adds	r2, #4

08001082 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001082:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001084:	d3fb      	bcc.n	800107e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001086:	f000 f811 	bl	80010ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800108a:	f7ff ff0b 	bl	8000ea4 <main>

0800108e <LoopForever>:

LoopForever:
    b LoopForever
 800108e:	e7fe      	b.n	800108e <LoopForever>
  ldr   r0, =_estack
 8001090:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001094:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001098:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800109c:	08001114 	.word	0x08001114
  ldr r2, =_sbss
 80010a0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80010a4:	2000001c 	.word	0x2000001c

080010a8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010a8:	e7fe      	b.n	80010a8 <ADC_IRQHandler>
	...

080010ac <__libc_init_array>:
 80010ac:	b570      	push	{r4, r5, r6, lr}
 80010ae:	4d0d      	ldr	r5, [pc, #52]	; (80010e4 <__libc_init_array+0x38>)
 80010b0:	4c0d      	ldr	r4, [pc, #52]	; (80010e8 <__libc_init_array+0x3c>)
 80010b2:	1b64      	subs	r4, r4, r5
 80010b4:	10a4      	asrs	r4, r4, #2
 80010b6:	2600      	movs	r6, #0
 80010b8:	42a6      	cmp	r6, r4
 80010ba:	d109      	bne.n	80010d0 <__libc_init_array+0x24>
 80010bc:	4d0b      	ldr	r5, [pc, #44]	; (80010ec <__libc_init_array+0x40>)
 80010be:	4c0c      	ldr	r4, [pc, #48]	; (80010f0 <__libc_init_array+0x44>)
 80010c0:	f000 f818 	bl	80010f4 <_init>
 80010c4:	1b64      	subs	r4, r4, r5
 80010c6:	10a4      	asrs	r4, r4, #2
 80010c8:	2600      	movs	r6, #0
 80010ca:	42a6      	cmp	r6, r4
 80010cc:	d105      	bne.n	80010da <__libc_init_array+0x2e>
 80010ce:	bd70      	pop	{r4, r5, r6, pc}
 80010d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80010d4:	4798      	blx	r3
 80010d6:	3601      	adds	r6, #1
 80010d8:	e7ee      	b.n	80010b8 <__libc_init_array+0xc>
 80010da:	f855 3b04 	ldr.w	r3, [r5], #4
 80010de:	4798      	blx	r3
 80010e0:	3601      	adds	r6, #1
 80010e2:	e7f2      	b.n	80010ca <__libc_init_array+0x1e>
 80010e4:	0800110c 	.word	0x0800110c
 80010e8:	0800110c 	.word	0x0800110c
 80010ec:	0800110c 	.word	0x0800110c
 80010f0:	08001110 	.word	0x08001110

080010f4 <_init>:
 80010f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010f6:	bf00      	nop
 80010f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80010fa:	bc08      	pop	{r3}
 80010fc:	469e      	mov	lr, r3
 80010fe:	4770      	bx	lr

08001100 <_fini>:
 8001100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001102:	bf00      	nop
 8001104:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001106:	bc08      	pop	{r3}
 8001108:	469e      	mov	lr, r3
 800110a:	4770      	bx	lr
