
STM-VE-RX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001ff0  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  08002184  08002184  00012184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002248  08002248  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08002248  08002248  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002248  08002248  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002248  08002248  00012248  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800224c  0800224c  0001224c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08002250  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000034  20000004  08002254  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000038  08002254  00020038  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   000022a1  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000d7b  00000000  00000000  000222d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000003f8  00000000  00000000  00023050  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000002f0  00000000  00000000  00023448  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000022b4  00000000  00000000  00023738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000216a  00000000  00000000  000259ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00006e76  00000000  00000000  00027b56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0002e9cc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000b64  00000000  00000000  0002ea20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000004 	.word	0x20000004
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800216c 	.word	0x0800216c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000008 	.word	0x20000008
 80001d0:	0800216c 	.word	0x0800216c

080001d4 <Alarm_voidInit>:

#include "Alarm_Interface.h"
#include "Alarm_Config.h"
#include "GPIO_Interface.h"
void Alarm_voidInit(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
	GPIO_void_setPin_Direction(Alarm_PORT, Alarm_PIN_IN1, GENERAL_PURPOSE_OUTPUT_MODE);
 80001d8:	2201      	movs	r2, #1
 80001da:	210d      	movs	r1, #13
 80001dc:	2004      	movs	r0, #4
 80001de:	f000 f9b3 	bl	8000548 <GPIO_void_setPin_Direction>
	GPIO_void_setPin_Output_Type(Alarm_PORT, Alarm_PIN_IN1, OUTPUT_OPEN_DRAIN);
 80001e2:	2201      	movs	r2, #1
 80001e4:	210d      	movs	r1, #13
 80001e6:	2004      	movs	r0, #4
 80001e8:	f000 fca0 	bl	8000b2c <GPIO_void_setPin_Output_Type>

	GPIO_void_setPin_Direction(Alarm_PORT, Alarm_PIN_IN2, GENERAL_PURPOSE_OUTPUT_MODE);
 80001ec:	2201      	movs	r2, #1
 80001ee:	210e      	movs	r1, #14
 80001f0:	2004      	movs	r0, #4
 80001f2:	f000 f9a9 	bl	8000548 <GPIO_void_setPin_Direction>
	GPIO_void_setPin_Output_Type(Alarm_PORT, Alarm_PIN_IN2, OUTPUT_OPEN_DRAIN);
 80001f6:	2201      	movs	r2, #1
 80001f8:	210e      	movs	r1, #14
 80001fa:	2004      	movs	r0, #4
 80001fc:	f000 fc96 	bl	8000b2c <GPIO_void_setPin_Output_Type>

	GPIO_void_setPin_Direction(Alarm_PORT, Alarm_PIN_EN, GENERAL_PURPOSE_OUTPUT_MODE);
 8000200:	2201      	movs	r2, #1
 8000202:	210f      	movs	r1, #15
 8000204:	2004      	movs	r0, #4
 8000206:	f000 f99f 	bl	8000548 <GPIO_void_setPin_Direction>
	GPIO_void_setPin_Output_Type(Alarm_PORT, Alarm_PIN_EN, OUTPUT_OPEN_DRAIN);
 800020a:	2201      	movs	r2, #1
 800020c:	210f      	movs	r1, #15
 800020e:	2004      	movs	r0, #4
 8000210:	f000 fc8c 	bl	8000b2c <GPIO_void_setPin_Output_Type>
}
 8000214:	bf00      	nop
 8000216:	bd80      	pop	{r7, pc}

08000218 <Alarm_voidAlarmOn>:
void Alarm_voidAlarmOn(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0

	GPIO_void_setPin_value(Alarm_PORT, Alarm_PIN_EN, HIGH);
 800021c:	2201      	movs	r2, #1
 800021e:	210f      	movs	r1, #15
 8000220:	2004      	movs	r0, #4
 8000222:	f000 fd65 	bl	8000cf0 <GPIO_void_setPin_value>
	GPIO_void_setPin_value(Alarm_PORT, Alarm_PIN_IN1, HIGH);
 8000226:	2201      	movs	r2, #1
 8000228:	210d      	movs	r1, #13
 800022a:	2004      	movs	r0, #4
 800022c:	f000 fd60 	bl	8000cf0 <GPIO_void_setPin_value>
	GPIO_void_setPin_value(Alarm_PORT, Alarm_PIN_IN2, LOW);
 8000230:	2200      	movs	r2, #0
 8000232:	210e      	movs	r1, #14
 8000234:	2004      	movs	r0, #4
 8000236:	f000 fd5b 	bl	8000cf0 <GPIO_void_setPin_value>
}
 800023a:	bf00      	nop
 800023c:	bd80      	pop	{r7, pc}

0800023e <Alarm_voidAlarmOff>:

void Alarm_voidAlarmOff(void)
{
 800023e:	b580      	push	{r7, lr}
 8000240:	af00      	add	r7, sp, #0
	GPIO_void_setPin_value(Alarm_PORT, Alarm_PIN_IN1, LOW);
 8000242:	2200      	movs	r2, #0
 8000244:	210d      	movs	r1, #13
 8000246:	2004      	movs	r0, #4
 8000248:	f000 fd52 	bl	8000cf0 <GPIO_void_setPin_value>
	GPIO_void_setPin_value(Alarm_PORT, Alarm_PIN_IN2, LOW);
 800024c:	2200      	movs	r2, #0
 800024e:	210e      	movs	r1, #14
 8000250:	2004      	movs	r0, #4
 8000252:	f000 fd4d 	bl	8000cf0 <GPIO_void_setPin_value>
}
 8000256:	bf00      	nop
 8000258:	bd80      	pop	{r7, pc}

0800025a <DCmotor_init>:
#include "DC_MOTOR_Config.h"
#include "GPIO_Interface.h"
#include "RCC_private.h"

void DCmotor_init(void)
{
 800025a:	b580      	push	{r7, lr}
 800025c:	af00      	add	r7, sp, #0
	/// motor pins and ports set in configuration file

	GPIO_void_setPin_Direction(DC_MOTOR_PORT, DC_MOTOR_PIN_IN1, GENERAL_PURPOSE_OUTPUT_MODE);
 800025e:	2201      	movs	r2, #1
 8000260:	2100      	movs	r1, #0
 8000262:	2003      	movs	r0, #3
 8000264:	f000 f970 	bl	8000548 <GPIO_void_setPin_Direction>
	GPIO_void_setPin_Output_Type(DC_MOTOR_PORT, DC_MOTOR_PIN_IN1, OUTPUT_OPEN_DRAIN);
 8000268:	2201      	movs	r2, #1
 800026a:	2100      	movs	r1, #0
 800026c:	2003      	movs	r0, #3
 800026e:	f000 fc5d 	bl	8000b2c <GPIO_void_setPin_Output_Type>

	GPIO_void_setPin_Direction(DC_MOTOR_PORT, DC_MOTOR_PIN_IN2, GENERAL_PURPOSE_OUTPUT_MODE);
 8000272:	2201      	movs	r2, #1
 8000274:	2101      	movs	r1, #1
 8000276:	2003      	movs	r0, #3
 8000278:	f000 f966 	bl	8000548 <GPIO_void_setPin_Direction>
	GPIO_void_setPin_Output_Type(DC_MOTOR_PORT, DC_MOTOR_PIN_IN2, OUTPUT_OPEN_DRAIN);
 800027c:	2201      	movs	r2, #1
 800027e:	2101      	movs	r1, #1
 8000280:	2003      	movs	r0, #3
 8000282:	f000 fc53 	bl	8000b2c <GPIO_void_setPin_Output_Type>

	GPIO_void_setPin_Direction(DC_MOTOR_PORT, DC_MOTOR_PIN_EN1, GENERAL_PURPOSE_OUTPUT_MODE);
 8000286:	2201      	movs	r2, #1
 8000288:	2102      	movs	r1, #2
 800028a:	2003      	movs	r0, #3
 800028c:	f000 f95c 	bl	8000548 <GPIO_void_setPin_Direction>
	GPIO_void_setPin_Output_Type(DC_MOTOR_PORT, DC_MOTOR_PIN_EN1, OUTPUT_OPEN_DRAIN);
 8000290:	2201      	movs	r2, #1
 8000292:	2102      	movs	r1, #2
 8000294:	2003      	movs	r0, #3
 8000296:	f000 fc49 	bl	8000b2c <GPIO_void_setPin_Output_Type>
	GPIO_void_setPin_value(DC_MOTOR_PORT, DC_MOTOR_PIN_EN1, HIGH);
 800029a:	2201      	movs	r2, #1
 800029c:	2102      	movs	r1, #2
 800029e:	2003      	movs	r0, #3
 80002a0:	f000 fd26 	bl	8000cf0 <GPIO_void_setPin_value>
}//end DC motor initialize
 80002a4:	bf00      	nop
 80002a6:	bd80      	pop	{r7, pc}

080002a8 <DCmotor_Stop>:

void DCmotor_Stop(void)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	af00      	add	r7, sp, #0

	GPIO_void_setPin_value(DC_MOTOR_PORT, DC_MOTOR_PIN_IN1, HIGH);
 80002ac:	2201      	movs	r2, #1
 80002ae:	2100      	movs	r1, #0
 80002b0:	2003      	movs	r0, #3
 80002b2:	f000 fd1d 	bl	8000cf0 <GPIO_void_setPin_value>
	GPIO_void_setPin_value(DC_MOTOR_PORT, DC_MOTOR_PIN_IN2, HIGH);
 80002b6:	2201      	movs	r2, #1
 80002b8:	2101      	movs	r1, #1
 80002ba:	2003      	movs	r0, #3
 80002bc:	f000 fd18 	bl	8000cf0 <GPIO_void_setPin_value>
}
 80002c0:	bf00      	nop
 80002c2:	bd80      	pop	{r7, pc}

080002c4 <DCmotor_Direction>:
void DCmotor_Direction(u32 direction)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b082      	sub	sp, #8
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	6078      	str	r0, [r7, #4]
	switch(direction)
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d003      	beq.n	80002da <DCmotor_Direction+0x16>
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	2b01      	cmp	r3, #1
 80002d6:	d00b      	beq.n	80002f0 <DCmotor_Direction+0x2c>
		   GPIO_void_setPin_value(DC_MOTOR_PORT, DC_MOTOR_PIN_IN1, LOW);
		   	GPIO_void_setPin_value(DC_MOTOR_PORT, DC_MOTOR_PIN_IN2, HIGH);
	   break;

       default:
	   break;
 80002d8:	e015      	b.n	8000306 <DCmotor_Direction+0x42>
		   GPIO_void_setPin_value(DC_MOTOR_PORT, DC_MOTOR_PIN_IN1, HIGH);
 80002da:	2201      	movs	r2, #1
 80002dc:	2100      	movs	r1, #0
 80002de:	2003      	movs	r0, #3
 80002e0:	f000 fd06 	bl	8000cf0 <GPIO_void_setPin_value>
		   	GPIO_void_setPin_value(DC_MOTOR_PORT, DC_MOTOR_PIN_IN2, LOW);
 80002e4:	2200      	movs	r2, #0
 80002e6:	2101      	movs	r1, #1
 80002e8:	2003      	movs	r0, #3
 80002ea:	f000 fd01 	bl	8000cf0 <GPIO_void_setPin_value>
	   break;
 80002ee:	e00a      	b.n	8000306 <DCmotor_Direction+0x42>
		   GPIO_void_setPin_value(DC_MOTOR_PORT, DC_MOTOR_PIN_IN1, LOW);
 80002f0:	2200      	movs	r2, #0
 80002f2:	2100      	movs	r1, #0
 80002f4:	2003      	movs	r0, #3
 80002f6:	f000 fcfb 	bl	8000cf0 <GPIO_void_setPin_value>
		   	GPIO_void_setPin_value(DC_MOTOR_PORT, DC_MOTOR_PIN_IN2, HIGH);
 80002fa:	2201      	movs	r2, #1
 80002fc:	2101      	movs	r1, #1
 80002fe:	2003      	movs	r0, #3
 8000300:	f000 fcf6 	bl	8000cf0 <GPIO_void_setPin_value>
	   break;
 8000304:	bf00      	nop
	}

}// end DCmotor_Direction
 8000306:	bf00      	nop
 8000308:	3708      	adds	r7, #8
 800030a:	46bd      	mov	sp, r7
 800030c:	bd80      	pop	{r7, pc}
	...

08000310 <EXTI_voidIntialize>:
static void (*EXTI_pfCallBack1)(void)= NULL;
static void (*EXTI_pfCallBack2)(void)= NULL;
static void (*EXTI_pfCallBack3)(void)= NULL;

void EXTI_voidIntialize(void)
{
 8000310:	b480      	push	{r7}
 8000312:	af00      	add	r7, sp, #0
	 * 			1-	disable
	 * 			2-	clear all flags
	 *                                          */


	EXTI -> IMR =0;                    // all lines disabled
 8000314:	4b05      	ldr	r3, [pc, #20]	; (800032c <EXTI_voidIntialize+0x1c>)
 8000316:	2200      	movs	r2, #0
 8000318:	601a      	str	r2, [r3, #0]
	EXTI -> PR = 0XFFFFFFFF;           //all flags cleared
 800031a:	4b04      	ldr	r3, [pc, #16]	; (800032c <EXTI_voidIntialize+0x1c>)
 800031c:	f04f 32ff 	mov.w	r2, #4294967295
 8000320:	615a      	str	r2, [r3, #20]


}
 8000322:	bf00      	nop
 8000324:	46bd      	mov	sp, r7
 8000326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800032a:	4770      	bx	lr
 800032c:	40013c00 	.word	0x40013c00

08000330 <EXTI_voidEnableLine>:
void EXTI_voidEnableLine(u8 Copy_u8LineNo)
{
 8000330:	b480      	push	{r7}
 8000332:	b083      	sub	sp, #12
 8000334:	af00      	add	r7, sp, #0
 8000336:	4603      	mov	r3, r0
 8000338:	71fb      	strb	r3, [r7, #7]
/*        Range check    */
	if(Copy_u8LineNo <16)
 800033a:	79fb      	ldrb	r3, [r7, #7]
 800033c:	2b0f      	cmp	r3, #15
 800033e:	d809      	bhi.n	8000354 <EXTI_voidEnableLine+0x24>
	{
		SET_BIT(EXTI -> IMR,Copy_u8LineNo );
 8000340:	4b07      	ldr	r3, [pc, #28]	; (8000360 <EXTI_voidEnableLine+0x30>)
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	79fa      	ldrb	r2, [r7, #7]
 8000346:	2101      	movs	r1, #1
 8000348:	fa01 f202 	lsl.w	r2, r1, r2
 800034c:	4611      	mov	r1, r2
 800034e:	4a04      	ldr	r2, [pc, #16]	; (8000360 <EXTI_voidEnableLine+0x30>)
 8000350:	430b      	orrs	r3, r1
 8000352:	6013      	str	r3, [r2, #0]
	}
}
 8000354:	bf00      	nop
 8000356:	370c      	adds	r7, #12
 8000358:	46bd      	mov	sp, r7
 800035a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035e:	4770      	bx	lr
 8000360:	40013c00 	.word	0x40013c00

08000364 <EXTI_voidDisableLine>:
void EXTI_voidDisableLine(u8 Copy_u8LineNo)
{
 8000364:	b480      	push	{r7}
 8000366:	b083      	sub	sp, #12
 8000368:	af00      	add	r7, sp, #0
 800036a:	4603      	mov	r3, r0
 800036c:	71fb      	strb	r3, [r7, #7]
	/*        Range check    */
	if(Copy_u8LineNo <16)
 800036e:	79fb      	ldrb	r3, [r7, #7]
 8000370:	2b0f      	cmp	r3, #15
 8000372:	d80a      	bhi.n	800038a <EXTI_voidDisableLine+0x26>
	{
		Clear_bit(EXTI ->IMR,Copy_u8LineNo );
 8000374:	4b08      	ldr	r3, [pc, #32]	; (8000398 <EXTI_voidDisableLine+0x34>)
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	79fa      	ldrb	r2, [r7, #7]
 800037a:	2101      	movs	r1, #1
 800037c:	fa01 f202 	lsl.w	r2, r1, r2
 8000380:	43d2      	mvns	r2, r2
 8000382:	4611      	mov	r1, r2
 8000384:	4a04      	ldr	r2, [pc, #16]	; (8000398 <EXTI_voidDisableLine+0x34>)
 8000386:	400b      	ands	r3, r1
 8000388:	6013      	str	r3, [r2, #0]
	}
}
 800038a:	bf00      	nop
 800038c:	370c      	adds	r7, #12
 800038e:	46bd      	mov	sp, r7
 8000390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000394:	4770      	bx	lr
 8000396:	bf00      	nop
 8000398:	40013c00 	.word	0x40013c00

0800039c <EXTI_voidSetSignalLatch>:
void EXTI_voidSoftwareInterruptTrigger(u8 Copy_u8LineNo)
{
	/*task*/
}
void EXTI_voidSetSignalLatch(u8 Copy_u8LineNo , u8 Copy_u8EdgeTrigger)
{
 800039c:	b480      	push	{r7}
 800039e:	b083      	sub	sp, #12
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	4603      	mov	r3, r0
 80003a4:	460a      	mov	r2, r1
 80003a6:	71fb      	strb	r3, [r7, #7]
 80003a8:	4613      	mov	r3, r2
 80003aa:	71bb      	strb	r3, [r7, #6]
	/*        Range check    */
	if(Copy_u8LineNo <16)
 80003ac:	79fb      	ldrb	r3, [r7, #7]
 80003ae:	2b0f      	cmp	r3, #15
 80003b0:	d84a      	bhi.n	8000448 <EXTI_voidSetSignalLatch+0xac>
	{
		switch(Copy_u8EdgeTrigger)
 80003b2:	79bb      	ldrb	r3, [r7, #6]
 80003b4:	2b07      	cmp	r3, #7
 80003b6:	d032      	beq.n	800041e <EXTI_voidSetSignalLatch+0x82>
 80003b8:	2b07      	cmp	r3, #7
 80003ba:	dc46      	bgt.n	800044a <EXTI_voidSetSignalLatch+0xae>
 80003bc:	2b02      	cmp	r3, #2
 80003be:	d002      	beq.n	80003c6 <EXTI_voidSetSignalLatch+0x2a>
 80003c0:	2b05      	cmp	r3, #5
 80003c2:	d016      	beq.n	80003f2 <EXTI_voidSetSignalLatch+0x56>
							    SET_BIT(EXTI -> FTSR ,Copy_u8LineNo);
			break;

		}
	}
}
 80003c4:	e041      	b.n	800044a <EXTI_voidSetSignalLatch+0xae>
			case EXTI_RISING  : SET_BIT(EXTI -> RTSR ,Copy_u8LineNo);
 80003c6:	4b24      	ldr	r3, [pc, #144]	; (8000458 <EXTI_voidSetSignalLatch+0xbc>)
 80003c8:	689b      	ldr	r3, [r3, #8]
 80003ca:	79fa      	ldrb	r2, [r7, #7]
 80003cc:	2101      	movs	r1, #1
 80003ce:	fa01 f202 	lsl.w	r2, r1, r2
 80003d2:	4611      	mov	r1, r2
 80003d4:	4a20      	ldr	r2, [pc, #128]	; (8000458 <EXTI_voidSetSignalLatch+0xbc>)
 80003d6:	430b      	orrs	r3, r1
 80003d8:	6093      	str	r3, [r2, #8]
								Clear_bit(EXTI -> FTSR ,Copy_u8LineNo);
 80003da:	4b1f      	ldr	r3, [pc, #124]	; (8000458 <EXTI_voidSetSignalLatch+0xbc>)
 80003dc:	68db      	ldr	r3, [r3, #12]
 80003de:	79fa      	ldrb	r2, [r7, #7]
 80003e0:	2101      	movs	r1, #1
 80003e2:	fa01 f202 	lsl.w	r2, r1, r2
 80003e6:	43d2      	mvns	r2, r2
 80003e8:	4611      	mov	r1, r2
 80003ea:	4a1b      	ldr	r2, [pc, #108]	; (8000458 <EXTI_voidSetSignalLatch+0xbc>)
 80003ec:	400b      	ands	r3, r1
 80003ee:	60d3      	str	r3, [r2, #12]
			break;
 80003f0:	e02b      	b.n	800044a <EXTI_voidSetSignalLatch+0xae>
			case EXTI_FALLING : SET_BIT(EXTI -> FTSR ,Copy_u8LineNo);
 80003f2:	4b19      	ldr	r3, [pc, #100]	; (8000458 <EXTI_voidSetSignalLatch+0xbc>)
 80003f4:	68db      	ldr	r3, [r3, #12]
 80003f6:	79fa      	ldrb	r2, [r7, #7]
 80003f8:	2101      	movs	r1, #1
 80003fa:	fa01 f202 	lsl.w	r2, r1, r2
 80003fe:	4611      	mov	r1, r2
 8000400:	4a15      	ldr	r2, [pc, #84]	; (8000458 <EXTI_voidSetSignalLatch+0xbc>)
 8000402:	430b      	orrs	r3, r1
 8000404:	60d3      	str	r3, [r2, #12]
								Clear_bit(EXTI -> RTSR ,Copy_u8LineNo);
 8000406:	4b14      	ldr	r3, [pc, #80]	; (8000458 <EXTI_voidSetSignalLatch+0xbc>)
 8000408:	689b      	ldr	r3, [r3, #8]
 800040a:	79fa      	ldrb	r2, [r7, #7]
 800040c:	2101      	movs	r1, #1
 800040e:	fa01 f202 	lsl.w	r2, r1, r2
 8000412:	43d2      	mvns	r2, r2
 8000414:	4611      	mov	r1, r2
 8000416:	4a10      	ldr	r2, [pc, #64]	; (8000458 <EXTI_voidSetSignalLatch+0xbc>)
 8000418:	400b      	ands	r3, r1
 800041a:	6093      	str	r3, [r2, #8]
			break;
 800041c:	e015      	b.n	800044a <EXTI_voidSetSignalLatch+0xae>
			case EXTI_IOC     : SET_BIT(EXTI -> RTSR ,Copy_u8LineNo);
 800041e:	4b0e      	ldr	r3, [pc, #56]	; (8000458 <EXTI_voidSetSignalLatch+0xbc>)
 8000420:	689b      	ldr	r3, [r3, #8]
 8000422:	79fa      	ldrb	r2, [r7, #7]
 8000424:	2101      	movs	r1, #1
 8000426:	fa01 f202 	lsl.w	r2, r1, r2
 800042a:	4611      	mov	r1, r2
 800042c:	4a0a      	ldr	r2, [pc, #40]	; (8000458 <EXTI_voidSetSignalLatch+0xbc>)
 800042e:	430b      	orrs	r3, r1
 8000430:	6093      	str	r3, [r2, #8]
							    SET_BIT(EXTI -> FTSR ,Copy_u8LineNo);
 8000432:	4b09      	ldr	r3, [pc, #36]	; (8000458 <EXTI_voidSetSignalLatch+0xbc>)
 8000434:	68db      	ldr	r3, [r3, #12]
 8000436:	79fa      	ldrb	r2, [r7, #7]
 8000438:	2101      	movs	r1, #1
 800043a:	fa01 f202 	lsl.w	r2, r1, r2
 800043e:	4611      	mov	r1, r2
 8000440:	4a05      	ldr	r2, [pc, #20]	; (8000458 <EXTI_voidSetSignalLatch+0xbc>)
 8000442:	430b      	orrs	r3, r1
 8000444:	60d3      	str	r3, [r2, #12]
			break;
 8000446:	e000      	b.n	800044a <EXTI_voidSetSignalLatch+0xae>
	}
 8000448:	bf00      	nop
}
 800044a:	bf00      	nop
 800044c:	370c      	adds	r7, #12
 800044e:	46bd      	mov	sp, r7
 8000450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000454:	4770      	bx	lr
 8000456:	bf00      	nop
 8000458:	40013c00 	.word	0x40013c00

0800045c <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(void)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	af00      	add	r7, sp, #0
	EXTI_pfCallBack0();
 8000460:	4b05      	ldr	r3, [pc, #20]	; (8000478 <EXTI0_IRQHandler+0x1c>)
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	4798      	blx	r3
	SET_BIT(EXTI-> PR , 0);
 8000466:	4b05      	ldr	r3, [pc, #20]	; (800047c <EXTI0_IRQHandler+0x20>)
 8000468:	695b      	ldr	r3, [r3, #20]
 800046a:	4a04      	ldr	r2, [pc, #16]	; (800047c <EXTI0_IRQHandler+0x20>)
 800046c:	f043 0301 	orr.w	r3, r3, #1
 8000470:	6153      	str	r3, [r2, #20]
}
 8000472:	bf00      	nop
 8000474:	bd80      	pop	{r7, pc}
 8000476:	bf00      	nop
 8000478:	20000020 	.word	0x20000020
 800047c:	40013c00 	.word	0x40013c00

08000480 <EXTI1_IRQHandler>:
void EXTI1_IRQHandler(void)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	af00      	add	r7, sp, #0
	EXTI_pfCallBack1();
 8000484:	4b05      	ldr	r3, [pc, #20]	; (800049c <EXTI1_IRQHandler+0x1c>)
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	4798      	blx	r3
	SET_BIT(EXTI-> PR , 1);
 800048a:	4b05      	ldr	r3, [pc, #20]	; (80004a0 <EXTI1_IRQHandler+0x20>)
 800048c:	695b      	ldr	r3, [r3, #20]
 800048e:	4a04      	ldr	r2, [pc, #16]	; (80004a0 <EXTI1_IRQHandler+0x20>)
 8000490:	f043 0302 	orr.w	r3, r3, #2
 8000494:	6153      	str	r3, [r2, #20]
}
 8000496:	bf00      	nop
 8000498:	bd80      	pop	{r7, pc}
 800049a:	bf00      	nop
 800049c:	20000024 	.word	0x20000024
 80004a0:	40013c00 	.word	0x40013c00

080004a4 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	af00      	add	r7, sp, #0
	EXTI_pfCallBack2();
 80004a8:	4b05      	ldr	r3, [pc, #20]	; (80004c0 <EXTI4_IRQHandler+0x1c>)
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	4798      	blx	r3
	SET_BIT(EXTI-> PR , 4);
 80004ae:	4b05      	ldr	r3, [pc, #20]	; (80004c4 <EXTI4_IRQHandler+0x20>)
 80004b0:	695b      	ldr	r3, [r3, #20]
 80004b2:	4a04      	ldr	r2, [pc, #16]	; (80004c4 <EXTI4_IRQHandler+0x20>)
 80004b4:	f043 0310 	orr.w	r3, r3, #16
 80004b8:	6153      	str	r3, [r2, #20]
}
 80004ba:	bf00      	nop
 80004bc:	bd80      	pop	{r7, pc}
 80004be:	bf00      	nop
 80004c0:	20000028 	.word	0x20000028
 80004c4:	40013c00 	.word	0x40013c00

080004c8 <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
	EXTI_pfCallBack3();
 80004cc:	4b05      	ldr	r3, [pc, #20]	; (80004e4 <EXTI9_5_IRQHandler+0x1c>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	4798      	blx	r3
	SET_BIT(EXTI-> PR , 5);
 80004d2:	4b05      	ldr	r3, [pc, #20]	; (80004e8 <EXTI9_5_IRQHandler+0x20>)
 80004d4:	695b      	ldr	r3, [r3, #20]
 80004d6:	4a04      	ldr	r2, [pc, #16]	; (80004e8 <EXTI9_5_IRQHandler+0x20>)
 80004d8:	f043 0320 	orr.w	r3, r3, #32
 80004dc:	6153      	str	r3, [r2, #20]
}
 80004de:	bf00      	nop
 80004e0:	bd80      	pop	{r7, pc}
 80004e2:	bf00      	nop
 80004e4:	2000002c 	.word	0x2000002c
 80004e8:	40013c00 	.word	0x40013c00

080004ec <EXTI_voidSetCallBack>:

void EXTI_voidSetCallBack(void(*pf)(void)/* 0x55*/,void(*pf1)(void)/* 0x55*/,void(*pf2)(void)/* 0x55*/,void(*pf3)(void)/* 0x55*/)
{
 80004ec:	b480      	push	{r7}
 80004ee:	b085      	sub	sp, #20
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	60f8      	str	r0, [r7, #12]
 80004f4:	60b9      	str	r1, [r7, #8]
 80004f6:	607a      	str	r2, [r7, #4]
 80004f8:	603b      	str	r3, [r7, #0]
	if (pf != NULL && pf1 != NULL && pf2 != NULL && pf3 != NULL)
 80004fa:	68fb      	ldr	r3, [r7, #12]
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d014      	beq.n	800052a <EXTI_voidSetCallBack+0x3e>
 8000500:	68bb      	ldr	r3, [r7, #8]
 8000502:	2b00      	cmp	r3, #0
 8000504:	d011      	beq.n	800052a <EXTI_voidSetCallBack+0x3e>
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	2b00      	cmp	r3, #0
 800050a:	d00e      	beq.n	800052a <EXTI_voidSetCallBack+0x3e>
 800050c:	683b      	ldr	r3, [r7, #0]
 800050e:	2b00      	cmp	r3, #0
 8000510:	d00b      	beq.n	800052a <EXTI_voidSetCallBack+0x3e>
	{
		EXTI_pfCallBack0= pf;
 8000512:	4a09      	ldr	r2, [pc, #36]	; (8000538 <EXTI_voidSetCallBack+0x4c>)
 8000514:	68fb      	ldr	r3, [r7, #12]
 8000516:	6013      	str	r3, [r2, #0]
		EXTI_pfCallBack1= pf1;
 8000518:	4a08      	ldr	r2, [pc, #32]	; (800053c <EXTI_voidSetCallBack+0x50>)
 800051a:	68bb      	ldr	r3, [r7, #8]
 800051c:	6013      	str	r3, [r2, #0]
		EXTI_pfCallBack2= pf2;
 800051e:	4a08      	ldr	r2, [pc, #32]	; (8000540 <EXTI_voidSetCallBack+0x54>)
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	6013      	str	r3, [r2, #0]
		EXTI_pfCallBack3= pf3;
 8000524:	4a07      	ldr	r2, [pc, #28]	; (8000544 <EXTI_voidSetCallBack+0x58>)
 8000526:	683b      	ldr	r3, [r7, #0]
 8000528:	6013      	str	r3, [r2, #0]
	}
}
 800052a:	bf00      	nop
 800052c:	3714      	adds	r7, #20
 800052e:	46bd      	mov	sp, r7
 8000530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop
 8000538:	20000020 	.word	0x20000020
 800053c:	20000024 	.word	0x20000024
 8000540:	20000028 	.word	0x20000028
 8000544:	2000002c 	.word	0x2000002c

08000548 <GPIO_void_setPin_Direction>:
#include "RCC_PRIVATE.h"
#include "GPIO_Config.h"
#include "GPIO_Interface.h"
#include "BIT_MATH.h"
void GPIO_void_setPin_Direction(PORT_ID port , PIN_ID pin , DIRECTION_MODE Direction)
{
 8000548:	b480      	push	{r7}
 800054a:	b083      	sub	sp, #12
 800054c:	af00      	add	r7, sp, #0
 800054e:	4603      	mov	r3, r0
 8000550:	71fb      	strb	r3, [r7, #7]
 8000552:	460b      	mov	r3, r1
 8000554:	71bb      	strb	r3, [r7, #6]
 8000556:	4613      	mov	r3, r2
 8000558:	717b      	strb	r3, [r7, #5]
	switch(port)
 800055a:	79fb      	ldrb	r3, [r7, #7]
 800055c:	2b05      	cmp	r3, #5
 800055e:	f200 82d9 	bhi.w	8000b14 <GPIO_void_setPin_Direction+0x5cc>
 8000562:	a201      	add	r2, pc, #4	; (adr r2, 8000568 <GPIO_void_setPin_Direction+0x20>)
 8000564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000568:	08000581 	.word	0x08000581
 800056c:	0800066b 	.word	0x0800066b
 8000570:	08000753 	.word	0x08000753
 8000574:	0800083b 	.word	0x0800083b
 8000578:	0800092f 	.word	0x0800092f
 800057c:	08000a17 	.word	0x08000a17
	{
	case PORT_A:
		switch(Direction)
 8000580:	797b      	ldrb	r3, [r7, #5]
 8000582:	2b03      	cmp	r3, #3
 8000584:	f200 82bb 	bhi.w	8000afe <GPIO_void_setPin_Direction+0x5b6>
 8000588:	a201      	add	r2, pc, #4	; (adr r2, 8000590 <GPIO_void_setPin_Direction+0x48>)
 800058a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800058e:	bf00      	nop
 8000590:	080005a1 	.word	0x080005a1
 8000594:	080005d5 	.word	0x080005d5
 8000598:	08000607 	.word	0x08000607
 800059c:	08000639 	.word	0x08000639
		{
		case INPUT_MODE:Clear_bit(GPIOA_MODER,pin*2);Clear_bit(GPIOA_MODER,(pin*2+1));break;
 80005a0:	4bad      	ldr	r3, [pc, #692]	; (8000858 <GPIO_void_setPin_Direction+0x310>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	79ba      	ldrb	r2, [r7, #6]
 80005a6:	0052      	lsls	r2, r2, #1
 80005a8:	2101      	movs	r1, #1
 80005aa:	fa01 f202 	lsl.w	r2, r1, r2
 80005ae:	43d2      	mvns	r2, r2
 80005b0:	4611      	mov	r1, r2
 80005b2:	4aa9      	ldr	r2, [pc, #676]	; (8000858 <GPIO_void_setPin_Direction+0x310>)
 80005b4:	400b      	ands	r3, r1
 80005b6:	6013      	str	r3, [r2, #0]
 80005b8:	4ba7      	ldr	r3, [pc, #668]	; (8000858 <GPIO_void_setPin_Direction+0x310>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	79ba      	ldrb	r2, [r7, #6]
 80005be:	0052      	lsls	r2, r2, #1
 80005c0:	3201      	adds	r2, #1
 80005c2:	2101      	movs	r1, #1
 80005c4:	fa01 f202 	lsl.w	r2, r1, r2
 80005c8:	43d2      	mvns	r2, r2
 80005ca:	4611      	mov	r1, r2
 80005cc:	4aa2      	ldr	r2, [pc, #648]	; (8000858 <GPIO_void_setPin_Direction+0x310>)
 80005ce:	400b      	ands	r3, r1
 80005d0:	6013      	str	r3, [r2, #0]
 80005d2:	e049      	b.n	8000668 <GPIO_void_setPin_Direction+0x120>
		case GENERAL_PURPOSE_OUTPUT_MODE:SET_BIT(GPIOA_MODER,pin*2);Clear_bit(GPIOA_MODER,(pin*2+1));
 80005d4:	4ba0      	ldr	r3, [pc, #640]	; (8000858 <GPIO_void_setPin_Direction+0x310>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	79ba      	ldrb	r2, [r7, #6]
 80005da:	0052      	lsls	r2, r2, #1
 80005dc:	2101      	movs	r1, #1
 80005de:	fa01 f202 	lsl.w	r2, r1, r2
 80005e2:	4611      	mov	r1, r2
 80005e4:	4a9c      	ldr	r2, [pc, #624]	; (8000858 <GPIO_void_setPin_Direction+0x310>)
 80005e6:	430b      	orrs	r3, r1
 80005e8:	6013      	str	r3, [r2, #0]
 80005ea:	4b9b      	ldr	r3, [pc, #620]	; (8000858 <GPIO_void_setPin_Direction+0x310>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	79ba      	ldrb	r2, [r7, #6]
 80005f0:	0052      	lsls	r2, r2, #1
 80005f2:	3201      	adds	r2, #1
 80005f4:	2101      	movs	r1, #1
 80005f6:	fa01 f202 	lsl.w	r2, r1, r2
 80005fa:	43d2      	mvns	r2, r2
 80005fc:	4611      	mov	r1, r2
 80005fe:	4a96      	ldr	r2, [pc, #600]	; (8000858 <GPIO_void_setPin_Direction+0x310>)
 8000600:	400b      	ands	r3, r1
 8000602:	6013      	str	r3, [r2, #0]
		break;
 8000604:	e030      	b.n	8000668 <GPIO_void_setPin_Direction+0x120>
		case ALTERNATIVE_FUNCTION_MODE:Clear_bit(GPIOA_MODER,pin*2);SET_BIT(GPIOA_MODER,(pin*2+1));break;
 8000606:	4b94      	ldr	r3, [pc, #592]	; (8000858 <GPIO_void_setPin_Direction+0x310>)
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	79ba      	ldrb	r2, [r7, #6]
 800060c:	0052      	lsls	r2, r2, #1
 800060e:	2101      	movs	r1, #1
 8000610:	fa01 f202 	lsl.w	r2, r1, r2
 8000614:	43d2      	mvns	r2, r2
 8000616:	4611      	mov	r1, r2
 8000618:	4a8f      	ldr	r2, [pc, #572]	; (8000858 <GPIO_void_setPin_Direction+0x310>)
 800061a:	400b      	ands	r3, r1
 800061c:	6013      	str	r3, [r2, #0]
 800061e:	4b8e      	ldr	r3, [pc, #568]	; (8000858 <GPIO_void_setPin_Direction+0x310>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	79ba      	ldrb	r2, [r7, #6]
 8000624:	0052      	lsls	r2, r2, #1
 8000626:	3201      	adds	r2, #1
 8000628:	2101      	movs	r1, #1
 800062a:	fa01 f202 	lsl.w	r2, r1, r2
 800062e:	4611      	mov	r1, r2
 8000630:	4a89      	ldr	r2, [pc, #548]	; (8000858 <GPIO_void_setPin_Direction+0x310>)
 8000632:	430b      	orrs	r3, r1
 8000634:	6013      	str	r3, [r2, #0]
 8000636:	e017      	b.n	8000668 <GPIO_void_setPin_Direction+0x120>
		case ANALOG_MODE:SET_BIT(GPIOA_MODER,pin*2);SET_BIT(GPIOA_MODER,(pin*2+1));break;
 8000638:	4b87      	ldr	r3, [pc, #540]	; (8000858 <GPIO_void_setPin_Direction+0x310>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	79ba      	ldrb	r2, [r7, #6]
 800063e:	0052      	lsls	r2, r2, #1
 8000640:	2101      	movs	r1, #1
 8000642:	fa01 f202 	lsl.w	r2, r1, r2
 8000646:	4611      	mov	r1, r2
 8000648:	4a83      	ldr	r2, [pc, #524]	; (8000858 <GPIO_void_setPin_Direction+0x310>)
 800064a:	430b      	orrs	r3, r1
 800064c:	6013      	str	r3, [r2, #0]
 800064e:	4b82      	ldr	r3, [pc, #520]	; (8000858 <GPIO_void_setPin_Direction+0x310>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	79ba      	ldrb	r2, [r7, #6]
 8000654:	0052      	lsls	r2, r2, #1
 8000656:	3201      	adds	r2, #1
 8000658:	2101      	movs	r1, #1
 800065a:	fa01 f202 	lsl.w	r2, r1, r2
 800065e:	4611      	mov	r1, r2
 8000660:	4a7d      	ldr	r2, [pc, #500]	; (8000858 <GPIO_void_setPin_Direction+0x310>)
 8000662:	430b      	orrs	r3, r1
 8000664:	6013      	str	r3, [r2, #0]
 8000666:	bf00      	nop
		}
	break;
 8000668:	e249      	b.n	8000afe <GPIO_void_setPin_Direction+0x5b6>

	case PORT_B:
		switch(Direction)
 800066a:	797b      	ldrb	r3, [r7, #5]
 800066c:	2b03      	cmp	r3, #3
 800066e:	f200 8248 	bhi.w	8000b02 <GPIO_void_setPin_Direction+0x5ba>
 8000672:	a201      	add	r2, pc, #4	; (adr r2, 8000678 <GPIO_void_setPin_Direction+0x130>)
 8000674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000678:	08000689 	.word	0x08000689
 800067c:	080006bd 	.word	0x080006bd
 8000680:	080006ef 	.word	0x080006ef
 8000684:	08000721 	.word	0x08000721
		{
		case INPUT_MODE:Clear_bit(GPIOB_MODER,pin*2);Clear_bit(GPIOB_MODER,(pin*2+1));break;
 8000688:	4b74      	ldr	r3, [pc, #464]	; (800085c <GPIO_void_setPin_Direction+0x314>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	79ba      	ldrb	r2, [r7, #6]
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	2101      	movs	r1, #1
 8000692:	fa01 f202 	lsl.w	r2, r1, r2
 8000696:	43d2      	mvns	r2, r2
 8000698:	4611      	mov	r1, r2
 800069a:	4a70      	ldr	r2, [pc, #448]	; (800085c <GPIO_void_setPin_Direction+0x314>)
 800069c:	400b      	ands	r3, r1
 800069e:	6013      	str	r3, [r2, #0]
 80006a0:	4b6e      	ldr	r3, [pc, #440]	; (800085c <GPIO_void_setPin_Direction+0x314>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	79ba      	ldrb	r2, [r7, #6]
 80006a6:	0052      	lsls	r2, r2, #1
 80006a8:	3201      	adds	r2, #1
 80006aa:	2101      	movs	r1, #1
 80006ac:	fa01 f202 	lsl.w	r2, r1, r2
 80006b0:	43d2      	mvns	r2, r2
 80006b2:	4611      	mov	r1, r2
 80006b4:	4a69      	ldr	r2, [pc, #420]	; (800085c <GPIO_void_setPin_Direction+0x314>)
 80006b6:	400b      	ands	r3, r1
 80006b8:	6013      	str	r3, [r2, #0]
 80006ba:	e049      	b.n	8000750 <GPIO_void_setPin_Direction+0x208>
		case GENERAL_PURPOSE_OUTPUT_MODE:SET_BIT(GPIOB_MODER,pin*2);Clear_bit(GPIOB_MODER,(pin*2+1));
 80006bc:	4b67      	ldr	r3, [pc, #412]	; (800085c <GPIO_void_setPin_Direction+0x314>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	79ba      	ldrb	r2, [r7, #6]
 80006c2:	0052      	lsls	r2, r2, #1
 80006c4:	2101      	movs	r1, #1
 80006c6:	fa01 f202 	lsl.w	r2, r1, r2
 80006ca:	4611      	mov	r1, r2
 80006cc:	4a63      	ldr	r2, [pc, #396]	; (800085c <GPIO_void_setPin_Direction+0x314>)
 80006ce:	430b      	orrs	r3, r1
 80006d0:	6013      	str	r3, [r2, #0]
 80006d2:	4b62      	ldr	r3, [pc, #392]	; (800085c <GPIO_void_setPin_Direction+0x314>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	79ba      	ldrb	r2, [r7, #6]
 80006d8:	0052      	lsls	r2, r2, #1
 80006da:	3201      	adds	r2, #1
 80006dc:	2101      	movs	r1, #1
 80006de:	fa01 f202 	lsl.w	r2, r1, r2
 80006e2:	43d2      	mvns	r2, r2
 80006e4:	4611      	mov	r1, r2
 80006e6:	4a5d      	ldr	r2, [pc, #372]	; (800085c <GPIO_void_setPin_Direction+0x314>)
 80006e8:	400b      	ands	r3, r1
 80006ea:	6013      	str	r3, [r2, #0]
		break;
 80006ec:	e030      	b.n	8000750 <GPIO_void_setPin_Direction+0x208>
		case ALTERNATIVE_FUNCTION_MODE:Clear_bit(GPIOB_MODER,pin*2);SET_BIT(GPIOB_MODER,(pin*2+1));break;
 80006ee:	4b5b      	ldr	r3, [pc, #364]	; (800085c <GPIO_void_setPin_Direction+0x314>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	79ba      	ldrb	r2, [r7, #6]
 80006f4:	0052      	lsls	r2, r2, #1
 80006f6:	2101      	movs	r1, #1
 80006f8:	fa01 f202 	lsl.w	r2, r1, r2
 80006fc:	43d2      	mvns	r2, r2
 80006fe:	4611      	mov	r1, r2
 8000700:	4a56      	ldr	r2, [pc, #344]	; (800085c <GPIO_void_setPin_Direction+0x314>)
 8000702:	400b      	ands	r3, r1
 8000704:	6013      	str	r3, [r2, #0]
 8000706:	4b55      	ldr	r3, [pc, #340]	; (800085c <GPIO_void_setPin_Direction+0x314>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	79ba      	ldrb	r2, [r7, #6]
 800070c:	0052      	lsls	r2, r2, #1
 800070e:	3201      	adds	r2, #1
 8000710:	2101      	movs	r1, #1
 8000712:	fa01 f202 	lsl.w	r2, r1, r2
 8000716:	4611      	mov	r1, r2
 8000718:	4a50      	ldr	r2, [pc, #320]	; (800085c <GPIO_void_setPin_Direction+0x314>)
 800071a:	430b      	orrs	r3, r1
 800071c:	6013      	str	r3, [r2, #0]
 800071e:	e017      	b.n	8000750 <GPIO_void_setPin_Direction+0x208>
		case ANALOG_MODE:SET_BIT(GPIOB_MODER,pin*2);SET_BIT(GPIOB_MODER,(pin*2+1));break;
 8000720:	4b4e      	ldr	r3, [pc, #312]	; (800085c <GPIO_void_setPin_Direction+0x314>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	79ba      	ldrb	r2, [r7, #6]
 8000726:	0052      	lsls	r2, r2, #1
 8000728:	2101      	movs	r1, #1
 800072a:	fa01 f202 	lsl.w	r2, r1, r2
 800072e:	4611      	mov	r1, r2
 8000730:	4a4a      	ldr	r2, [pc, #296]	; (800085c <GPIO_void_setPin_Direction+0x314>)
 8000732:	430b      	orrs	r3, r1
 8000734:	6013      	str	r3, [r2, #0]
 8000736:	4b49      	ldr	r3, [pc, #292]	; (800085c <GPIO_void_setPin_Direction+0x314>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	79ba      	ldrb	r2, [r7, #6]
 800073c:	0052      	lsls	r2, r2, #1
 800073e:	3201      	adds	r2, #1
 8000740:	2101      	movs	r1, #1
 8000742:	fa01 f202 	lsl.w	r2, r1, r2
 8000746:	4611      	mov	r1, r2
 8000748:	4a44      	ldr	r2, [pc, #272]	; (800085c <GPIO_void_setPin_Direction+0x314>)
 800074a:	430b      	orrs	r3, r1
 800074c:	6013      	str	r3, [r2, #0]
 800074e:	bf00      	nop
		}
	break;
 8000750:	e1d7      	b.n	8000b02 <GPIO_void_setPin_Direction+0x5ba>

	case PORT_C:
		switch(Direction)
 8000752:	797b      	ldrb	r3, [r7, #5]
 8000754:	2b03      	cmp	r3, #3
 8000756:	f200 81d6 	bhi.w	8000b06 <GPIO_void_setPin_Direction+0x5be>
 800075a:	a201      	add	r2, pc, #4	; (adr r2, 8000760 <GPIO_void_setPin_Direction+0x218>)
 800075c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000760:	08000771 	.word	0x08000771
 8000764:	080007a5 	.word	0x080007a5
 8000768:	080007d7 	.word	0x080007d7
 800076c:	08000809 	.word	0x08000809
		{
		case INPUT_MODE:Clear_bit(GPIOC_MODER,pin*2);Clear_bit(GPIOC_MODER,(pin*2+1));break;
 8000770:	4b3b      	ldr	r3, [pc, #236]	; (8000860 <GPIO_void_setPin_Direction+0x318>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	79ba      	ldrb	r2, [r7, #6]
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	2101      	movs	r1, #1
 800077a:	fa01 f202 	lsl.w	r2, r1, r2
 800077e:	43d2      	mvns	r2, r2
 8000780:	4611      	mov	r1, r2
 8000782:	4a37      	ldr	r2, [pc, #220]	; (8000860 <GPIO_void_setPin_Direction+0x318>)
 8000784:	400b      	ands	r3, r1
 8000786:	6013      	str	r3, [r2, #0]
 8000788:	4b35      	ldr	r3, [pc, #212]	; (8000860 <GPIO_void_setPin_Direction+0x318>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	79ba      	ldrb	r2, [r7, #6]
 800078e:	0052      	lsls	r2, r2, #1
 8000790:	3201      	adds	r2, #1
 8000792:	2101      	movs	r1, #1
 8000794:	fa01 f202 	lsl.w	r2, r1, r2
 8000798:	43d2      	mvns	r2, r2
 800079a:	4611      	mov	r1, r2
 800079c:	4a30      	ldr	r2, [pc, #192]	; (8000860 <GPIO_void_setPin_Direction+0x318>)
 800079e:	400b      	ands	r3, r1
 80007a0:	6013      	str	r3, [r2, #0]
 80007a2:	e049      	b.n	8000838 <GPIO_void_setPin_Direction+0x2f0>
		case GENERAL_PURPOSE_OUTPUT_MODE:SET_BIT(GPIOC_MODER,pin*2);Clear_bit(GPIOC_MODER,(pin*2+1));
 80007a4:	4b2e      	ldr	r3, [pc, #184]	; (8000860 <GPIO_void_setPin_Direction+0x318>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	79ba      	ldrb	r2, [r7, #6]
 80007aa:	0052      	lsls	r2, r2, #1
 80007ac:	2101      	movs	r1, #1
 80007ae:	fa01 f202 	lsl.w	r2, r1, r2
 80007b2:	4611      	mov	r1, r2
 80007b4:	4a2a      	ldr	r2, [pc, #168]	; (8000860 <GPIO_void_setPin_Direction+0x318>)
 80007b6:	430b      	orrs	r3, r1
 80007b8:	6013      	str	r3, [r2, #0]
 80007ba:	4b29      	ldr	r3, [pc, #164]	; (8000860 <GPIO_void_setPin_Direction+0x318>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	79ba      	ldrb	r2, [r7, #6]
 80007c0:	0052      	lsls	r2, r2, #1
 80007c2:	3201      	adds	r2, #1
 80007c4:	2101      	movs	r1, #1
 80007c6:	fa01 f202 	lsl.w	r2, r1, r2
 80007ca:	43d2      	mvns	r2, r2
 80007cc:	4611      	mov	r1, r2
 80007ce:	4a24      	ldr	r2, [pc, #144]	; (8000860 <GPIO_void_setPin_Direction+0x318>)
 80007d0:	400b      	ands	r3, r1
 80007d2:	6013      	str	r3, [r2, #0]
		break;
 80007d4:	e030      	b.n	8000838 <GPIO_void_setPin_Direction+0x2f0>
		case ALTERNATIVE_FUNCTION_MODE:Clear_bit(GPIOC_MODER,pin*2);SET_BIT(GPIOC_MODER,(pin*2+1));break;
 80007d6:	4b22      	ldr	r3, [pc, #136]	; (8000860 <GPIO_void_setPin_Direction+0x318>)
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	79ba      	ldrb	r2, [r7, #6]
 80007dc:	0052      	lsls	r2, r2, #1
 80007de:	2101      	movs	r1, #1
 80007e0:	fa01 f202 	lsl.w	r2, r1, r2
 80007e4:	43d2      	mvns	r2, r2
 80007e6:	4611      	mov	r1, r2
 80007e8:	4a1d      	ldr	r2, [pc, #116]	; (8000860 <GPIO_void_setPin_Direction+0x318>)
 80007ea:	400b      	ands	r3, r1
 80007ec:	6013      	str	r3, [r2, #0]
 80007ee:	4b1c      	ldr	r3, [pc, #112]	; (8000860 <GPIO_void_setPin_Direction+0x318>)
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	79ba      	ldrb	r2, [r7, #6]
 80007f4:	0052      	lsls	r2, r2, #1
 80007f6:	3201      	adds	r2, #1
 80007f8:	2101      	movs	r1, #1
 80007fa:	fa01 f202 	lsl.w	r2, r1, r2
 80007fe:	4611      	mov	r1, r2
 8000800:	4a17      	ldr	r2, [pc, #92]	; (8000860 <GPIO_void_setPin_Direction+0x318>)
 8000802:	430b      	orrs	r3, r1
 8000804:	6013      	str	r3, [r2, #0]
 8000806:	e017      	b.n	8000838 <GPIO_void_setPin_Direction+0x2f0>
		case ANALOG_MODE:SET_BIT(GPIOC_MODER,pin*2);SET_BIT(GPIOC_MODER,(pin*2+1));break;
 8000808:	4b15      	ldr	r3, [pc, #84]	; (8000860 <GPIO_void_setPin_Direction+0x318>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	79ba      	ldrb	r2, [r7, #6]
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	2101      	movs	r1, #1
 8000812:	fa01 f202 	lsl.w	r2, r1, r2
 8000816:	4611      	mov	r1, r2
 8000818:	4a11      	ldr	r2, [pc, #68]	; (8000860 <GPIO_void_setPin_Direction+0x318>)
 800081a:	430b      	orrs	r3, r1
 800081c:	6013      	str	r3, [r2, #0]
 800081e:	4b10      	ldr	r3, [pc, #64]	; (8000860 <GPIO_void_setPin_Direction+0x318>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	79ba      	ldrb	r2, [r7, #6]
 8000824:	0052      	lsls	r2, r2, #1
 8000826:	3201      	adds	r2, #1
 8000828:	2101      	movs	r1, #1
 800082a:	fa01 f202 	lsl.w	r2, r1, r2
 800082e:	4611      	mov	r1, r2
 8000830:	4a0b      	ldr	r2, [pc, #44]	; (8000860 <GPIO_void_setPin_Direction+0x318>)
 8000832:	430b      	orrs	r3, r1
 8000834:	6013      	str	r3, [r2, #0]
 8000836:	bf00      	nop
		}
	break;
 8000838:	e165      	b.n	8000b06 <GPIO_void_setPin_Direction+0x5be>

	case PORT_D:
		switch(Direction)
 800083a:	797b      	ldrb	r3, [r7, #5]
 800083c:	2b03      	cmp	r3, #3
 800083e:	f200 8164 	bhi.w	8000b0a <GPIO_void_setPin_Direction+0x5c2>
 8000842:	a201      	add	r2, pc, #4	; (adr r2, 8000848 <GPIO_void_setPin_Direction+0x300>)
 8000844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000848:	08000865 	.word	0x08000865
 800084c:	08000899 	.word	0x08000899
 8000850:	080008cb 	.word	0x080008cb
 8000854:	080008fd 	.word	0x080008fd
 8000858:	40020000 	.word	0x40020000
 800085c:	40020400 	.word	0x40020400
 8000860:	40020800 	.word	0x40020800
		{
		case INPUT_MODE:Clear_bit(GPIOD_MODER,pin*2);Clear_bit(GPIOD_MODER,(pin*2+1));break;
 8000864:	4bae      	ldr	r3, [pc, #696]	; (8000b20 <GPIO_void_setPin_Direction+0x5d8>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	79ba      	ldrb	r2, [r7, #6]
 800086a:	0052      	lsls	r2, r2, #1
 800086c:	2101      	movs	r1, #1
 800086e:	fa01 f202 	lsl.w	r2, r1, r2
 8000872:	43d2      	mvns	r2, r2
 8000874:	4611      	mov	r1, r2
 8000876:	4aaa      	ldr	r2, [pc, #680]	; (8000b20 <GPIO_void_setPin_Direction+0x5d8>)
 8000878:	400b      	ands	r3, r1
 800087a:	6013      	str	r3, [r2, #0]
 800087c:	4ba8      	ldr	r3, [pc, #672]	; (8000b20 <GPIO_void_setPin_Direction+0x5d8>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	79ba      	ldrb	r2, [r7, #6]
 8000882:	0052      	lsls	r2, r2, #1
 8000884:	3201      	adds	r2, #1
 8000886:	2101      	movs	r1, #1
 8000888:	fa01 f202 	lsl.w	r2, r1, r2
 800088c:	43d2      	mvns	r2, r2
 800088e:	4611      	mov	r1, r2
 8000890:	4aa3      	ldr	r2, [pc, #652]	; (8000b20 <GPIO_void_setPin_Direction+0x5d8>)
 8000892:	400b      	ands	r3, r1
 8000894:	6013      	str	r3, [r2, #0]
 8000896:	e049      	b.n	800092c <GPIO_void_setPin_Direction+0x3e4>
		case GENERAL_PURPOSE_OUTPUT_MODE:SET_BIT(GPIOD_MODER,pin*2);Clear_bit(GPIOD_MODER,(pin*2+1));
 8000898:	4ba1      	ldr	r3, [pc, #644]	; (8000b20 <GPIO_void_setPin_Direction+0x5d8>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	79ba      	ldrb	r2, [r7, #6]
 800089e:	0052      	lsls	r2, r2, #1
 80008a0:	2101      	movs	r1, #1
 80008a2:	fa01 f202 	lsl.w	r2, r1, r2
 80008a6:	4611      	mov	r1, r2
 80008a8:	4a9d      	ldr	r2, [pc, #628]	; (8000b20 <GPIO_void_setPin_Direction+0x5d8>)
 80008aa:	430b      	orrs	r3, r1
 80008ac:	6013      	str	r3, [r2, #0]
 80008ae:	4b9c      	ldr	r3, [pc, #624]	; (8000b20 <GPIO_void_setPin_Direction+0x5d8>)
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	79ba      	ldrb	r2, [r7, #6]
 80008b4:	0052      	lsls	r2, r2, #1
 80008b6:	3201      	adds	r2, #1
 80008b8:	2101      	movs	r1, #1
 80008ba:	fa01 f202 	lsl.w	r2, r1, r2
 80008be:	43d2      	mvns	r2, r2
 80008c0:	4611      	mov	r1, r2
 80008c2:	4a97      	ldr	r2, [pc, #604]	; (8000b20 <GPIO_void_setPin_Direction+0x5d8>)
 80008c4:	400b      	ands	r3, r1
 80008c6:	6013      	str	r3, [r2, #0]
		break;
 80008c8:	e030      	b.n	800092c <GPIO_void_setPin_Direction+0x3e4>
		case ALTERNATIVE_FUNCTION_MODE:Clear_bit(GPIOD_MODER,pin*2);SET_BIT(GPIOD_MODER,(pin*2+1));break;
 80008ca:	4b95      	ldr	r3, [pc, #596]	; (8000b20 <GPIO_void_setPin_Direction+0x5d8>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	79ba      	ldrb	r2, [r7, #6]
 80008d0:	0052      	lsls	r2, r2, #1
 80008d2:	2101      	movs	r1, #1
 80008d4:	fa01 f202 	lsl.w	r2, r1, r2
 80008d8:	43d2      	mvns	r2, r2
 80008da:	4611      	mov	r1, r2
 80008dc:	4a90      	ldr	r2, [pc, #576]	; (8000b20 <GPIO_void_setPin_Direction+0x5d8>)
 80008de:	400b      	ands	r3, r1
 80008e0:	6013      	str	r3, [r2, #0]
 80008e2:	4b8f      	ldr	r3, [pc, #572]	; (8000b20 <GPIO_void_setPin_Direction+0x5d8>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	79ba      	ldrb	r2, [r7, #6]
 80008e8:	0052      	lsls	r2, r2, #1
 80008ea:	3201      	adds	r2, #1
 80008ec:	2101      	movs	r1, #1
 80008ee:	fa01 f202 	lsl.w	r2, r1, r2
 80008f2:	4611      	mov	r1, r2
 80008f4:	4a8a      	ldr	r2, [pc, #552]	; (8000b20 <GPIO_void_setPin_Direction+0x5d8>)
 80008f6:	430b      	orrs	r3, r1
 80008f8:	6013      	str	r3, [r2, #0]
 80008fa:	e017      	b.n	800092c <GPIO_void_setPin_Direction+0x3e4>
		case ANALOG_MODE:SET_BIT(GPIOD_MODER,pin*2);SET_BIT(GPIOD_MODER,(pin*2+1));break;
 80008fc:	4b88      	ldr	r3, [pc, #544]	; (8000b20 <GPIO_void_setPin_Direction+0x5d8>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	79ba      	ldrb	r2, [r7, #6]
 8000902:	0052      	lsls	r2, r2, #1
 8000904:	2101      	movs	r1, #1
 8000906:	fa01 f202 	lsl.w	r2, r1, r2
 800090a:	4611      	mov	r1, r2
 800090c:	4a84      	ldr	r2, [pc, #528]	; (8000b20 <GPIO_void_setPin_Direction+0x5d8>)
 800090e:	430b      	orrs	r3, r1
 8000910:	6013      	str	r3, [r2, #0]
 8000912:	4b83      	ldr	r3, [pc, #524]	; (8000b20 <GPIO_void_setPin_Direction+0x5d8>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	79ba      	ldrb	r2, [r7, #6]
 8000918:	0052      	lsls	r2, r2, #1
 800091a:	3201      	adds	r2, #1
 800091c:	2101      	movs	r1, #1
 800091e:	fa01 f202 	lsl.w	r2, r1, r2
 8000922:	4611      	mov	r1, r2
 8000924:	4a7e      	ldr	r2, [pc, #504]	; (8000b20 <GPIO_void_setPin_Direction+0x5d8>)
 8000926:	430b      	orrs	r3, r1
 8000928:	6013      	str	r3, [r2, #0]
 800092a:	bf00      	nop
		}
	break;
 800092c:	e0ed      	b.n	8000b0a <GPIO_void_setPin_Direction+0x5c2>

	case PORT_E:
		switch(Direction)
 800092e:	797b      	ldrb	r3, [r7, #5]
 8000930:	2b03      	cmp	r3, #3
 8000932:	f200 80ec 	bhi.w	8000b0e <GPIO_void_setPin_Direction+0x5c6>
 8000936:	a201      	add	r2, pc, #4	; (adr r2, 800093c <GPIO_void_setPin_Direction+0x3f4>)
 8000938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800093c:	0800094d 	.word	0x0800094d
 8000940:	08000981 	.word	0x08000981
 8000944:	080009b3 	.word	0x080009b3
 8000948:	080009e5 	.word	0x080009e5
		{
		case INPUT_MODE:Clear_bit(GPIOE_MODER,pin*2);Clear_bit(GPIOE_MODER,(pin*2+1));break;
 800094c:	4b75      	ldr	r3, [pc, #468]	; (8000b24 <GPIO_void_setPin_Direction+0x5dc>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	79ba      	ldrb	r2, [r7, #6]
 8000952:	0052      	lsls	r2, r2, #1
 8000954:	2101      	movs	r1, #1
 8000956:	fa01 f202 	lsl.w	r2, r1, r2
 800095a:	43d2      	mvns	r2, r2
 800095c:	4611      	mov	r1, r2
 800095e:	4a71      	ldr	r2, [pc, #452]	; (8000b24 <GPIO_void_setPin_Direction+0x5dc>)
 8000960:	400b      	ands	r3, r1
 8000962:	6013      	str	r3, [r2, #0]
 8000964:	4b6f      	ldr	r3, [pc, #444]	; (8000b24 <GPIO_void_setPin_Direction+0x5dc>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	79ba      	ldrb	r2, [r7, #6]
 800096a:	0052      	lsls	r2, r2, #1
 800096c:	3201      	adds	r2, #1
 800096e:	2101      	movs	r1, #1
 8000970:	fa01 f202 	lsl.w	r2, r1, r2
 8000974:	43d2      	mvns	r2, r2
 8000976:	4611      	mov	r1, r2
 8000978:	4a6a      	ldr	r2, [pc, #424]	; (8000b24 <GPIO_void_setPin_Direction+0x5dc>)
 800097a:	400b      	ands	r3, r1
 800097c:	6013      	str	r3, [r2, #0]
 800097e:	e049      	b.n	8000a14 <GPIO_void_setPin_Direction+0x4cc>
		case GENERAL_PURPOSE_OUTPUT_MODE:SET_BIT(GPIOE_MODER,pin*2);Clear_bit(GPIOE_MODER,(pin*2+1));
 8000980:	4b68      	ldr	r3, [pc, #416]	; (8000b24 <GPIO_void_setPin_Direction+0x5dc>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	79ba      	ldrb	r2, [r7, #6]
 8000986:	0052      	lsls	r2, r2, #1
 8000988:	2101      	movs	r1, #1
 800098a:	fa01 f202 	lsl.w	r2, r1, r2
 800098e:	4611      	mov	r1, r2
 8000990:	4a64      	ldr	r2, [pc, #400]	; (8000b24 <GPIO_void_setPin_Direction+0x5dc>)
 8000992:	430b      	orrs	r3, r1
 8000994:	6013      	str	r3, [r2, #0]
 8000996:	4b63      	ldr	r3, [pc, #396]	; (8000b24 <GPIO_void_setPin_Direction+0x5dc>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	79ba      	ldrb	r2, [r7, #6]
 800099c:	0052      	lsls	r2, r2, #1
 800099e:	3201      	adds	r2, #1
 80009a0:	2101      	movs	r1, #1
 80009a2:	fa01 f202 	lsl.w	r2, r1, r2
 80009a6:	43d2      	mvns	r2, r2
 80009a8:	4611      	mov	r1, r2
 80009aa:	4a5e      	ldr	r2, [pc, #376]	; (8000b24 <GPIO_void_setPin_Direction+0x5dc>)
 80009ac:	400b      	ands	r3, r1
 80009ae:	6013      	str	r3, [r2, #0]
		break;
 80009b0:	e030      	b.n	8000a14 <GPIO_void_setPin_Direction+0x4cc>
		case ALTERNATIVE_FUNCTION_MODE:Clear_bit(GPIOE_MODER,pin*2);SET_BIT(GPIOE_MODER,(pin*2+1));break;
 80009b2:	4b5c      	ldr	r3, [pc, #368]	; (8000b24 <GPIO_void_setPin_Direction+0x5dc>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	79ba      	ldrb	r2, [r7, #6]
 80009b8:	0052      	lsls	r2, r2, #1
 80009ba:	2101      	movs	r1, #1
 80009bc:	fa01 f202 	lsl.w	r2, r1, r2
 80009c0:	43d2      	mvns	r2, r2
 80009c2:	4611      	mov	r1, r2
 80009c4:	4a57      	ldr	r2, [pc, #348]	; (8000b24 <GPIO_void_setPin_Direction+0x5dc>)
 80009c6:	400b      	ands	r3, r1
 80009c8:	6013      	str	r3, [r2, #0]
 80009ca:	4b56      	ldr	r3, [pc, #344]	; (8000b24 <GPIO_void_setPin_Direction+0x5dc>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	79ba      	ldrb	r2, [r7, #6]
 80009d0:	0052      	lsls	r2, r2, #1
 80009d2:	3201      	adds	r2, #1
 80009d4:	2101      	movs	r1, #1
 80009d6:	fa01 f202 	lsl.w	r2, r1, r2
 80009da:	4611      	mov	r1, r2
 80009dc:	4a51      	ldr	r2, [pc, #324]	; (8000b24 <GPIO_void_setPin_Direction+0x5dc>)
 80009de:	430b      	orrs	r3, r1
 80009e0:	6013      	str	r3, [r2, #0]
 80009e2:	e017      	b.n	8000a14 <GPIO_void_setPin_Direction+0x4cc>
		case ANALOG_MODE:SET_BIT(GPIOE_MODER,pin*2);SET_BIT(GPIOE_MODER,(pin*2+1));break;
 80009e4:	4b4f      	ldr	r3, [pc, #316]	; (8000b24 <GPIO_void_setPin_Direction+0x5dc>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	79ba      	ldrb	r2, [r7, #6]
 80009ea:	0052      	lsls	r2, r2, #1
 80009ec:	2101      	movs	r1, #1
 80009ee:	fa01 f202 	lsl.w	r2, r1, r2
 80009f2:	4611      	mov	r1, r2
 80009f4:	4a4b      	ldr	r2, [pc, #300]	; (8000b24 <GPIO_void_setPin_Direction+0x5dc>)
 80009f6:	430b      	orrs	r3, r1
 80009f8:	6013      	str	r3, [r2, #0]
 80009fa:	4b4a      	ldr	r3, [pc, #296]	; (8000b24 <GPIO_void_setPin_Direction+0x5dc>)
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	79ba      	ldrb	r2, [r7, #6]
 8000a00:	0052      	lsls	r2, r2, #1
 8000a02:	3201      	adds	r2, #1
 8000a04:	2101      	movs	r1, #1
 8000a06:	fa01 f202 	lsl.w	r2, r1, r2
 8000a0a:	4611      	mov	r1, r2
 8000a0c:	4a45      	ldr	r2, [pc, #276]	; (8000b24 <GPIO_void_setPin_Direction+0x5dc>)
 8000a0e:	430b      	orrs	r3, r1
 8000a10:	6013      	str	r3, [r2, #0]
 8000a12:	bf00      	nop
		}
	break;
 8000a14:	e07b      	b.n	8000b0e <GPIO_void_setPin_Direction+0x5c6>

	case PORT_H:
		switch(Direction)
 8000a16:	797b      	ldrb	r3, [r7, #5]
 8000a18:	2b03      	cmp	r3, #3
 8000a1a:	d87a      	bhi.n	8000b12 <GPIO_void_setPin_Direction+0x5ca>
 8000a1c:	a201      	add	r2, pc, #4	; (adr r2, 8000a24 <GPIO_void_setPin_Direction+0x4dc>)
 8000a1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a22:	bf00      	nop
 8000a24:	08000a35 	.word	0x08000a35
 8000a28:	08000a69 	.word	0x08000a69
 8000a2c:	08000a9b 	.word	0x08000a9b
 8000a30:	08000acd 	.word	0x08000acd
		{
		case INPUT_MODE:Clear_bit(GPIOH_MODER,pin*2);Clear_bit(GPIOH_MODER,(pin*2+1));break;
 8000a34:	4b3c      	ldr	r3, [pc, #240]	; (8000b28 <GPIO_void_setPin_Direction+0x5e0>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	79ba      	ldrb	r2, [r7, #6]
 8000a3a:	0052      	lsls	r2, r2, #1
 8000a3c:	2101      	movs	r1, #1
 8000a3e:	fa01 f202 	lsl.w	r2, r1, r2
 8000a42:	43d2      	mvns	r2, r2
 8000a44:	4611      	mov	r1, r2
 8000a46:	4a38      	ldr	r2, [pc, #224]	; (8000b28 <GPIO_void_setPin_Direction+0x5e0>)
 8000a48:	400b      	ands	r3, r1
 8000a4a:	6013      	str	r3, [r2, #0]
 8000a4c:	4b36      	ldr	r3, [pc, #216]	; (8000b28 <GPIO_void_setPin_Direction+0x5e0>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	79ba      	ldrb	r2, [r7, #6]
 8000a52:	0052      	lsls	r2, r2, #1
 8000a54:	3201      	adds	r2, #1
 8000a56:	2101      	movs	r1, #1
 8000a58:	fa01 f202 	lsl.w	r2, r1, r2
 8000a5c:	43d2      	mvns	r2, r2
 8000a5e:	4611      	mov	r1, r2
 8000a60:	4a31      	ldr	r2, [pc, #196]	; (8000b28 <GPIO_void_setPin_Direction+0x5e0>)
 8000a62:	400b      	ands	r3, r1
 8000a64:	6013      	str	r3, [r2, #0]
 8000a66:	e049      	b.n	8000afc <GPIO_void_setPin_Direction+0x5b4>
		case GENERAL_PURPOSE_OUTPUT_MODE:SET_BIT(GPIOH_MODER,pin*2);Clear_bit(GPIOH_MODER,(pin*2+1));
 8000a68:	4b2f      	ldr	r3, [pc, #188]	; (8000b28 <GPIO_void_setPin_Direction+0x5e0>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	79ba      	ldrb	r2, [r7, #6]
 8000a6e:	0052      	lsls	r2, r2, #1
 8000a70:	2101      	movs	r1, #1
 8000a72:	fa01 f202 	lsl.w	r2, r1, r2
 8000a76:	4611      	mov	r1, r2
 8000a78:	4a2b      	ldr	r2, [pc, #172]	; (8000b28 <GPIO_void_setPin_Direction+0x5e0>)
 8000a7a:	430b      	orrs	r3, r1
 8000a7c:	6013      	str	r3, [r2, #0]
 8000a7e:	4b2a      	ldr	r3, [pc, #168]	; (8000b28 <GPIO_void_setPin_Direction+0x5e0>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	79ba      	ldrb	r2, [r7, #6]
 8000a84:	0052      	lsls	r2, r2, #1
 8000a86:	3201      	adds	r2, #1
 8000a88:	2101      	movs	r1, #1
 8000a8a:	fa01 f202 	lsl.w	r2, r1, r2
 8000a8e:	43d2      	mvns	r2, r2
 8000a90:	4611      	mov	r1, r2
 8000a92:	4a25      	ldr	r2, [pc, #148]	; (8000b28 <GPIO_void_setPin_Direction+0x5e0>)
 8000a94:	400b      	ands	r3, r1
 8000a96:	6013      	str	r3, [r2, #0]
		break;
 8000a98:	e030      	b.n	8000afc <GPIO_void_setPin_Direction+0x5b4>
		case ALTERNATIVE_FUNCTION_MODE:Clear_bit(GPIOH_MODER,pin*2);SET_BIT(GPIOH_MODER,(pin*2+1));break;
 8000a9a:	4b23      	ldr	r3, [pc, #140]	; (8000b28 <GPIO_void_setPin_Direction+0x5e0>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	79ba      	ldrb	r2, [r7, #6]
 8000aa0:	0052      	lsls	r2, r2, #1
 8000aa2:	2101      	movs	r1, #1
 8000aa4:	fa01 f202 	lsl.w	r2, r1, r2
 8000aa8:	43d2      	mvns	r2, r2
 8000aaa:	4611      	mov	r1, r2
 8000aac:	4a1e      	ldr	r2, [pc, #120]	; (8000b28 <GPIO_void_setPin_Direction+0x5e0>)
 8000aae:	400b      	ands	r3, r1
 8000ab0:	6013      	str	r3, [r2, #0]
 8000ab2:	4b1d      	ldr	r3, [pc, #116]	; (8000b28 <GPIO_void_setPin_Direction+0x5e0>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	79ba      	ldrb	r2, [r7, #6]
 8000ab8:	0052      	lsls	r2, r2, #1
 8000aba:	3201      	adds	r2, #1
 8000abc:	2101      	movs	r1, #1
 8000abe:	fa01 f202 	lsl.w	r2, r1, r2
 8000ac2:	4611      	mov	r1, r2
 8000ac4:	4a18      	ldr	r2, [pc, #96]	; (8000b28 <GPIO_void_setPin_Direction+0x5e0>)
 8000ac6:	430b      	orrs	r3, r1
 8000ac8:	6013      	str	r3, [r2, #0]
 8000aca:	e017      	b.n	8000afc <GPIO_void_setPin_Direction+0x5b4>
		case ANALOG_MODE:SET_BIT(GPIOH_MODER,pin*2);SET_BIT(GPIOH_MODER,(pin*2+1));break;
 8000acc:	4b16      	ldr	r3, [pc, #88]	; (8000b28 <GPIO_void_setPin_Direction+0x5e0>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	79ba      	ldrb	r2, [r7, #6]
 8000ad2:	0052      	lsls	r2, r2, #1
 8000ad4:	2101      	movs	r1, #1
 8000ad6:	fa01 f202 	lsl.w	r2, r1, r2
 8000ada:	4611      	mov	r1, r2
 8000adc:	4a12      	ldr	r2, [pc, #72]	; (8000b28 <GPIO_void_setPin_Direction+0x5e0>)
 8000ade:	430b      	orrs	r3, r1
 8000ae0:	6013      	str	r3, [r2, #0]
 8000ae2:	4b11      	ldr	r3, [pc, #68]	; (8000b28 <GPIO_void_setPin_Direction+0x5e0>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	79ba      	ldrb	r2, [r7, #6]
 8000ae8:	0052      	lsls	r2, r2, #1
 8000aea:	3201      	adds	r2, #1
 8000aec:	2101      	movs	r1, #1
 8000aee:	fa01 f202 	lsl.w	r2, r1, r2
 8000af2:	4611      	mov	r1, r2
 8000af4:	4a0c      	ldr	r2, [pc, #48]	; (8000b28 <GPIO_void_setPin_Direction+0x5e0>)
 8000af6:	430b      	orrs	r3, r1
 8000af8:	6013      	str	r3, [r2, #0]
 8000afa:	bf00      	nop
		}
	break;
 8000afc:	e009      	b.n	8000b12 <GPIO_void_setPin_Direction+0x5ca>
	break;
 8000afe:	bf00      	nop
 8000b00:	e008      	b.n	8000b14 <GPIO_void_setPin_Direction+0x5cc>
	break;
 8000b02:	bf00      	nop
 8000b04:	e006      	b.n	8000b14 <GPIO_void_setPin_Direction+0x5cc>
	break;
 8000b06:	bf00      	nop
 8000b08:	e004      	b.n	8000b14 <GPIO_void_setPin_Direction+0x5cc>
	break;
 8000b0a:	bf00      	nop
 8000b0c:	e002      	b.n	8000b14 <GPIO_void_setPin_Direction+0x5cc>
	break;
 8000b0e:	bf00      	nop
 8000b10:	e000      	b.n	8000b14 <GPIO_void_setPin_Direction+0x5cc>
	break;
 8000b12:	bf00      	nop

	}
}
 8000b14:	bf00      	nop
 8000b16:	370c      	adds	r7, #12
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1e:	4770      	bx	lr
 8000b20:	40020c00 	.word	0x40020c00
 8000b24:	40021000 	.word	0x40021000
 8000b28:	40021c00 	.word	0x40021c00

08000b2c <GPIO_void_setPin_Output_Type>:
//////////////////////////////////////////////////////////////////////////////////////////////
void GPIO_void_setPin_Output_Type(PORT_ID port , PIN_ID pin , OUTPUT_TYPE output_type)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b083      	sub	sp, #12
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	4603      	mov	r3, r0
 8000b34:	71fb      	strb	r3, [r7, #7]
 8000b36:	460b      	mov	r3, r1
 8000b38:	71bb      	strb	r3, [r7, #6]
 8000b3a:	4613      	mov	r3, r2
 8000b3c:	717b      	strb	r3, [r7, #5]
	switch(port)
 8000b3e:	79fb      	ldrb	r3, [r7, #7]
 8000b40:	2b05      	cmp	r3, #5
 8000b42:	f200 80c3 	bhi.w	8000ccc <GPIO_void_setPin_Output_Type+0x1a0>
 8000b46:	a201      	add	r2, pc, #4	; (adr r2, 8000b4c <GPIO_void_setPin_Output_Type+0x20>)
 8000b48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b4c:	08000b65 	.word	0x08000b65
 8000b50:	08000ba1 	.word	0x08000ba1
 8000b54:	08000bdd 	.word	0x08000bdd
 8000b58:	08000c19 	.word	0x08000c19
 8000b5c:	08000c55 	.word	0x08000c55
 8000b60:	08000c91 	.word	0x08000c91
	{
	case PORT_A:
		switch(output_type)
 8000b64:	797b      	ldrb	r3, [r7, #5]
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d002      	beq.n	8000b70 <GPIO_void_setPin_Output_Type+0x44>
 8000b6a:	2b01      	cmp	r3, #1
 8000b6c:	d00c      	beq.n	8000b88 <GPIO_void_setPin_Output_Type+0x5c>
		{
		case OUTPUT_PUSH_PULL: Clear_bit(GPIOA_OTYPER,pin);break;
		case OUTPUT_OPEN_DRAIN:SET_BIT(GPIOA_OTYPER,pin);break;
		}
	break;
 8000b6e:	e0ad      	b.n	8000ccc <GPIO_void_setPin_Output_Type+0x1a0>
		case OUTPUT_PUSH_PULL: Clear_bit(GPIOA_OTYPER,pin);break;
 8000b70:	4b59      	ldr	r3, [pc, #356]	; (8000cd8 <GPIO_void_setPin_Output_Type+0x1ac>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	79ba      	ldrb	r2, [r7, #6]
 8000b76:	2101      	movs	r1, #1
 8000b78:	fa01 f202 	lsl.w	r2, r1, r2
 8000b7c:	43d2      	mvns	r2, r2
 8000b7e:	4611      	mov	r1, r2
 8000b80:	4a55      	ldr	r2, [pc, #340]	; (8000cd8 <GPIO_void_setPin_Output_Type+0x1ac>)
 8000b82:	400b      	ands	r3, r1
 8000b84:	6013      	str	r3, [r2, #0]
 8000b86:	e00a      	b.n	8000b9e <GPIO_void_setPin_Output_Type+0x72>
		case OUTPUT_OPEN_DRAIN:SET_BIT(GPIOA_OTYPER,pin);break;
 8000b88:	4b53      	ldr	r3, [pc, #332]	; (8000cd8 <GPIO_void_setPin_Output_Type+0x1ac>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	79ba      	ldrb	r2, [r7, #6]
 8000b8e:	2101      	movs	r1, #1
 8000b90:	fa01 f202 	lsl.w	r2, r1, r2
 8000b94:	4611      	mov	r1, r2
 8000b96:	4a50      	ldr	r2, [pc, #320]	; (8000cd8 <GPIO_void_setPin_Output_Type+0x1ac>)
 8000b98:	430b      	orrs	r3, r1
 8000b9a:	6013      	str	r3, [r2, #0]
 8000b9c:	bf00      	nop
	break;
 8000b9e:	e095      	b.n	8000ccc <GPIO_void_setPin_Output_Type+0x1a0>

	case PORT_B:
		switch(output_type)
 8000ba0:	797b      	ldrb	r3, [r7, #5]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d002      	beq.n	8000bac <GPIO_void_setPin_Output_Type+0x80>
 8000ba6:	2b01      	cmp	r3, #1
 8000ba8:	d00c      	beq.n	8000bc4 <GPIO_void_setPin_Output_Type+0x98>
		{
		case OUTPUT_PUSH_PULL: Clear_bit(GPIOB_OTYPER,pin);break;
		case OUTPUT_OPEN_DRAIN:SET_BIT(GPIOB_OTYPER,pin);break;
		}
	break;
 8000baa:	e08f      	b.n	8000ccc <GPIO_void_setPin_Output_Type+0x1a0>
		case OUTPUT_PUSH_PULL: Clear_bit(GPIOB_OTYPER,pin);break;
 8000bac:	4b4b      	ldr	r3, [pc, #300]	; (8000cdc <GPIO_void_setPin_Output_Type+0x1b0>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	79ba      	ldrb	r2, [r7, #6]
 8000bb2:	2101      	movs	r1, #1
 8000bb4:	fa01 f202 	lsl.w	r2, r1, r2
 8000bb8:	43d2      	mvns	r2, r2
 8000bba:	4611      	mov	r1, r2
 8000bbc:	4a47      	ldr	r2, [pc, #284]	; (8000cdc <GPIO_void_setPin_Output_Type+0x1b0>)
 8000bbe:	400b      	ands	r3, r1
 8000bc0:	6013      	str	r3, [r2, #0]
 8000bc2:	e00a      	b.n	8000bda <GPIO_void_setPin_Output_Type+0xae>
		case OUTPUT_OPEN_DRAIN:SET_BIT(GPIOB_OTYPER,pin);break;
 8000bc4:	4b45      	ldr	r3, [pc, #276]	; (8000cdc <GPIO_void_setPin_Output_Type+0x1b0>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	79ba      	ldrb	r2, [r7, #6]
 8000bca:	2101      	movs	r1, #1
 8000bcc:	fa01 f202 	lsl.w	r2, r1, r2
 8000bd0:	4611      	mov	r1, r2
 8000bd2:	4a42      	ldr	r2, [pc, #264]	; (8000cdc <GPIO_void_setPin_Output_Type+0x1b0>)
 8000bd4:	430b      	orrs	r3, r1
 8000bd6:	6013      	str	r3, [r2, #0]
 8000bd8:	bf00      	nop
	break;
 8000bda:	e077      	b.n	8000ccc <GPIO_void_setPin_Output_Type+0x1a0>

	case PORT_C:
		switch(output_type)
 8000bdc:	797b      	ldrb	r3, [r7, #5]
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d002      	beq.n	8000be8 <GPIO_void_setPin_Output_Type+0xbc>
 8000be2:	2b01      	cmp	r3, #1
 8000be4:	d00c      	beq.n	8000c00 <GPIO_void_setPin_Output_Type+0xd4>
		{
		case OUTPUT_PUSH_PULL: Clear_bit(GPIOC_OTYPER,pin);break;
		case OUTPUT_OPEN_DRAIN:SET_BIT(GPIOC_OTYPER,pin);break;
		}
	break;
 8000be6:	e071      	b.n	8000ccc <GPIO_void_setPin_Output_Type+0x1a0>
		case OUTPUT_PUSH_PULL: Clear_bit(GPIOC_OTYPER,pin);break;
 8000be8:	4b3d      	ldr	r3, [pc, #244]	; (8000ce0 <GPIO_void_setPin_Output_Type+0x1b4>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	79ba      	ldrb	r2, [r7, #6]
 8000bee:	2101      	movs	r1, #1
 8000bf0:	fa01 f202 	lsl.w	r2, r1, r2
 8000bf4:	43d2      	mvns	r2, r2
 8000bf6:	4611      	mov	r1, r2
 8000bf8:	4a39      	ldr	r2, [pc, #228]	; (8000ce0 <GPIO_void_setPin_Output_Type+0x1b4>)
 8000bfa:	400b      	ands	r3, r1
 8000bfc:	6013      	str	r3, [r2, #0]
 8000bfe:	e00a      	b.n	8000c16 <GPIO_void_setPin_Output_Type+0xea>
		case OUTPUT_OPEN_DRAIN:SET_BIT(GPIOC_OTYPER,pin);break;
 8000c00:	4b37      	ldr	r3, [pc, #220]	; (8000ce0 <GPIO_void_setPin_Output_Type+0x1b4>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	79ba      	ldrb	r2, [r7, #6]
 8000c06:	2101      	movs	r1, #1
 8000c08:	fa01 f202 	lsl.w	r2, r1, r2
 8000c0c:	4611      	mov	r1, r2
 8000c0e:	4a34      	ldr	r2, [pc, #208]	; (8000ce0 <GPIO_void_setPin_Output_Type+0x1b4>)
 8000c10:	430b      	orrs	r3, r1
 8000c12:	6013      	str	r3, [r2, #0]
 8000c14:	bf00      	nop
	break;
 8000c16:	e059      	b.n	8000ccc <GPIO_void_setPin_Output_Type+0x1a0>

	case PORT_D:
		switch(output_type)
 8000c18:	797b      	ldrb	r3, [r7, #5]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d002      	beq.n	8000c24 <GPIO_void_setPin_Output_Type+0xf8>
 8000c1e:	2b01      	cmp	r3, #1
 8000c20:	d00c      	beq.n	8000c3c <GPIO_void_setPin_Output_Type+0x110>
		{
		case OUTPUT_PUSH_PULL: Clear_bit(GPIOD_OTYPER,pin);break;
		case OUTPUT_OPEN_DRAIN:SET_BIT(GPIOD_OTYPER,pin);break;
		}
	break;
 8000c22:	e053      	b.n	8000ccc <GPIO_void_setPin_Output_Type+0x1a0>
		case OUTPUT_PUSH_PULL: Clear_bit(GPIOD_OTYPER,pin);break;
 8000c24:	4b2f      	ldr	r3, [pc, #188]	; (8000ce4 <GPIO_void_setPin_Output_Type+0x1b8>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	79ba      	ldrb	r2, [r7, #6]
 8000c2a:	2101      	movs	r1, #1
 8000c2c:	fa01 f202 	lsl.w	r2, r1, r2
 8000c30:	43d2      	mvns	r2, r2
 8000c32:	4611      	mov	r1, r2
 8000c34:	4a2b      	ldr	r2, [pc, #172]	; (8000ce4 <GPIO_void_setPin_Output_Type+0x1b8>)
 8000c36:	400b      	ands	r3, r1
 8000c38:	6013      	str	r3, [r2, #0]
 8000c3a:	e00a      	b.n	8000c52 <GPIO_void_setPin_Output_Type+0x126>
		case OUTPUT_OPEN_DRAIN:SET_BIT(GPIOD_OTYPER,pin);break;
 8000c3c:	4b29      	ldr	r3, [pc, #164]	; (8000ce4 <GPIO_void_setPin_Output_Type+0x1b8>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	79ba      	ldrb	r2, [r7, #6]
 8000c42:	2101      	movs	r1, #1
 8000c44:	fa01 f202 	lsl.w	r2, r1, r2
 8000c48:	4611      	mov	r1, r2
 8000c4a:	4a26      	ldr	r2, [pc, #152]	; (8000ce4 <GPIO_void_setPin_Output_Type+0x1b8>)
 8000c4c:	430b      	orrs	r3, r1
 8000c4e:	6013      	str	r3, [r2, #0]
 8000c50:	bf00      	nop
	break;
 8000c52:	e03b      	b.n	8000ccc <GPIO_void_setPin_Output_Type+0x1a0>

	case PORT_E:
		switch(output_type)
 8000c54:	797b      	ldrb	r3, [r7, #5]
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d002      	beq.n	8000c60 <GPIO_void_setPin_Output_Type+0x134>
 8000c5a:	2b01      	cmp	r3, #1
 8000c5c:	d00c      	beq.n	8000c78 <GPIO_void_setPin_Output_Type+0x14c>
		{
		case OUTPUT_PUSH_PULL: Clear_bit(GPIOE_OTYPER,pin);break;
		case OUTPUT_OPEN_DRAIN:SET_BIT(GPIOE_OTYPER,pin);break;
		}
	break;
 8000c5e:	e035      	b.n	8000ccc <GPIO_void_setPin_Output_Type+0x1a0>
		case OUTPUT_PUSH_PULL: Clear_bit(GPIOE_OTYPER,pin);break;
 8000c60:	4b21      	ldr	r3, [pc, #132]	; (8000ce8 <GPIO_void_setPin_Output_Type+0x1bc>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	79ba      	ldrb	r2, [r7, #6]
 8000c66:	2101      	movs	r1, #1
 8000c68:	fa01 f202 	lsl.w	r2, r1, r2
 8000c6c:	43d2      	mvns	r2, r2
 8000c6e:	4611      	mov	r1, r2
 8000c70:	4a1d      	ldr	r2, [pc, #116]	; (8000ce8 <GPIO_void_setPin_Output_Type+0x1bc>)
 8000c72:	400b      	ands	r3, r1
 8000c74:	6013      	str	r3, [r2, #0]
 8000c76:	e00a      	b.n	8000c8e <GPIO_void_setPin_Output_Type+0x162>
		case OUTPUT_OPEN_DRAIN:SET_BIT(GPIOE_OTYPER,pin);break;
 8000c78:	4b1b      	ldr	r3, [pc, #108]	; (8000ce8 <GPIO_void_setPin_Output_Type+0x1bc>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	79ba      	ldrb	r2, [r7, #6]
 8000c7e:	2101      	movs	r1, #1
 8000c80:	fa01 f202 	lsl.w	r2, r1, r2
 8000c84:	4611      	mov	r1, r2
 8000c86:	4a18      	ldr	r2, [pc, #96]	; (8000ce8 <GPIO_void_setPin_Output_Type+0x1bc>)
 8000c88:	430b      	orrs	r3, r1
 8000c8a:	6013      	str	r3, [r2, #0]
 8000c8c:	bf00      	nop
	break;
 8000c8e:	e01d      	b.n	8000ccc <GPIO_void_setPin_Output_Type+0x1a0>

	case PORT_H:
		switch(output_type)
 8000c90:	797b      	ldrb	r3, [r7, #5]
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d002      	beq.n	8000c9c <GPIO_void_setPin_Output_Type+0x170>
 8000c96:	2b01      	cmp	r3, #1
 8000c98:	d00c      	beq.n	8000cb4 <GPIO_void_setPin_Output_Type+0x188>
		{
		case OUTPUT_PUSH_PULL: Clear_bit(GPIOH_OTYPER,pin);break;
		case OUTPUT_OPEN_DRAIN:SET_BIT(GPIOH_OTYPER,pin);break;
		}
	break;
 8000c9a:	e016      	b.n	8000cca <GPIO_void_setPin_Output_Type+0x19e>
		case OUTPUT_PUSH_PULL: Clear_bit(GPIOH_OTYPER,pin);break;
 8000c9c:	4b13      	ldr	r3, [pc, #76]	; (8000cec <GPIO_void_setPin_Output_Type+0x1c0>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	79ba      	ldrb	r2, [r7, #6]
 8000ca2:	2101      	movs	r1, #1
 8000ca4:	fa01 f202 	lsl.w	r2, r1, r2
 8000ca8:	43d2      	mvns	r2, r2
 8000caa:	4611      	mov	r1, r2
 8000cac:	4a0f      	ldr	r2, [pc, #60]	; (8000cec <GPIO_void_setPin_Output_Type+0x1c0>)
 8000cae:	400b      	ands	r3, r1
 8000cb0:	6013      	str	r3, [r2, #0]
 8000cb2:	e00a      	b.n	8000cca <GPIO_void_setPin_Output_Type+0x19e>
		case OUTPUT_OPEN_DRAIN:SET_BIT(GPIOH_OTYPER,pin);break;
 8000cb4:	4b0d      	ldr	r3, [pc, #52]	; (8000cec <GPIO_void_setPin_Output_Type+0x1c0>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	79ba      	ldrb	r2, [r7, #6]
 8000cba:	2101      	movs	r1, #1
 8000cbc:	fa01 f202 	lsl.w	r2, r1, r2
 8000cc0:	4611      	mov	r1, r2
 8000cc2:	4a0a      	ldr	r2, [pc, #40]	; (8000cec <GPIO_void_setPin_Output_Type+0x1c0>)
 8000cc4:	430b      	orrs	r3, r1
 8000cc6:	6013      	str	r3, [r2, #0]
 8000cc8:	bf00      	nop
	break;
 8000cca:	bf00      	nop
	}
}
 8000ccc:	bf00      	nop
 8000cce:	370c      	adds	r7, #12
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd6:	4770      	bx	lr
 8000cd8:	40020004 	.word	0x40020004
 8000cdc:	40020404 	.word	0x40020404
 8000ce0:	40020804 	.word	0x40020804
 8000ce4:	40020c04 	.word	0x40020c04
 8000ce8:	40021004 	.word	0x40021004
 8000cec:	40021c04 	.word	0x40021c04

08000cf0 <GPIO_void_setPin_value>:
/////////////////////////////////////////////////////////////////////////////////////////////
void GPIO_void_setPin_value(PORT_ID port , PIN_ID pin , PIN_VALUE value)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b083      	sub	sp, #12
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	71fb      	strb	r3, [r7, #7]
 8000cfa:	460b      	mov	r3, r1
 8000cfc:	71bb      	strb	r3, [r7, #6]
 8000cfe:	4613      	mov	r3, r2
 8000d00:	717b      	strb	r3, [r7, #5]
	if(value == LOW)
 8000d02:	797b      	ldrb	r3, [r7, #5]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d15b      	bne.n	8000dc0 <GPIO_void_setPin_value+0xd0>
	{
		switch(port)
 8000d08:	79fb      	ldrb	r3, [r7, #7]
 8000d0a:	2b05      	cmp	r3, #5
 8000d0c:	f200 80b1 	bhi.w	8000e72 <GPIO_void_setPin_value+0x182>
 8000d10:	a201      	add	r2, pc, #4	; (adr r2, 8000d18 <GPIO_void_setPin_value+0x28>)
 8000d12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d16:	bf00      	nop
 8000d18:	08000d31 	.word	0x08000d31
 8000d1c:	08000d49 	.word	0x08000d49
 8000d20:	08000d61 	.word	0x08000d61
 8000d24:	08000d79 	.word	0x08000d79
 8000d28:	08000d91 	.word	0x08000d91
 8000d2c:	08000da9 	.word	0x08000da9
		{

		case PORT_A:  Clear_bit(GPIOA_ODR,pin); break;
 8000d30:	4b53      	ldr	r3, [pc, #332]	; (8000e80 <GPIO_void_setPin_value+0x190>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	79ba      	ldrb	r2, [r7, #6]
 8000d36:	2101      	movs	r1, #1
 8000d38:	fa01 f202 	lsl.w	r2, r1, r2
 8000d3c:	43d2      	mvns	r2, r2
 8000d3e:	4611      	mov	r1, r2
 8000d40:	4a4f      	ldr	r2, [pc, #316]	; (8000e80 <GPIO_void_setPin_value+0x190>)
 8000d42:	400b      	ands	r3, r1
 8000d44:	6013      	str	r3, [r2, #0]
 8000d46:	e094      	b.n	8000e72 <GPIO_void_setPin_value+0x182>
		case PORT_B:  Clear_bit(GPIOB_ODR,pin); break;
 8000d48:	4b4e      	ldr	r3, [pc, #312]	; (8000e84 <GPIO_void_setPin_value+0x194>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	79ba      	ldrb	r2, [r7, #6]
 8000d4e:	2101      	movs	r1, #1
 8000d50:	fa01 f202 	lsl.w	r2, r1, r2
 8000d54:	43d2      	mvns	r2, r2
 8000d56:	4611      	mov	r1, r2
 8000d58:	4a4a      	ldr	r2, [pc, #296]	; (8000e84 <GPIO_void_setPin_value+0x194>)
 8000d5a:	400b      	ands	r3, r1
 8000d5c:	6013      	str	r3, [r2, #0]
 8000d5e:	e088      	b.n	8000e72 <GPIO_void_setPin_value+0x182>
		case PORT_C:  Clear_bit(GPIOC_ODR,pin); break;
 8000d60:	4b49      	ldr	r3, [pc, #292]	; (8000e88 <GPIO_void_setPin_value+0x198>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	79ba      	ldrb	r2, [r7, #6]
 8000d66:	2101      	movs	r1, #1
 8000d68:	fa01 f202 	lsl.w	r2, r1, r2
 8000d6c:	43d2      	mvns	r2, r2
 8000d6e:	4611      	mov	r1, r2
 8000d70:	4a45      	ldr	r2, [pc, #276]	; (8000e88 <GPIO_void_setPin_value+0x198>)
 8000d72:	400b      	ands	r3, r1
 8000d74:	6013      	str	r3, [r2, #0]
 8000d76:	e07c      	b.n	8000e72 <GPIO_void_setPin_value+0x182>
		case PORT_D:  Clear_bit(GPIOD_ODR,pin); break;
 8000d78:	4b44      	ldr	r3, [pc, #272]	; (8000e8c <GPIO_void_setPin_value+0x19c>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	79ba      	ldrb	r2, [r7, #6]
 8000d7e:	2101      	movs	r1, #1
 8000d80:	fa01 f202 	lsl.w	r2, r1, r2
 8000d84:	43d2      	mvns	r2, r2
 8000d86:	4611      	mov	r1, r2
 8000d88:	4a40      	ldr	r2, [pc, #256]	; (8000e8c <GPIO_void_setPin_value+0x19c>)
 8000d8a:	400b      	ands	r3, r1
 8000d8c:	6013      	str	r3, [r2, #0]
 8000d8e:	e070      	b.n	8000e72 <GPIO_void_setPin_value+0x182>
		case PORT_E:  Clear_bit(GPIOE_ODR,pin); break;
 8000d90:	4b3f      	ldr	r3, [pc, #252]	; (8000e90 <GPIO_void_setPin_value+0x1a0>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	79ba      	ldrb	r2, [r7, #6]
 8000d96:	2101      	movs	r1, #1
 8000d98:	fa01 f202 	lsl.w	r2, r1, r2
 8000d9c:	43d2      	mvns	r2, r2
 8000d9e:	4611      	mov	r1, r2
 8000da0:	4a3b      	ldr	r2, [pc, #236]	; (8000e90 <GPIO_void_setPin_value+0x1a0>)
 8000da2:	400b      	ands	r3, r1
 8000da4:	6013      	str	r3, [r2, #0]
 8000da6:	e064      	b.n	8000e72 <GPIO_void_setPin_value+0x182>
		case PORT_H:  Clear_bit(GPIOH_ODR,pin); break;
 8000da8:	4b3a      	ldr	r3, [pc, #232]	; (8000e94 <GPIO_void_setPin_value+0x1a4>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	79ba      	ldrb	r2, [r7, #6]
 8000dae:	2101      	movs	r1, #1
 8000db0:	fa01 f202 	lsl.w	r2, r1, r2
 8000db4:	43d2      	mvns	r2, r2
 8000db6:	4611      	mov	r1, r2
 8000db8:	4a36      	ldr	r2, [pc, #216]	; (8000e94 <GPIO_void_setPin_value+0x1a4>)
 8000dba:	400b      	ands	r3, r1
 8000dbc:	6013      	str	r3, [r2, #0]
 8000dbe:	e058      	b.n	8000e72 <GPIO_void_setPin_value+0x182>
		}

	}
	else if(value == HIGH)
 8000dc0:	797b      	ldrb	r3, [r7, #5]
 8000dc2:	2b01      	cmp	r3, #1
 8000dc4:	d154      	bne.n	8000e70 <GPIO_void_setPin_value+0x180>
	{
		switch(port)
 8000dc6:	79fb      	ldrb	r3, [r7, #7]
 8000dc8:	2b05      	cmp	r3, #5
 8000dca:	d852      	bhi.n	8000e72 <GPIO_void_setPin_value+0x182>
 8000dcc:	a201      	add	r2, pc, #4	; (adr r2, 8000dd4 <GPIO_void_setPin_value+0xe4>)
 8000dce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dd2:	bf00      	nop
 8000dd4:	08000ded 	.word	0x08000ded
 8000dd8:	08000e03 	.word	0x08000e03
 8000ddc:	08000e19 	.word	0x08000e19
 8000de0:	08000e2f 	.word	0x08000e2f
 8000de4:	08000e45 	.word	0x08000e45
 8000de8:	08000e5b 	.word	0x08000e5b
		{

		case PORT_A:  SET_BIT(GPIOA_ODR,pin); break;
 8000dec:	4b24      	ldr	r3, [pc, #144]	; (8000e80 <GPIO_void_setPin_value+0x190>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	79ba      	ldrb	r2, [r7, #6]
 8000df2:	2101      	movs	r1, #1
 8000df4:	fa01 f202 	lsl.w	r2, r1, r2
 8000df8:	4611      	mov	r1, r2
 8000dfa:	4a21      	ldr	r2, [pc, #132]	; (8000e80 <GPIO_void_setPin_value+0x190>)
 8000dfc:	430b      	orrs	r3, r1
 8000dfe:	6013      	str	r3, [r2, #0]
 8000e00:	e037      	b.n	8000e72 <GPIO_void_setPin_value+0x182>
		case PORT_B:  SET_BIT(GPIOB_ODR,pin); break;
 8000e02:	4b20      	ldr	r3, [pc, #128]	; (8000e84 <GPIO_void_setPin_value+0x194>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	79ba      	ldrb	r2, [r7, #6]
 8000e08:	2101      	movs	r1, #1
 8000e0a:	fa01 f202 	lsl.w	r2, r1, r2
 8000e0e:	4611      	mov	r1, r2
 8000e10:	4a1c      	ldr	r2, [pc, #112]	; (8000e84 <GPIO_void_setPin_value+0x194>)
 8000e12:	430b      	orrs	r3, r1
 8000e14:	6013      	str	r3, [r2, #0]
 8000e16:	e02c      	b.n	8000e72 <GPIO_void_setPin_value+0x182>
		case PORT_C:  SET_BIT(GPIOC_ODR,pin); break;
 8000e18:	4b1b      	ldr	r3, [pc, #108]	; (8000e88 <GPIO_void_setPin_value+0x198>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	79ba      	ldrb	r2, [r7, #6]
 8000e1e:	2101      	movs	r1, #1
 8000e20:	fa01 f202 	lsl.w	r2, r1, r2
 8000e24:	4611      	mov	r1, r2
 8000e26:	4a18      	ldr	r2, [pc, #96]	; (8000e88 <GPIO_void_setPin_value+0x198>)
 8000e28:	430b      	orrs	r3, r1
 8000e2a:	6013      	str	r3, [r2, #0]
 8000e2c:	e021      	b.n	8000e72 <GPIO_void_setPin_value+0x182>
		case PORT_D:  SET_BIT(GPIOD_ODR,pin); break;
 8000e2e:	4b17      	ldr	r3, [pc, #92]	; (8000e8c <GPIO_void_setPin_value+0x19c>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	79ba      	ldrb	r2, [r7, #6]
 8000e34:	2101      	movs	r1, #1
 8000e36:	fa01 f202 	lsl.w	r2, r1, r2
 8000e3a:	4611      	mov	r1, r2
 8000e3c:	4a13      	ldr	r2, [pc, #76]	; (8000e8c <GPIO_void_setPin_value+0x19c>)
 8000e3e:	430b      	orrs	r3, r1
 8000e40:	6013      	str	r3, [r2, #0]
 8000e42:	e016      	b.n	8000e72 <GPIO_void_setPin_value+0x182>
		case PORT_E:  SET_BIT(GPIOE_ODR,pin); break;
 8000e44:	4b12      	ldr	r3, [pc, #72]	; (8000e90 <GPIO_void_setPin_value+0x1a0>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	79ba      	ldrb	r2, [r7, #6]
 8000e4a:	2101      	movs	r1, #1
 8000e4c:	fa01 f202 	lsl.w	r2, r1, r2
 8000e50:	4611      	mov	r1, r2
 8000e52:	4a0f      	ldr	r2, [pc, #60]	; (8000e90 <GPIO_void_setPin_value+0x1a0>)
 8000e54:	430b      	orrs	r3, r1
 8000e56:	6013      	str	r3, [r2, #0]
 8000e58:	e00b      	b.n	8000e72 <GPIO_void_setPin_value+0x182>
		case PORT_H:  SET_BIT(GPIOH_ODR,pin); break;
 8000e5a:	4b0e      	ldr	r3, [pc, #56]	; (8000e94 <GPIO_void_setPin_value+0x1a4>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	79ba      	ldrb	r2, [r7, #6]
 8000e60:	2101      	movs	r1, #1
 8000e62:	fa01 f202 	lsl.w	r2, r1, r2
 8000e66:	4611      	mov	r1, r2
 8000e68:	4a0a      	ldr	r2, [pc, #40]	; (8000e94 <GPIO_void_setPin_value+0x1a4>)
 8000e6a:	430b      	orrs	r3, r1
 8000e6c:	6013      	str	r3, [r2, #0]
 8000e6e:	e000      	b.n	8000e72 <GPIO_void_setPin_value+0x182>
		}
	}
 8000e70:	bf00      	nop
}
 8000e72:	bf00      	nop
 8000e74:	370c      	adds	r7, #12
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop
 8000e80:	40020014 	.word	0x40020014
 8000e84:	40020414 	.word	0x40020414
 8000e88:	40020814 	.word	0x40020814
 8000e8c:	40020c14 	.word	0x40020c14
 8000e90:	40021014 	.word	0x40021014
 8000e94:	40021c14 	.word	0x40021c14

08000e98 <GPIO_voidSetAltFunction>:
	}
}


void GPIO_voidSetAltFunction(u8 Copy_u8PortID,u8 Copy_u8PinID ,u32 Copy_u8AltValue)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	603a      	str	r2, [r7, #0]
 8000ea2:	71fb      	strb	r3, [r7, #7]
 8000ea4:	460b      	mov	r3, r1
 8000ea6:	71bb      	strb	r3, [r7, #6]
	switch(Copy_u8PortID)
 8000ea8:	79fb      	ldrb	r3, [r7, #7]
 8000eaa:	2b05      	cmp	r3, #5
 8000eac:	f200 80b2 	bhi.w	8001014 <GPIO_voidSetAltFunction+0x17c>
 8000eb0:	a201      	add	r2, pc, #4	; (adr r2, 8000eb8 <GPIO_voidSetAltFunction+0x20>)
 8000eb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000eb6:	bf00      	nop
 8000eb8:	08000ed1 	.word	0x08000ed1
 8000ebc:	08000f07 	.word	0x08000f07
 8000ec0:	08000f3d 	.word	0x08000f3d
 8000ec4:	08000f73 	.word	0x08000f73
 8000ec8:	08000fa9 	.word	0x08000fa9
 8000ecc:	08000fdf 	.word	0x08000fdf
	{
		case PORT_A:
			if(Copy_u8PinID < PIN8)
 8000ed0:	79bb      	ldrb	r3, [r7, #6]
 8000ed2:	2b07      	cmp	r3, #7
 8000ed4:	d80a      	bhi.n	8000eec <GPIO_voidSetAltFunction+0x54>
			{
				GPIOA_AFRL |= ( Copy_u8AltValue << (Copy_u8PinID*4) );
 8000ed6:	4b53      	ldr	r3, [pc, #332]	; (8001024 <GPIO_voidSetAltFunction+0x18c>)
 8000ed8:	681a      	ldr	r2, [r3, #0]
 8000eda:	79bb      	ldrb	r3, [r7, #6]
 8000edc:	009b      	lsls	r3, r3, #2
 8000ede:	6839      	ldr	r1, [r7, #0]
 8000ee0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ee4:	494f      	ldr	r1, [pc, #316]	; (8001024 <GPIO_voidSetAltFunction+0x18c>)
 8000ee6:	4313      	orrs	r3, r2
 8000ee8:	600b      	str	r3, [r1, #0]
			}
			else
			{
				GPIOA_AFRH |= ( Copy_u8AltValue << ( (Copy_u8PinID%8) * 4 ) );
			}break;
 8000eea:	e094      	b.n	8001016 <GPIO_voidSetAltFunction+0x17e>
				GPIOA_AFRH |= ( Copy_u8AltValue << ( (Copy_u8PinID%8) * 4 ) );
 8000eec:	4b4e      	ldr	r3, [pc, #312]	; (8001028 <GPIO_voidSetAltFunction+0x190>)
 8000eee:	681a      	ldr	r2, [r3, #0]
 8000ef0:	79bb      	ldrb	r3, [r7, #6]
 8000ef2:	f003 0307 	and.w	r3, r3, #7
 8000ef6:	009b      	lsls	r3, r3, #2
 8000ef8:	6839      	ldr	r1, [r7, #0]
 8000efa:	fa01 f303 	lsl.w	r3, r1, r3
 8000efe:	494a      	ldr	r1, [pc, #296]	; (8001028 <GPIO_voidSetAltFunction+0x190>)
 8000f00:	4313      	orrs	r3, r2
 8000f02:	600b      	str	r3, [r1, #0]
			}break;
 8000f04:	e087      	b.n	8001016 <GPIO_voidSetAltFunction+0x17e>

		case PORT_B:
			if(Copy_u8PinID < PIN8)
 8000f06:	79bb      	ldrb	r3, [r7, #6]
 8000f08:	2b07      	cmp	r3, #7
 8000f0a:	d80a      	bhi.n	8000f22 <GPIO_voidSetAltFunction+0x8a>
			{
				GPIOB_AFRL |= ( Copy_u8AltValue << (Copy_u8PinID*4) );
 8000f0c:	4b47      	ldr	r3, [pc, #284]	; (800102c <GPIO_voidSetAltFunction+0x194>)
 8000f0e:	681a      	ldr	r2, [r3, #0]
 8000f10:	79bb      	ldrb	r3, [r7, #6]
 8000f12:	009b      	lsls	r3, r3, #2
 8000f14:	6839      	ldr	r1, [r7, #0]
 8000f16:	fa01 f303 	lsl.w	r3, r1, r3
 8000f1a:	4944      	ldr	r1, [pc, #272]	; (800102c <GPIO_voidSetAltFunction+0x194>)
 8000f1c:	4313      	orrs	r3, r2
 8000f1e:	600b      	str	r3, [r1, #0]
			}
			else
			{
				GPIOB_AFRH |= ( Copy_u8AltValue << ( (Copy_u8PinID%8) * 4 ) );
			}break;
 8000f20:	e079      	b.n	8001016 <GPIO_voidSetAltFunction+0x17e>
				GPIOB_AFRH |= ( Copy_u8AltValue << ( (Copy_u8PinID%8) * 4 ) );
 8000f22:	4b43      	ldr	r3, [pc, #268]	; (8001030 <GPIO_voidSetAltFunction+0x198>)
 8000f24:	681a      	ldr	r2, [r3, #0]
 8000f26:	79bb      	ldrb	r3, [r7, #6]
 8000f28:	f003 0307 	and.w	r3, r3, #7
 8000f2c:	009b      	lsls	r3, r3, #2
 8000f2e:	6839      	ldr	r1, [r7, #0]
 8000f30:	fa01 f303 	lsl.w	r3, r1, r3
 8000f34:	493e      	ldr	r1, [pc, #248]	; (8001030 <GPIO_voidSetAltFunction+0x198>)
 8000f36:	4313      	orrs	r3, r2
 8000f38:	600b      	str	r3, [r1, #0]
			}break;
 8000f3a:	e06c      	b.n	8001016 <GPIO_voidSetAltFunction+0x17e>

		case PORT_C:
			if(Copy_u8PinID < PIN8)
 8000f3c:	79bb      	ldrb	r3, [r7, #6]
 8000f3e:	2b07      	cmp	r3, #7
 8000f40:	d80a      	bhi.n	8000f58 <GPIO_voidSetAltFunction+0xc0>
			{
				GPIOC_AFRL |= ( Copy_u8AltValue << (Copy_u8PinID*4) );
 8000f42:	4b3c      	ldr	r3, [pc, #240]	; (8001034 <GPIO_voidSetAltFunction+0x19c>)
 8000f44:	681a      	ldr	r2, [r3, #0]
 8000f46:	79bb      	ldrb	r3, [r7, #6]
 8000f48:	009b      	lsls	r3, r3, #2
 8000f4a:	6839      	ldr	r1, [r7, #0]
 8000f4c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f50:	4938      	ldr	r1, [pc, #224]	; (8001034 <GPIO_voidSetAltFunction+0x19c>)
 8000f52:	4313      	orrs	r3, r2
 8000f54:	600b      	str	r3, [r1, #0]
			}
			else
			{
				GPIOC_AFRH |= ( Copy_u8AltValue << ( (Copy_u8PinID%8) * 4 ) );
			}break;
 8000f56:	e05e      	b.n	8001016 <GPIO_voidSetAltFunction+0x17e>
				GPIOC_AFRH |= ( Copy_u8AltValue << ( (Copy_u8PinID%8) * 4 ) );
 8000f58:	4b37      	ldr	r3, [pc, #220]	; (8001038 <GPIO_voidSetAltFunction+0x1a0>)
 8000f5a:	681a      	ldr	r2, [r3, #0]
 8000f5c:	79bb      	ldrb	r3, [r7, #6]
 8000f5e:	f003 0307 	and.w	r3, r3, #7
 8000f62:	009b      	lsls	r3, r3, #2
 8000f64:	6839      	ldr	r1, [r7, #0]
 8000f66:	fa01 f303 	lsl.w	r3, r1, r3
 8000f6a:	4933      	ldr	r1, [pc, #204]	; (8001038 <GPIO_voidSetAltFunction+0x1a0>)
 8000f6c:	4313      	orrs	r3, r2
 8000f6e:	600b      	str	r3, [r1, #0]
			}break;
 8000f70:	e051      	b.n	8001016 <GPIO_voidSetAltFunction+0x17e>

		case PORT_D:
			if(Copy_u8PinID < PIN8)
 8000f72:	79bb      	ldrb	r3, [r7, #6]
 8000f74:	2b07      	cmp	r3, #7
 8000f76:	d80a      	bhi.n	8000f8e <GPIO_voidSetAltFunction+0xf6>
			{
				GPIOD_AFRL |= ( Copy_u8AltValue << (Copy_u8PinID*4) );
 8000f78:	4b30      	ldr	r3, [pc, #192]	; (800103c <GPIO_voidSetAltFunction+0x1a4>)
 8000f7a:	681a      	ldr	r2, [r3, #0]
 8000f7c:	79bb      	ldrb	r3, [r7, #6]
 8000f7e:	009b      	lsls	r3, r3, #2
 8000f80:	6839      	ldr	r1, [r7, #0]
 8000f82:	fa01 f303 	lsl.w	r3, r1, r3
 8000f86:	492d      	ldr	r1, [pc, #180]	; (800103c <GPIO_voidSetAltFunction+0x1a4>)
 8000f88:	4313      	orrs	r3, r2
 8000f8a:	600b      	str	r3, [r1, #0]
			}
			else
			{
				GPIOD_AFRH |= ( Copy_u8AltValue << ( (Copy_u8PinID%8) * 4 ) );
			}break;
 8000f8c:	e043      	b.n	8001016 <GPIO_voidSetAltFunction+0x17e>
				GPIOD_AFRH |= ( Copy_u8AltValue << ( (Copy_u8PinID%8) * 4 ) );
 8000f8e:	4b2c      	ldr	r3, [pc, #176]	; (8001040 <GPIO_voidSetAltFunction+0x1a8>)
 8000f90:	681a      	ldr	r2, [r3, #0]
 8000f92:	79bb      	ldrb	r3, [r7, #6]
 8000f94:	f003 0307 	and.w	r3, r3, #7
 8000f98:	009b      	lsls	r3, r3, #2
 8000f9a:	6839      	ldr	r1, [r7, #0]
 8000f9c:	fa01 f303 	lsl.w	r3, r1, r3
 8000fa0:	4927      	ldr	r1, [pc, #156]	; (8001040 <GPIO_voidSetAltFunction+0x1a8>)
 8000fa2:	4313      	orrs	r3, r2
 8000fa4:	600b      	str	r3, [r1, #0]
			}break;
 8000fa6:	e036      	b.n	8001016 <GPIO_voidSetAltFunction+0x17e>

		case PORT_E:
			if(Copy_u8PinID < PIN8)
 8000fa8:	79bb      	ldrb	r3, [r7, #6]
 8000faa:	2b07      	cmp	r3, #7
 8000fac:	d80a      	bhi.n	8000fc4 <GPIO_voidSetAltFunction+0x12c>
			{
				GPIOE_AFRL |= ( Copy_u8AltValue << (Copy_u8PinID*4) );
 8000fae:	4b25      	ldr	r3, [pc, #148]	; (8001044 <GPIO_voidSetAltFunction+0x1ac>)
 8000fb0:	681a      	ldr	r2, [r3, #0]
 8000fb2:	79bb      	ldrb	r3, [r7, #6]
 8000fb4:	009b      	lsls	r3, r3, #2
 8000fb6:	6839      	ldr	r1, [r7, #0]
 8000fb8:	fa01 f303 	lsl.w	r3, r1, r3
 8000fbc:	4921      	ldr	r1, [pc, #132]	; (8001044 <GPIO_voidSetAltFunction+0x1ac>)
 8000fbe:	4313      	orrs	r3, r2
 8000fc0:	600b      	str	r3, [r1, #0]
			}
			else
			{
				GPIOE_AFRH |= ( Copy_u8AltValue << ( (Copy_u8PinID%8) * 4 ) );
			}break;
 8000fc2:	e028      	b.n	8001016 <GPIO_voidSetAltFunction+0x17e>
				GPIOE_AFRH |= ( Copy_u8AltValue << ( (Copy_u8PinID%8) * 4 ) );
 8000fc4:	4b20      	ldr	r3, [pc, #128]	; (8001048 <GPIO_voidSetAltFunction+0x1b0>)
 8000fc6:	681a      	ldr	r2, [r3, #0]
 8000fc8:	79bb      	ldrb	r3, [r7, #6]
 8000fca:	f003 0307 	and.w	r3, r3, #7
 8000fce:	009b      	lsls	r3, r3, #2
 8000fd0:	6839      	ldr	r1, [r7, #0]
 8000fd2:	fa01 f303 	lsl.w	r3, r1, r3
 8000fd6:	491c      	ldr	r1, [pc, #112]	; (8001048 <GPIO_voidSetAltFunction+0x1b0>)
 8000fd8:	4313      	orrs	r3, r2
 8000fda:	600b      	str	r3, [r1, #0]
			}break;
 8000fdc:	e01b      	b.n	8001016 <GPIO_voidSetAltFunction+0x17e>

		case PORT_H:
			if(Copy_u8PinID < PIN8)
 8000fde:	79bb      	ldrb	r3, [r7, #6]
 8000fe0:	2b07      	cmp	r3, #7
 8000fe2:	d80a      	bhi.n	8000ffa <GPIO_voidSetAltFunction+0x162>
			{
				GPIOH_AFRL |= ( Copy_u8AltValue << (Copy_u8PinID*4) );
 8000fe4:	4b19      	ldr	r3, [pc, #100]	; (800104c <GPIO_voidSetAltFunction+0x1b4>)
 8000fe6:	681a      	ldr	r2, [r3, #0]
 8000fe8:	79bb      	ldrb	r3, [r7, #6]
 8000fea:	009b      	lsls	r3, r3, #2
 8000fec:	6839      	ldr	r1, [r7, #0]
 8000fee:	fa01 f303 	lsl.w	r3, r1, r3
 8000ff2:	4916      	ldr	r1, [pc, #88]	; (800104c <GPIO_voidSetAltFunction+0x1b4>)
 8000ff4:	4313      	orrs	r3, r2
 8000ff6:	600b      	str	r3, [r1, #0]
			}
			else
			{
				GPIOH_AFRH |= ( Copy_u8AltValue << ( (Copy_u8PinID%8) * 4 ) );
			}break;
 8000ff8:	e00d      	b.n	8001016 <GPIO_voidSetAltFunction+0x17e>
				GPIOH_AFRH |= ( Copy_u8AltValue << ( (Copy_u8PinID%8) * 4 ) );
 8000ffa:	4b15      	ldr	r3, [pc, #84]	; (8001050 <GPIO_voidSetAltFunction+0x1b8>)
 8000ffc:	681a      	ldr	r2, [r3, #0]
 8000ffe:	79bb      	ldrb	r3, [r7, #6]
 8001000:	f003 0307 	and.w	r3, r3, #7
 8001004:	009b      	lsls	r3, r3, #2
 8001006:	6839      	ldr	r1, [r7, #0]
 8001008:	fa01 f303 	lsl.w	r3, r1, r3
 800100c:	4910      	ldr	r1, [pc, #64]	; (8001050 <GPIO_voidSetAltFunction+0x1b8>)
 800100e:	4313      	orrs	r3, r2
 8001010:	600b      	str	r3, [r1, #0]
			}break;
 8001012:	e000      	b.n	8001016 <GPIO_voidSetAltFunction+0x17e>
		default:
			break;
 8001014:	bf00      	nop
	}
}
 8001016:	bf00      	nop
 8001018:	370c      	adds	r7, #12
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop
 8001024:	40020020 	.word	0x40020020
 8001028:	40020024 	.word	0x40020024
 800102c:	40020420 	.word	0x40020420
 8001030:	40020424 	.word	0x40020424
 8001034:	40020820 	.word	0x40020820
 8001038:	40020824 	.word	0x40020824
 800103c:	40020c20 	.word	0x40020c20
 8001040:	40020c24 	.word	0x40020c24
 8001044:	40021020 	.word	0x40021020
 8001048:	40021024 	.word	0x40021024
 800104c:	40021c20 	.word	0x40021c20
 8001050:	40021c24 	.word	0x40021c24

08001054 <IR_voidIntialize>:




void IR_voidIntialize(u8 IR_num)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
 800105a:	4603      	mov	r3, r0
 800105c:	71fb      	strb	r3, [r7, #7]

	if(IR_num == IR1)
 800105e:	79fb      	ldrb	r3, [r7, #7]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d109      	bne.n	8001078 <IR_voidIntialize+0x24>
	{
	RCC_voidEnablePeripheralCLK(RCC_AHB1, IR1_PORT);
 8001064:	2103      	movs	r1, #3
 8001066:	2000      	movs	r0, #0
 8001068:	f000 fa88 	bl	800157c <RCC_voidEnablePeripheralCLK>
	GPIO_void_setPin_Direction(IR1_PORT, IR1_PIN, GENERAL_PURPOSE_OUTPUT_MODE);
 800106c:	2201      	movs	r2, #1
 800106e:	210f      	movs	r1, #15
 8001070:	2003      	movs	r0, #3
 8001072:	f7ff fa69 	bl	8000548 <GPIO_void_setPin_Direction>
//	SET_BIT(IR2_PORT_PULL_UP,2);
//	Clear_bit(IR2_PORT_PULL_UP,3);
	}


}
 8001076:	e00b      	b.n	8001090 <IR_voidIntialize+0x3c>
	else if(IR_num == IR2)
 8001078:	79fb      	ldrb	r3, [r7, #7]
 800107a:	2b01      	cmp	r3, #1
 800107c:	d108      	bne.n	8001090 <IR_voidIntialize+0x3c>
	RCC_voidEnablePeripheralCLK(RCC_AHB1, IR2_PORT);
 800107e:	2100      	movs	r1, #0
 8001080:	2000      	movs	r0, #0
 8001082:	f000 fa7b 	bl	800157c <RCC_voidEnablePeripheralCLK>
	GPIO_void_setPin_Direction(IR2_PORT, IR2_PIN, GENERAL_PURPOSE_OUTPUT_MODE);
 8001086:	2201      	movs	r2, #1
 8001088:	2101      	movs	r1, #1
 800108a:	2000      	movs	r0, #0
 800108c:	f7ff fa5c 	bl	8000548 <GPIO_void_setPin_Direction>
}
 8001090:	bf00      	nop
 8001092:	3708      	adds	r7, #8
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}

08001098 <delay>:
#include "GPIO_Interface.h"
#include "RCC_private.h"


void delay(u32 Copy_u32Time)
{
 8001098:	b480      	push	{r7}
 800109a:	b085      	sub	sp, #20
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
	for(u32 i = 0 ; i < Copy_u32Time ; i++)
 80010a0:	2300      	movs	r3, #0
 80010a2:	60fb      	str	r3, [r7, #12]
 80010a4:	e00d      	b.n	80010c2 <delay+0x2a>
	{
		for(u16 j = 0 ; j < 565 ; j++)
 80010a6:	2300      	movs	r3, #0
 80010a8:	817b      	strh	r3, [r7, #10]
 80010aa:	e003      	b.n	80010b4 <delay+0x1c>
		{
			asm("NOP");
 80010ac:	bf00      	nop
		for(u16 j = 0 ; j < 565 ; j++)
 80010ae:	897b      	ldrh	r3, [r7, #10]
 80010b0:	3301      	adds	r3, #1
 80010b2:	817b      	strh	r3, [r7, #10]
 80010b4:	897b      	ldrh	r3, [r7, #10]
 80010b6:	f5b3 7f0d 	cmp.w	r3, #564	; 0x234
 80010ba:	d9f7      	bls.n	80010ac <delay+0x14>
	for(u32 i = 0 ; i < Copy_u32Time ; i++)
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	3301      	adds	r3, #1
 80010c0:	60fb      	str	r3, [r7, #12]
 80010c2:	68fa      	ldr	r2, [r7, #12]
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	429a      	cmp	r2, r3
 80010c8:	d3ed      	bcc.n	80010a6 <delay+0xe>
		}
	}
}
 80010ca:	bf00      	nop
 80010cc:	bf00      	nop
 80010ce:	3714      	adds	r7, #20
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr

080010d8 <LCD_void_init>:
//			asm("NOP");
//		}
//	}
//}
void LCD_void_init(lcd_mode mode)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
 80010de:	4603      	mov	r3, r0
 80010e0:	71fb      	strb	r3, [r7, #7]
	GPIO_void_setPin_Direction(LCD_4BITS_PORT, LCD_RS_PIN , OUTPUT);
 80010e2:	2201      	movs	r2, #1
 80010e4:	2101      	movs	r1, #1
 80010e6:	2001      	movs	r0, #1
 80010e8:	f7ff fa2e 	bl	8000548 <GPIO_void_setPin_Direction>
	//GPIO_void_setPin_Direction(LCD_4BITS_PORT, LCD_RS_PIN,OUTPUT_PUSH_PULL);
	GPIO_void_setPin_Direction(LCD_4BITS_PORT, LCD_E_PIN , OUTPUT);
 80010ec:	2201      	movs	r2, #1
 80010ee:	2102      	movs	r1, #2
 80010f0:	2001      	movs	r0, #1
 80010f2:	f7ff fa29 	bl	8000548 <GPIO_void_setPin_Direction>
//		LCD_void_send_command(0x0E);
//		_delay_ms(1);
//		LCD_void_send_command(0x01);
//		_delay_ms(3);
//	}
	if(mode == LCD_enum_4BITS_MODE)
 80010f6:	79fb      	ldrb	r3, [r7, #7]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d134      	bne.n	8001166 <LCD_void_init+0x8e>
	{
		GPIO_void_setPin_Direction(LCD_4BITS_PORT , LCD_4BITS_PIN1 , OUTPUT);
 80010fc:	2201      	movs	r2, #1
 80010fe:	2103      	movs	r1, #3
 8001100:	2001      	movs	r0, #1
 8001102:	f7ff fa21 	bl	8000548 <GPIO_void_setPin_Direction>
		GPIO_void_setPin_Direction(LCD_4BITS_PORT , LCD_4BITS_PIN2 , OUTPUT);
 8001106:	2201      	movs	r2, #1
 8001108:	2104      	movs	r1, #4
 800110a:	2001      	movs	r0, #1
 800110c:	f7ff fa1c 	bl	8000548 <GPIO_void_setPin_Direction>
		GPIO_void_setPin_Direction(LCD_4BITS_PORT , LCD_4BITS_PIN3 , OUTPUT);
 8001110:	2201      	movs	r2, #1
 8001112:	2105      	movs	r1, #5
 8001114:	2001      	movs	r0, #1
 8001116:	f7ff fa17 	bl	8000548 <GPIO_void_setPin_Direction>
		GPIO_void_setPin_Direction(LCD_4BITS_PORT , LCD_4BITS_PIN4 , OUTPUT);
 800111a:	2201      	movs	r2, #1
 800111c:	2106      	movs	r1, #6
 800111e:	2001      	movs	r0, #1
 8001120:	f7ff fa12 	bl	8000548 <GPIO_void_setPin_Direction>

		delay(30);
 8001124:	201e      	movs	r0, #30
 8001126:	f7ff ffb7 	bl	8001098 <delay>
		LCD_voidWriteCmd(0x02);
 800112a:	2002      	movs	r0, #2
 800112c:	f000 f831 	bl	8001192 <LCD_voidWriteCmd>
		delay(1);
 8001130:	2001      	movs	r0, #1
 8001132:	f7ff ffb1 	bl	8001098 <delay>
		LCD_voidWriteCmd(0x28);
 8001136:	2028      	movs	r0, #40	; 0x28
 8001138:	f000 f82b 	bl	8001192 <LCD_voidWriteCmd>
		delay(1);
 800113c:	2001      	movs	r0, #1
 800113e:	f7ff ffab 	bl	8001098 <delay>
		LCD_voidWriteCmd(0x0E);
 8001142:	200e      	movs	r0, #14
 8001144:	f000 f825 	bl	8001192 <LCD_voidWriteCmd>
		delay(1);
 8001148:	2001      	movs	r0, #1
 800114a:	f7ff ffa5 	bl	8001098 <delay>
		LCD_voidWriteCmd(0x01);
 800114e:	2001      	movs	r0, #1
 8001150:	f000 f81f 	bl	8001192 <LCD_voidWriteCmd>
		delay(1);
 8001154:	2001      	movs	r0, #1
 8001156:	f7ff ff9f 	bl	8001098 <delay>
		LCD_voidWriteCmd(0x06);
 800115a:	2006      	movs	r0, #6
 800115c:	f000 f819 	bl	8001192 <LCD_voidWriteCmd>
		delay(3);
 8001160:	2003      	movs	r0, #3
 8001162:	f7ff ff99 	bl	8001098 <delay>
	}
}
 8001166:	bf00      	nop
 8001168:	3708      	adds	r7, #8
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}

0800116e <LCD_voidWriteData>:

extern void LCD_voidWriteData(u8 copy_u8data)
{
 800116e:	b580      	push	{r7, lr}
 8001170:	b082      	sub	sp, #8
 8001172:	af00      	add	r7, sp, #0
 8001174:	4603      	mov	r3, r0
 8001176:	71fb      	strb	r3, [r7, #7]
	GPIO_void_setPin_value(LCD_4BITS_PORT, LCD_RS_PIN, HIGH); //RS = 1 to write data
 8001178:	2201      	movs	r2, #1
 800117a:	2101      	movs	r1, #1
 800117c:	2001      	movs	r0, #1
 800117e:	f7ff fdb7 	bl	8000cf0 <GPIO_void_setPin_value>

		//execute data

		voidExecute(copy_u8data);
 8001182:	79fb      	ldrb	r3, [r7, #7]
 8001184:	4618      	mov	r0, r3
 8001186:	f000 f816 	bl	80011b6 <voidExecute>

}
 800118a:	bf00      	nop
 800118c:	3708      	adds	r7, #8
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}

08001192 <LCD_voidWriteCmd>:
/////////////////////////////////////////////////////////////////
extern void LCD_voidWriteCmd(u8 copy_u8data)
{
 8001192:	b580      	push	{r7, lr}
 8001194:	b082      	sub	sp, #8
 8001196:	af00      	add	r7, sp, #0
 8001198:	4603      	mov	r3, r0
 800119a:	71fb      	strb	r3, [r7, #7]
	GPIO_void_setPin_value(LCD_4BITS_PORT, LCD_RS_PIN, LOW); //RS = 0 to write command
 800119c:	2200      	movs	r2, #0
 800119e:	2101      	movs	r1, #1
 80011a0:	2001      	movs	r0, #1
 80011a2:	f7ff fda5 	bl	8000cf0 <GPIO_void_setPin_value>

	//execute data

	voidExecute(copy_u8data);
 80011a6:	79fb      	ldrb	r3, [r7, #7]
 80011a8:	4618      	mov	r0, r3
 80011aa:	f000 f804 	bl	80011b6 <voidExecute>
}
 80011ae:	bf00      	nop
 80011b0:	3708      	adds	r7, #8
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}

080011b6 <voidExecute>:
////////////////////////////////////////////////////////
static void voidExecute(u8 copy_u8Value)
{
 80011b6:	b580      	push	{r7, lr}
 80011b8:	b082      	sub	sp, #8
 80011ba:	af00      	add	r7, sp, #0
 80011bc:	4603      	mov	r3, r0
 80011be:	71fb      	strb	r3, [r7, #7]
	//GPIO_void_setPin_value(LCD_RW_PIN ,LOW );//RW=0 to write data

	if(GET_BIT(copy_u8Value,4))  //check bit4 of value equal 1 or no
 80011c0:	79fb      	ldrb	r3, [r7, #7]
 80011c2:	091b      	lsrs	r3, r3, #4
 80011c4:	b2db      	uxtb	r3, r3
 80011c6:	f003 0301 	and.w	r3, r3, #1
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d005      	beq.n	80011da <voidExecute+0x24>
	{
		GPIO_void_setPin_value(LCD_4BITS_PORT, LCD_4BITS_PIN1,HIGH);
 80011ce:	2201      	movs	r2, #1
 80011d0:	2103      	movs	r1, #3
 80011d2:	2001      	movs	r0, #1
 80011d4:	f7ff fd8c 	bl	8000cf0 <GPIO_void_setPin_value>
 80011d8:	e004      	b.n	80011e4 <voidExecute+0x2e>
	}
	else
	{
		GPIO_void_setPin_value(LCD_4BITS_PORT,LCD_4BITS_PIN1,LOW);
 80011da:	2200      	movs	r2, #0
 80011dc:	2103      	movs	r1, #3
 80011de:	2001      	movs	r0, #1
 80011e0:	f7ff fd86 	bl	8000cf0 <GPIO_void_setPin_value>
	}

	if(GET_BIT(copy_u8Value,5))  //check bit5 of value equal 1 or no
 80011e4:	79fb      	ldrb	r3, [r7, #7]
 80011e6:	095b      	lsrs	r3, r3, #5
 80011e8:	b2db      	uxtb	r3, r3
 80011ea:	f003 0301 	and.w	r3, r3, #1
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d005      	beq.n	80011fe <voidExecute+0x48>
	{

		GPIO_void_setPin_value(LCD_4BITS_PORT,LCD_4BITS_PIN2,HIGH);
 80011f2:	2201      	movs	r2, #1
 80011f4:	2104      	movs	r1, #4
 80011f6:	2001      	movs	r0, #1
 80011f8:	f7ff fd7a 	bl	8000cf0 <GPIO_void_setPin_value>
 80011fc:	e004      	b.n	8001208 <voidExecute+0x52>
	}
	else
	{
		GPIO_void_setPin_value(LCD_4BITS_PORT,LCD_4BITS_PIN2,LOW);
 80011fe:	2200      	movs	r2, #0
 8001200:	2104      	movs	r1, #4
 8001202:	2001      	movs	r0, #1
 8001204:	f7ff fd74 	bl	8000cf0 <GPIO_void_setPin_value>
	}

	if(GET_BIT(copy_u8Value,6))  //check bit6 of value equal 1 or no
 8001208:	79fb      	ldrb	r3, [r7, #7]
 800120a:	099b      	lsrs	r3, r3, #6
 800120c:	b2db      	uxtb	r3, r3
 800120e:	f003 0301 	and.w	r3, r3, #1
 8001212:	2b00      	cmp	r3, #0
 8001214:	d005      	beq.n	8001222 <voidExecute+0x6c>
	{
		GPIO_void_setPin_value(LCD_4BITS_PORT,LCD_4BITS_PIN3,HIGH);
 8001216:	2201      	movs	r2, #1
 8001218:	2105      	movs	r1, #5
 800121a:	2001      	movs	r0, #1
 800121c:	f7ff fd68 	bl	8000cf0 <GPIO_void_setPin_value>
 8001220:	e004      	b.n	800122c <voidExecute+0x76>
	}
	else
	{
		GPIO_void_setPin_value(LCD_4BITS_PORT,LCD_4BITS_PIN3,LOW);
 8001222:	2200      	movs	r2, #0
 8001224:	2105      	movs	r1, #5
 8001226:	2001      	movs	r0, #1
 8001228:	f7ff fd62 	bl	8000cf0 <GPIO_void_setPin_value>
	}

	if(GET_BIT(copy_u8Value,7))  //check bit7 of value equal 1 or no
 800122c:	79fb      	ldrb	r3, [r7, #7]
 800122e:	09db      	lsrs	r3, r3, #7
 8001230:	b2db      	uxtb	r3, r3
 8001232:	f003 0301 	and.w	r3, r3, #1
 8001236:	2b00      	cmp	r3, #0
 8001238:	d005      	beq.n	8001246 <voidExecute+0x90>
	{

		GPIO_void_setPin_value(LCD_4BITS_PORT,LCD_4BITS_PIN4,HIGH);
 800123a:	2201      	movs	r2, #1
 800123c:	2106      	movs	r1, #6
 800123e:	2001      	movs	r0, #1
 8001240:	f7ff fd56 	bl	8000cf0 <GPIO_void_setPin_value>
 8001244:	e004      	b.n	8001250 <voidExecute+0x9a>
	}
	else
	{
		GPIO_void_setPin_value(LCD_4BITS_PORT,LCD_4BITS_PIN4,LOW);
 8001246:	2200      	movs	r2, #0
 8001248:	2106      	movs	r1, #6
 800124a:	2001      	movs	r0, #1
 800124c:	f7ff fd50 	bl	8000cf0 <GPIO_void_setPin_value>
	}
   /************  enable  pulse*********************/
   /* E = 1 */
	GPIO_void_setPin_value(LCD_4BITS_PORT,LCD_E_PIN,HIGH);
 8001250:	2201      	movs	r2, #1
 8001252:	2102      	movs	r1, #2
 8001254:	2001      	movs	r0, #1
 8001256:	f7ff fd4b 	bl	8000cf0 <GPIO_void_setPin_value>
	delay(1);
 800125a:	2001      	movs	r0, #1
 800125c:	f7ff ff1c 	bl	8001098 <delay>

	       /*E = 0*/
	GPIO_void_setPin_value(LCD_4BITS_PORT,LCD_E_PIN,LOW);
 8001260:	2200      	movs	r2, #0
 8001262:	2102      	movs	r1, #2
 8001264:	2001      	movs	r0, #1
 8001266:	f7ff fd43 	bl	8000cf0 <GPIO_void_setPin_value>
	delay(1);
 800126a:	2001      	movs	r0, #1
 800126c:	f7ff ff14 	bl	8001098 <delay>

	//send first for bits

	if(GET_BIT(copy_u8Value,0))  //check bit0 of value equal 1 or no
 8001270:	79fb      	ldrb	r3, [r7, #7]
 8001272:	f003 0301 	and.w	r3, r3, #1
 8001276:	2b00      	cmp	r3, #0
 8001278:	d005      	beq.n	8001286 <voidExecute+0xd0>
	{
		GPIO_void_setPin_value(LCD_4BITS_PORT,LCD_4BITS_PIN1,HIGH);
 800127a:	2201      	movs	r2, #1
 800127c:	2103      	movs	r1, #3
 800127e:	2001      	movs	r0, #1
 8001280:	f7ff fd36 	bl	8000cf0 <GPIO_void_setPin_value>
 8001284:	e004      	b.n	8001290 <voidExecute+0xda>
	}
	else
	{
		GPIO_void_setPin_value(LCD_4BITS_PORT,LCD_4BITS_PIN1,LOW);
 8001286:	2200      	movs	r2, #0
 8001288:	2103      	movs	r1, #3
 800128a:	2001      	movs	r0, #1
 800128c:	f7ff fd30 	bl	8000cf0 <GPIO_void_setPin_value>
	}

	if(GET_BIT(copy_u8Value,1))  //check bit1 of value equal 1 or no
 8001290:	79fb      	ldrb	r3, [r7, #7]
 8001292:	085b      	lsrs	r3, r3, #1
 8001294:	b2db      	uxtb	r3, r3
 8001296:	f003 0301 	and.w	r3, r3, #1
 800129a:	2b00      	cmp	r3, #0
 800129c:	d005      	beq.n	80012aa <voidExecute+0xf4>
	{

		GPIO_void_setPin_value(LCD_4BITS_PORT,LCD_4BITS_PIN2,HIGH);
 800129e:	2201      	movs	r2, #1
 80012a0:	2104      	movs	r1, #4
 80012a2:	2001      	movs	r0, #1
 80012a4:	f7ff fd24 	bl	8000cf0 <GPIO_void_setPin_value>
 80012a8:	e004      	b.n	80012b4 <voidExecute+0xfe>
	}
	else
	{
		GPIO_void_setPin_value(LCD_4BITS_PORT,LCD_4BITS_PIN2,LOW);
 80012aa:	2200      	movs	r2, #0
 80012ac:	2104      	movs	r1, #4
 80012ae:	2001      	movs	r0, #1
 80012b0:	f7ff fd1e 	bl	8000cf0 <GPIO_void_setPin_value>
	}

	if(GET_BIT(copy_u8Value,2))  //check bit2 of value equal 1 or no
 80012b4:	79fb      	ldrb	r3, [r7, #7]
 80012b6:	089b      	lsrs	r3, r3, #2
 80012b8:	b2db      	uxtb	r3, r3
 80012ba:	f003 0301 	and.w	r3, r3, #1
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d005      	beq.n	80012ce <voidExecute+0x118>
	{
		GPIO_void_setPin_value(LCD_4BITS_PORT,LCD_4BITS_PIN3,HIGH);
 80012c2:	2201      	movs	r2, #1
 80012c4:	2105      	movs	r1, #5
 80012c6:	2001      	movs	r0, #1
 80012c8:	f7ff fd12 	bl	8000cf0 <GPIO_void_setPin_value>
 80012cc:	e004      	b.n	80012d8 <voidExecute+0x122>
	}
	else
	{
		GPIO_void_setPin_value(LCD_4BITS_PORT,LCD_4BITS_PIN3,LOW);
 80012ce:	2200      	movs	r2, #0
 80012d0:	2105      	movs	r1, #5
 80012d2:	2001      	movs	r0, #1
 80012d4:	f7ff fd0c 	bl	8000cf0 <GPIO_void_setPin_value>
	}

	if(GET_BIT(copy_u8Value,3))  //check bit3 of value equal 1 or no
 80012d8:	79fb      	ldrb	r3, [r7, #7]
 80012da:	08db      	lsrs	r3, r3, #3
 80012dc:	b2db      	uxtb	r3, r3
 80012de:	f003 0301 	and.w	r3, r3, #1
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d005      	beq.n	80012f2 <voidExecute+0x13c>
	{

		GPIO_void_setPin_value(LCD_4BITS_PORT,LCD_4BITS_PIN4,HIGH);
 80012e6:	2201      	movs	r2, #1
 80012e8:	2106      	movs	r1, #6
 80012ea:	2001      	movs	r0, #1
 80012ec:	f7ff fd00 	bl	8000cf0 <GPIO_void_setPin_value>
 80012f0:	e004      	b.n	80012fc <voidExecute+0x146>
	}
	else
	{
		GPIO_void_setPin_value(LCD_4BITS_PORT,LCD_4BITS_PIN4,LOW);
 80012f2:	2200      	movs	r2, #0
 80012f4:	2106      	movs	r1, #6
 80012f6:	2001      	movs	r0, #1
 80012f8:	f7ff fcfa 	bl	8000cf0 <GPIO_void_setPin_value>
	}
	   /************  enable  pulse*********************/
	 /* E = 1 */
	GPIO_void_setPin_value(LCD_4BITS_PORT,LCD_E_PIN,HIGH);
 80012fc:	2201      	movs	r2, #1
 80012fe:	2102      	movs	r1, #2
 8001300:	2001      	movs	r0, #1
 8001302:	f7ff fcf5 	bl	8000cf0 <GPIO_void_setPin_value>
	delay(1);
 8001306:	2001      	movs	r0, #1
 8001308:	f7ff fec6 	bl	8001098 <delay>

		/*E = 0*/
	 GPIO_void_setPin_value(LCD_4BITS_PORT,LCD_E_PIN,LOW);
 800130c:	2200      	movs	r2, #0
 800130e:	2102      	movs	r1, #2
 8001310:	2001      	movs	r0, #1
 8001312:	f7ff fced 	bl	8000cf0 <GPIO_void_setPin_value>
	 delay(1);
 8001316:	2001      	movs	r0, #1
 8001318:	f7ff febe 	bl	8001098 <delay>

}//function end
 800131c:	bf00      	nop
 800131e:	3708      	adds	r7, #8
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}

08001324 <LCD_void_write_string>:

////////////////////////////////////////////////////////
void LCD_void_write_string(u8* str)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b084      	sub	sp, #16
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]

	delay(3);
 800132c:	2003      	movs	r0, #3
 800132e:	f7ff feb3 	bl	8001098 <delay>
	u8 counter=0;
 8001332:	2300      	movs	r3, #0
 8001334:	73fb      	strb	r3, [r7, #15]
	while(str[counter] != '\0')
 8001336:	e009      	b.n	800134c <LCD_void_write_string+0x28>
	{
		LCD_voidWriteData(str[counter]);
 8001338:	7bfb      	ldrb	r3, [r7, #15]
 800133a:	687a      	ldr	r2, [r7, #4]
 800133c:	4413      	add	r3, r2
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	4618      	mov	r0, r3
 8001342:	f7ff ff14 	bl	800116e <LCD_voidWriteData>
		counter++;
 8001346:	7bfb      	ldrb	r3, [r7, #15]
 8001348:	3301      	adds	r3, #1
 800134a:	73fb      	strb	r3, [r7, #15]
	while(str[counter] != '\0')
 800134c:	7bfb      	ldrb	r3, [r7, #15]
 800134e:	687a      	ldr	r2, [r7, #4]
 8001350:	4413      	add	r3, r2
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d1ef      	bne.n	8001338 <LCD_void_write_string+0x14>
	}
}
 8001358:	bf00      	nop
 800135a:	bf00      	nop
 800135c:	3710      	adds	r7, #16
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
	...

08001364 <LCD_void_print_unsigned_integer>:
void LCD_void_print_unsigned_integer(u32 number)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b088      	sub	sp, #32
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
	delay(3);
 800136c:	2003      	movs	r0, #3
 800136e:	f7ff fe93 	bl	8001098 <delay>
	u8 arr[16];
	u8 counter = 0 ;
 8001372:	2300      	movs	r3, #0
 8001374:	77fb      	strb	r3, [r7, #31]
	if (number == 0)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d11c      	bne.n	80013b6 <LCD_void_print_unsigned_integer+0x52>
	{
		LCD_voidWriteData('0');
 800137c:	2030      	movs	r0, #48	; 0x30
 800137e:	f7ff fef6 	bl	800116e <LCD_voidWriteData>
	}
	while(number && (counter<16))
 8001382:	e018      	b.n	80013b6 <LCD_void_print_unsigned_integer+0x52>
	{
		arr[counter++]= number % 10;
 8001384:	6879      	ldr	r1, [r7, #4]
 8001386:	4b1a      	ldr	r3, [pc, #104]	; (80013f0 <LCD_void_print_unsigned_integer+0x8c>)
 8001388:	fba3 2301 	umull	r2, r3, r3, r1
 800138c:	08da      	lsrs	r2, r3, #3
 800138e:	4613      	mov	r3, r2
 8001390:	009b      	lsls	r3, r3, #2
 8001392:	4413      	add	r3, r2
 8001394:	005b      	lsls	r3, r3, #1
 8001396:	1aca      	subs	r2, r1, r3
 8001398:	7ffb      	ldrb	r3, [r7, #31]
 800139a:	1c59      	adds	r1, r3, #1
 800139c:	77f9      	strb	r1, [r7, #31]
 800139e:	b2d2      	uxtb	r2, r2
 80013a0:	f107 0120 	add.w	r1, r7, #32
 80013a4:	440b      	add	r3, r1
 80013a6:	f803 2c14 	strb.w	r2, [r3, #-20]
		number /= 10;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	4a10      	ldr	r2, [pc, #64]	; (80013f0 <LCD_void_print_unsigned_integer+0x8c>)
 80013ae:	fba2 2303 	umull	r2, r3, r2, r3
 80013b2:	08db      	lsrs	r3, r3, #3
 80013b4:	607b      	str	r3, [r7, #4]
	while(number && (counter<16))
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d011      	beq.n	80013e0 <LCD_void_print_unsigned_integer+0x7c>
 80013bc:	7ffb      	ldrb	r3, [r7, #31]
 80013be:	2b0f      	cmp	r3, #15
 80013c0:	d9e0      	bls.n	8001384 <LCD_void_print_unsigned_integer+0x20>
	}
	while (counter)
 80013c2:	e00d      	b.n	80013e0 <LCD_void_print_unsigned_integer+0x7c>
	{
		LCD_voidWriteData(arr[--counter]+ 48);
 80013c4:	7ffb      	ldrb	r3, [r7, #31]
 80013c6:	3b01      	subs	r3, #1
 80013c8:	77fb      	strb	r3, [r7, #31]
 80013ca:	7ffb      	ldrb	r3, [r7, #31]
 80013cc:	f107 0220 	add.w	r2, r7, #32
 80013d0:	4413      	add	r3, r2
 80013d2:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 80013d6:	3330      	adds	r3, #48	; 0x30
 80013d8:	b2db      	uxtb	r3, r3
 80013da:	4618      	mov	r0, r3
 80013dc:	f7ff fec7 	bl	800116e <LCD_voidWriteData>
	while (counter)
 80013e0:	7ffb      	ldrb	r3, [r7, #31]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d1ee      	bne.n	80013c4 <LCD_void_print_unsigned_integer+0x60>
	}
}
 80013e6:	bf00      	nop
 80013e8:	bf00      	nop
 80013ea:	3720      	adds	r7, #32
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	cccccccd 	.word	0xcccccccd

080013f4 <LCD_void_goto>:
void LCD_void_goto(u8 raw , u8 col)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	4603      	mov	r3, r0
 80013fc:	460a      	mov	r2, r1
 80013fe:	71fb      	strb	r3, [r7, #7]
 8001400:	4613      	mov	r3, r2
 8001402:	71bb      	strb	r3, [r7, #6]
	switch(raw)
 8001404:	79fb      	ldrb	r3, [r7, #7]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d002      	beq.n	8001410 <LCD_void_goto+0x1c>
 800140a:	2b01      	cmp	r3, #1
 800140c:	d00a      	beq.n	8001424 <LCD_void_goto+0x30>
		{
		LCD_voidWriteCmd(0xc0 + col);
		}
	break;
	}
}
 800140e:	e016      	b.n	800143e <LCD_void_goto+0x4a>
	case 0 : if((col <16) && (col >= 0))
 8001410:	79bb      	ldrb	r3, [r7, #6]
 8001412:	2b0f      	cmp	r3, #15
 8001414:	d810      	bhi.n	8001438 <LCD_void_goto+0x44>
		LCD_voidWriteCmd(0x80 + col);
 8001416:	79bb      	ldrb	r3, [r7, #6]
 8001418:	3b80      	subs	r3, #128	; 0x80
 800141a:	b2db      	uxtb	r3, r3
 800141c:	4618      	mov	r0, r3
 800141e:	f7ff feb8 	bl	8001192 <LCD_voidWriteCmd>
	break;
 8001422:	e009      	b.n	8001438 <LCD_void_goto+0x44>
	case 1 : if((col <16) && (col >= 0))
 8001424:	79bb      	ldrb	r3, [r7, #6]
 8001426:	2b0f      	cmp	r3, #15
 8001428:	d808      	bhi.n	800143c <LCD_void_goto+0x48>
		LCD_voidWriteCmd(0xc0 + col);
 800142a:	79bb      	ldrb	r3, [r7, #6]
 800142c:	3b40      	subs	r3, #64	; 0x40
 800142e:	b2db      	uxtb	r3, r3
 8001430:	4618      	mov	r0, r3
 8001432:	f7ff feae 	bl	8001192 <LCD_voidWriteCmd>
	break;
 8001436:	e001      	b.n	800143c <LCD_void_goto+0x48>
	break;
 8001438:	bf00      	nop
 800143a:	e000      	b.n	800143e <LCD_void_goto+0x4a>
	break;
 800143c:	bf00      	nop
}
 800143e:	bf00      	nop
 8001440:	3708      	adds	r7, #8
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
	...

08001448 <NVIC_voidInit>:
#include "NVIC_config.h"
#include "NVIC_interface.h"
#include "NVIC_private.h"

void	NVIC_voidInit(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0

#ifndef SCB_AIRCR
#define SCB_AIRCR     *((volatile u32*)(SCB_BASE_ADDRESS + 0x0C))
#endif

SCB_AIRCR = NVIC_NO_GROUPS_SUB;
 800144c:	4b03      	ldr	r3, [pc, #12]	; (800145c <NVIC_voidInit+0x14>)
 800144e:	4a04      	ldr	r2, [pc, #16]	; (8001460 <NVIC_voidInit+0x18>)
 8001450:	601a      	str	r2, [r3, #0]
}
 8001452:	bf00      	nop
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr
 800145c:	e000ed0c 	.word	0xe000ed0c
 8001460:	05fa0600 	.word	0x05fa0600

08001464 <NVIC_voidEnablePeripheral>:
/*			NVIC enable peripheral (gowa el core)*/
void	NVIC_voidEnablePeripheral(u8 Copy_u8InterruptNmb)
{
 8001464:	b480      	push	{r7}
 8001466:	b083      	sub	sp, #12
 8001468:	af00      	add	r7, sp, #0
 800146a:	4603      	mov	r3, r0
 800146c:	71fb      	strb	r3, [r7, #7]
	//range check
		if (Copy_u8InterruptNmb < 32)//doxy gen
 800146e:	79fb      	ldrb	r3, [r7, #7]
 8001470:	2b1f      	cmp	r3, #31
 8001472:	d805      	bhi.n	8001480 <NVIC_voidEnablePeripheral+0x1c>
		{
		//ISER0 (0:31)
		//SET_BIT(NVIC_ISER0 , Copy_u8InterruptNmb);
		//Read-Modify-Write

		NVIC_ISER0 = (1 << Copy_u8InterruptNmb);
 8001474:	79fb      	ldrb	r3, [r7, #7]
 8001476:	2201      	movs	r2, #1
 8001478:	409a      	lsls	r2, r3
 800147a:	4b16      	ldr	r3, [pc, #88]	; (80014d4 <NVIC_voidEnablePeripheral+0x70>)
 800147c:	601a      	str	r2, [r3, #0]
					/* READ - Modify - Write            */
					//SET_BIT(NVIC_ISER3 ,Copy_u8InterruptNmb );

					NVIC_ISER3 = (1 << Copy_u8InterruptNmb);
			}
}
 800147e:	e023      	b.n	80014c8 <NVIC_voidEnablePeripheral+0x64>
		else if(Copy_u8InterruptNmb < 64)
 8001480:	79fb      	ldrb	r3, [r7, #7]
 8001482:	2b3f      	cmp	r3, #63	; 0x3f
 8001484:	d808      	bhi.n	8001498 <NVIC_voidEnablePeripheral+0x34>
					Copy_u8InterruptNmb -= 32;
 8001486:	79fb      	ldrb	r3, [r7, #7]
 8001488:	3b20      	subs	r3, #32
 800148a:	71fb      	strb	r3, [r7, #7]
					NVIC_ISER1 = (1 << Copy_u8InterruptNmb);
 800148c:	79fb      	ldrb	r3, [r7, #7]
 800148e:	2201      	movs	r2, #1
 8001490:	409a      	lsls	r2, r3
 8001492:	4b11      	ldr	r3, [pc, #68]	; (80014d8 <NVIC_voidEnablePeripheral+0x74>)
 8001494:	601a      	str	r2, [r3, #0]
}
 8001496:	e017      	b.n	80014c8 <NVIC_voidEnablePeripheral+0x64>
			else if(Copy_u8InterruptNmb < 96)
 8001498:	79fb      	ldrb	r3, [r7, #7]
 800149a:	2b5f      	cmp	r3, #95	; 0x5f
 800149c:	d808      	bhi.n	80014b0 <NVIC_voidEnablePeripheral+0x4c>
					Copy_u8InterruptNmb -= 64;
 800149e:	79fb      	ldrb	r3, [r7, #7]
 80014a0:	3b40      	subs	r3, #64	; 0x40
 80014a2:	71fb      	strb	r3, [r7, #7]
					NVIC_ISER2 = (1 << Copy_u8InterruptNmb);
 80014a4:	79fb      	ldrb	r3, [r7, #7]
 80014a6:	2201      	movs	r2, #1
 80014a8:	409a      	lsls	r2, r3
 80014aa:	4b0c      	ldr	r3, [pc, #48]	; (80014dc <NVIC_voidEnablePeripheral+0x78>)
 80014ac:	601a      	str	r2, [r3, #0]
}
 80014ae:	e00b      	b.n	80014c8 <NVIC_voidEnablePeripheral+0x64>
			else if(Copy_u8InterruptNmb < 128)
 80014b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	db07      	blt.n	80014c8 <NVIC_voidEnablePeripheral+0x64>
					Copy_u8InterruptNmb -= 96;
 80014b8:	79fb      	ldrb	r3, [r7, #7]
 80014ba:	3b60      	subs	r3, #96	; 0x60
 80014bc:	71fb      	strb	r3, [r7, #7]
					NVIC_ISER3 = (1 << Copy_u8InterruptNmb);
 80014be:	79fb      	ldrb	r3, [r7, #7]
 80014c0:	2201      	movs	r2, #1
 80014c2:	409a      	lsls	r2, r3
 80014c4:	4b06      	ldr	r3, [pc, #24]	; (80014e0 <NVIC_voidEnablePeripheral+0x7c>)
 80014c6:	601a      	str	r2, [r3, #0]
}
 80014c8:	bf00      	nop
 80014ca:	370c      	adds	r7, #12
 80014cc:	46bd      	mov	sp, r7
 80014ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d2:	4770      	bx	lr
 80014d4:	e000e100 	.word	0xe000e100
 80014d8:	e000e104 	.word	0xe000e104
 80014dc:	e000e108 	.word	0xe000e108
 80014e0:	e000e10c 	.word	0xe000e10c

080014e4 <NVIC_voidSetPriority>:
			/*        return error       */
		}
		return Local_u8ActiveBit;
}
void	NVIC_voidSetPriority(u8 Copy_u8Priority,u8 Copy_u8InterruptNmb)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	4603      	mov	r3, r0
 80014ec:	460a      	mov	r2, r1
 80014ee:	71fb      	strb	r3, [r7, #7]
 80014f0:	4613      	mov	r3, r2
 80014f2:	71bb      	strb	r3, [r7, #6]
	if(Copy_u8InterruptNmb < 97)
 80014f4:	79bb      	ldrb	r3, [r7, #6]
 80014f6:	2b60      	cmp	r3, #96	; 0x60
 80014f8:	d808      	bhi.n	800150c <NVIC_voidSetPriority+0x28>
		{
			NVIC_IPRx[Copy_u8InterruptNmb] = (Copy_u8Priority << 4);
 80014fa:	79bb      	ldrb	r3, [r7, #6]
 80014fc:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8001500:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8001504:	79fa      	ldrb	r2, [r7, #7]
 8001506:	0112      	lsls	r2, r2, #4
 8001508:	b2d2      	uxtb	r2, r2
 800150a:	701a      	strb	r2, [r3, #0]
		}
		else
		{
			/*         Return  Error*/
		}
}
 800150c:	bf00      	nop
 800150e:	370c      	adds	r7, #12
 8001510:	46bd      	mov	sp, r7
 8001512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001516:	4770      	bx	lr

08001518 <RCC_voidInit>:
#include "RCC_private.h"
#include "RCC_config.h"


 void RCC_voidInit(void)
 {
 8001518:	b480      	push	{r7}
 800151a:	b083      	sub	sp, #12
 800151c:	af00      	add	r7, sp, #0
	 u32 Local_u32TimeOut = 0;
 800151e:	2300      	movs	r3, #0
 8001520:	607b      	str	r3, [r7, #4]

	 	 /* RCC Configurations */


	 	 /* HSI ON */
         SET_BIT(RCC_CR, RCC_HSION);
 8001522:	4b14      	ldr	r3, [pc, #80]	; (8001574 <RCC_voidInit+0x5c>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4a13      	ldr	r2, [pc, #76]	; (8001574 <RCC_voidInit+0x5c>)
 8001528:	f043 0301 	orr.w	r3, r3, #1
 800152c:	6013      	str	r3, [r2, #0]
         /* polling to check if the HSI is ready or not */
         while((GET_BIT(RCC_CR, RCC_HSIRDY)==0) && (Local_u32TimeOut < 10000))
 800152e:	e002      	b.n	8001536 <RCC_voidInit+0x1e>
         {
        	 Local_u32TimeOut++;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	3301      	adds	r3, #1
 8001534:	607b      	str	r3, [r7, #4]
         while((GET_BIT(RCC_CR, RCC_HSIRDY)==0) && (Local_u32TimeOut < 10000))
 8001536:	4b0f      	ldr	r3, [pc, #60]	; (8001574 <RCC_voidInit+0x5c>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	085b      	lsrs	r3, r3, #1
 800153c:	f003 0301 	and.w	r3, r3, #1
 8001540:	2b00      	cmp	r3, #0
 8001542:	d104      	bne.n	800154e <RCC_voidInit+0x36>
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	f242 720f 	movw	r2, #9999	; 0x270f
 800154a:	4293      	cmp	r3, r2
 800154c:	d9f0      	bls.n	8001530 <RCC_voidInit+0x18>
         }
         Clear_bit(RCC_CFGR, 0);
 800154e:	4b0a      	ldr	r3, [pc, #40]	; (8001578 <RCC_voidInit+0x60>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a09      	ldr	r2, [pc, #36]	; (8001578 <RCC_voidInit+0x60>)
 8001554:	f023 0301 	bic.w	r3, r3, #1
 8001558:	6013      	str	r3, [r2, #0]
         Clear_bit(RCC_CFGR, 1);
 800155a:	4b07      	ldr	r3, [pc, #28]	; (8001578 <RCC_voidInit+0x60>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4a06      	ldr	r2, [pc, #24]	; (8001578 <RCC_voidInit+0x60>)
 8001560:	f023 0302 	bic.w	r3, r3, #2
 8001564:	6013      	str	r3, [r2, #0]
		#error "Wrong Choice of Clock Type"
    
     	 #endif
	#endif

 }
 8001566:	bf00      	nop
 8001568:	370c      	adds	r7, #12
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop
 8001574:	40023800 	.word	0x40023800
 8001578:	40023808 	.word	0x40023808

0800157c <RCC_voidEnablePeripheralCLK>:
//    }
//}   /* RCC_voidInit */

/* this function for enable Periperal CLK for GPIO, DMA and OTG */
void RCC_voidEnablePeripheralCLK(RCC_Bus Copy_u8BusID, gpio_type Copy_u8PerID)
{
 800157c:	b480      	push	{r7}
 800157e:	b083      	sub	sp, #12
 8001580:	af00      	add	r7, sp, #0
 8001582:	4603      	mov	r3, r0
 8001584:	460a      	mov	r2, r1
 8001586:	71fb      	strb	r3, [r7, #7]
 8001588:	4613      	mov	r3, r2
 800158a:	71bb      	strb	r3, [r7, #6]
    switch (Copy_u8BusID)
 800158c:	79fb      	ldrb	r3, [r7, #7]
 800158e:	2b03      	cmp	r3, #3
 8001590:	d836      	bhi.n	8001600 <RCC_voidEnablePeripheralCLK+0x84>
 8001592:	a201      	add	r2, pc, #4	; (adr r2, 8001598 <RCC_voidEnablePeripheralCLK+0x1c>)
 8001594:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001598:	080015a9 	.word	0x080015a9
 800159c:	080015bf 	.word	0x080015bf
 80015a0:	080015d5 	.word	0x080015d5
 80015a4:	080015eb 	.word	0x080015eb
    {
        case RCC_AHB1: SET_BIT(RCC_AHB1ENR, Copy_u8PerID); break;
 80015a8:	4b18      	ldr	r3, [pc, #96]	; (800160c <RCC_voidEnablePeripheralCLK+0x90>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	79ba      	ldrb	r2, [r7, #6]
 80015ae:	2101      	movs	r1, #1
 80015b0:	fa01 f202 	lsl.w	r2, r1, r2
 80015b4:	4611      	mov	r1, r2
 80015b6:	4a15      	ldr	r2, [pc, #84]	; (800160c <RCC_voidEnablePeripheralCLK+0x90>)
 80015b8:	430b      	orrs	r3, r1
 80015ba:	6013      	str	r3, [r2, #0]
 80015bc:	e020      	b.n	8001600 <RCC_voidEnablePeripheralCLK+0x84>
        case RCC_AHB2: SET_BIT(RCC_AHB2ENR, Copy_u8PerID); break;
 80015be:	4b14      	ldr	r3, [pc, #80]	; (8001610 <RCC_voidEnablePeripheralCLK+0x94>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	79ba      	ldrb	r2, [r7, #6]
 80015c4:	2101      	movs	r1, #1
 80015c6:	fa01 f202 	lsl.w	r2, r1, r2
 80015ca:	4611      	mov	r1, r2
 80015cc:	4a10      	ldr	r2, [pc, #64]	; (8001610 <RCC_voidEnablePeripheralCLK+0x94>)
 80015ce:	430b      	orrs	r3, r1
 80015d0:	6013      	str	r3, [r2, #0]
 80015d2:	e015      	b.n	8001600 <RCC_voidEnablePeripheralCLK+0x84>
        case RCC_ABP1: SET_BIT(RCC_APB1ENR, Copy_u8PerID); break;
 80015d4:	4b0f      	ldr	r3, [pc, #60]	; (8001614 <RCC_voidEnablePeripheralCLK+0x98>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	79ba      	ldrb	r2, [r7, #6]
 80015da:	2101      	movs	r1, #1
 80015dc:	fa01 f202 	lsl.w	r2, r1, r2
 80015e0:	4611      	mov	r1, r2
 80015e2:	4a0c      	ldr	r2, [pc, #48]	; (8001614 <RCC_voidEnablePeripheralCLK+0x98>)
 80015e4:	430b      	orrs	r3, r1
 80015e6:	6013      	str	r3, [r2, #0]
 80015e8:	e00a      	b.n	8001600 <RCC_voidEnablePeripheralCLK+0x84>
        case RCC_ABP2: SET_BIT(RCC_APB2ENR, Copy_u8PerID); break;
 80015ea:	4b0b      	ldr	r3, [pc, #44]	; (8001618 <RCC_voidEnablePeripheralCLK+0x9c>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	79ba      	ldrb	r2, [r7, #6]
 80015f0:	2101      	movs	r1, #1
 80015f2:	fa01 f202 	lsl.w	r2, r1, r2
 80015f6:	4611      	mov	r1, r2
 80015f8:	4a07      	ldr	r2, [pc, #28]	; (8001618 <RCC_voidEnablePeripheralCLK+0x9c>)
 80015fa:	430b      	orrs	r3, r1
 80015fc:	6013      	str	r3, [r2, #0]
 80015fe:	bf00      	nop
    }
}   /* RCC_voidEnablePeripheralCLK */
 8001600:	bf00      	nop
 8001602:	370c      	adds	r7, #12
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr
 800160c:	40023830 	.word	0x40023830
 8001610:	40023834 	.word	0x40023834
 8001614:	40023840 	.word	0x40023840
 8001618:	40023844 	.word	0x40023844

0800161c <SysTick_Handler>:


// lw core prehieral msh hnktb IRQ
// lw external prehieral nktb IRQ
void SysTick_Handler(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0
u8 Local_u8Temp;

/*		Check if Single				*/
if (STK_u8IntervalMode == STK_SINGLE_INTERVAL)
 8001622:	4b12      	ldr	r3, [pc, #72]	; (800166c <SysTick_Handler+0x50>)
 8001624:	781b      	ldrb	r3, [r3, #0]
 8001626:	2b05      	cmp	r3, #5
 8001628:	d111      	bne.n	800164e <SysTick_Handler+0x32>
{
/*		Disable Systick Interrupt	*/
		Clear_bit(STK-> CTRL ,1);
 800162a:	4b11      	ldr	r3, [pc, #68]	; (8001670 <SysTick_Handler+0x54>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4a10      	ldr	r2, [pc, #64]	; (8001670 <SysTick_Handler+0x54>)
 8001630:	f023 0302 	bic.w	r3, r3, #2
 8001634:	6013      	str	r3, [r2, #0]

/*		Stop the timer				*/
		Clear_bit(STK -> CTRL,0);
 8001636:	4b0e      	ldr	r3, [pc, #56]	; (8001670 <SysTick_Handler+0x54>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4a0d      	ldr	r2, [pc, #52]	; (8001670 <SysTick_Handler+0x54>)
 800163c:	f023 0301 	bic.w	r3, r3, #1
 8001640:	6013      	str	r3, [r2, #0]
		STK->LOAD =0;
 8001642:	4b0b      	ldr	r3, [pc, #44]	; (8001670 <SysTick_Handler+0x54>)
 8001644:	2200      	movs	r2, #0
 8001646:	605a      	str	r2, [r3, #4]
		STK->VAL=0;
 8001648:	4b09      	ldr	r3, [pc, #36]	; (8001670 <SysTick_Handler+0x54>)
 800164a:	2200      	movs	r2, #0
 800164c:	609a      	str	r2, [r3, #8]
}//end if

/*	Call Back Notification			*/
STK_PfCallBack();
 800164e:	4b09      	ldr	r3, [pc, #36]	; (8001674 <SysTick_Handler+0x58>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4798      	blx	r3

/*	Clear the interrupt flag		 */
Local_u8Temp = GET_BIT(STK->CTRL , 16);
 8001654:	4b06      	ldr	r3, [pc, #24]	; (8001670 <SysTick_Handler+0x54>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	0c1b      	lsrs	r3, r3, #16
 800165a:	b2db      	uxtb	r3, r3
 800165c:	f003 0301 	and.w	r3, r3, #1
 8001660:	71fb      	strb	r3, [r7, #7]

}//end SysTick_Handler
 8001662:	bf00      	nop
 8001664:	3708      	adds	r7, #8
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	20000000 	.word	0x20000000
 8001670:	e000e010 	.word	0xe000e010
 8001674:	20000030 	.word	0x20000030

08001678 <Flame_sensor_voidIntialize>:




void Flame_sensor_voidIntialize(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0


	RCC_voidEnablePeripheralCLK(RCC_AHB1, FLAME_SENSOR_PORT);
 800167c:	2100      	movs	r1, #0
 800167e:	2000      	movs	r0, #0
 8001680:	f7ff ff7c 	bl	800157c <RCC_voidEnablePeripheralCLK>
	GPIO_void_setPin_Direction(FLAME_SENSOR_PORT, FLAME_SENSOR_PIN, GENERAL_PURPOSE_OUTPUT_MODE);
 8001684:	2201      	movs	r2, #1
 8001686:	2104      	movs	r1, #4
 8001688:	2000      	movs	r0, #0
 800168a:	f7fe ff5d 	bl	8000548 <GPIO_void_setPin_Direction>
//	Clear_bit(IR1_PORT_PULL_UP,1);




}
 800168e:	bf00      	nop
 8001690:	bd80      	pop	{r7, pc}
	...

08001694 <Application1>:

/*
 * Gets Car Count for cars leaving the parking and opens then closes the door
 */
void Application1(void)// car moving out
{
 8001694:	b580      	push	{r7, lr}
 8001696:	af00      	add	r7, sp, #0

	LCD_voidWriteCmd(0x01);// Clear LCD
 8001698:	2001      	movs	r0, #1
 800169a:	f7ff fd7a 	bl	8001192 <LCD_voidWriteCmd>

	if (car_count == no_car_count)// if parking is empty
 800169e:	4b2a      	ldr	r3, [pc, #168]	; (8001748 <Application1+0xb4>)
 80016a0:	781b      	ldrb	r3, [r3, #0]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d109      	bne.n	80016ba <Application1+0x26>
		{
		LCD_void_goto(1, 3);
 80016a6:	2103      	movs	r1, #3
 80016a8:	2001      	movs	r0, #1
 80016aa:	f7ff fea3 	bl	80013f4 <LCD_void_goto>
		DCmotor_Stop();
 80016ae:	f7fe fdfb 	bl	80002a8 <DCmotor_Stop>
		LCD_void_write_string((u8*)"PARKING EMPTY");
 80016b2:	4826      	ldr	r0, [pc, #152]	; (800174c <Application1+0xb8>)
 80016b4:	f7ff fe36 	bl	8001324 <LCD_void_write_string>
		DCmotor_Stop();
		Exit_Flag = 1;
		}


}
 80016b8:	e044      	b.n	8001744 <Application1+0xb0>
		car_count --;
 80016ba:	4b23      	ldr	r3, [pc, #140]	; (8001748 <Application1+0xb4>)
 80016bc:	781b      	ldrb	r3, [r3, #0]
 80016be:	3b01      	subs	r3, #1
 80016c0:	b2da      	uxtb	r2, r3
 80016c2:	4b21      	ldr	r3, [pc, #132]	; (8001748 <Application1+0xb4>)
 80016c4:	701a      	strb	r2, [r3, #0]
		LCD_void_write_string((u8*)"Car Leaving");
 80016c6:	4822      	ldr	r0, [pc, #136]	; (8001750 <Application1+0xbc>)
 80016c8:	f7ff fe2c 	bl	8001324 <LCD_void_write_string>
		LCD_void_goto(1, 3);
 80016cc:	2103      	movs	r1, #3
 80016ce:	2001      	movs	r0, #1
 80016d0:	f7ff fe90 	bl	80013f4 <LCD_void_goto>
		LCD_void_write_string((u8*)"Total Cars:");
 80016d4:	481f      	ldr	r0, [pc, #124]	; (8001754 <Application1+0xc0>)
 80016d6:	f7ff fe25 	bl	8001324 <LCD_void_write_string>
		LCD_void_print_unsigned_integer(car_count);
 80016da:	4b1b      	ldr	r3, [pc, #108]	; (8001748 <Application1+0xb4>)
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	4618      	mov	r0, r3
 80016e0:	f7ff fe40 	bl	8001364 <LCD_void_print_unsigned_integer>
		SEVSEG_VoidDisplay(SEG0, car_count);
 80016e4:	4b18      	ldr	r3, [pc, #96]	; (8001748 <Application1+0xb4>)
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	4619      	mov	r1, r3
 80016ea:	2000      	movs	r0, #0
 80016ec:	f000 fa6e 	bl	8001bcc <SEVSEG_VoidDisplay>
		EXTI_voidDisableLine(EXTI_LINE5);
 80016f0:	2005      	movs	r0, #5
 80016f2:	f7fe fe37 	bl	8000364 <EXTI_voidDisableLine>
		Open_Door();
 80016f6:	f000 fb41 	bl	8001d7c <Open_Door>
		EXTI_voidEnableLine(EXTI_LINE5);
 80016fa:	2005      	movs	r0, #5
 80016fc:	f7fe fe18 	bl	8000330 <EXTI_voidEnableLine>
		Close_Door();
 8001700:	f000 fb54 	bl	8001dac <Close_Door>
		LCD_voidWriteCmd(0x01);// Clear LCD
 8001704:	2001      	movs	r0, #1
 8001706:	f7ff fd44 	bl	8001192 <LCD_voidWriteCmd>
		LCD_void_goto(1, 3);
 800170a:	2103      	movs	r1, #3
 800170c:	2001      	movs	r0, #1
 800170e:	f7ff fe71 	bl	80013f4 <LCD_void_goto>
		LCD_void_write_string("Total Cars:");
 8001712:	4810      	ldr	r0, [pc, #64]	; (8001754 <Application1+0xc0>)
 8001714:	f7ff fe06 	bl	8001324 <LCD_void_write_string>
		Close_Door();
 8001718:	f000 fb48 	bl	8001dac <Close_Door>
		LCD_void_print_unsigned_integer(car_count);
 800171c:	4b0a      	ldr	r3, [pc, #40]	; (8001748 <Application1+0xb4>)
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	4618      	mov	r0, r3
 8001722:	f7ff fe1f 	bl	8001364 <LCD_void_print_unsigned_integer>
		SEVSEG_VoidDisplay(SEG0, car_count);
 8001726:	4b08      	ldr	r3, [pc, #32]	; (8001748 <Application1+0xb4>)
 8001728:	781b      	ldrb	r3, [r3, #0]
 800172a:	4619      	mov	r1, r3
 800172c:	2000      	movs	r0, #0
 800172e:	f000 fa4d 	bl	8001bcc <SEVSEG_VoidDisplay>
		delay(500);
 8001732:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001736:	f7ff fcaf 	bl	8001098 <delay>
		DCmotor_Stop();
 800173a:	f7fe fdb5 	bl	80002a8 <DCmotor_Stop>
		Exit_Flag = 1;
 800173e:	4b06      	ldr	r3, [pc, #24]	; (8001758 <Application1+0xc4>)
 8001740:	2201      	movs	r2, #1
 8001742:	701a      	strb	r2, [r3, #0]
}
 8001744:	bf00      	nop
 8001746:	bd80      	pop	{r7, pc}
 8001748:	20000001 	.word	0x20000001
 800174c:	08002184 	.word	0x08002184
 8001750:	08002194 	.word	0x08002194
 8001754:	080021a0 	.word	0x080021a0
 8001758:	20000034 	.word	0x20000034

0800175c <Application2>:
/*
 * Gets Car Count for cars going inside the parking and closes then opens the door
 */

void Application2(void)// car moving in
{
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0

	LCD_voidWriteCmd(0x01);// clear lcd
 8001760:	2001      	movs	r0, #1
 8001762:	f7ff fd16 	bl	8001192 <LCD_voidWriteCmd>

		if (car_count == max_car_count)
 8001766:	4b2c      	ldr	r3, [pc, #176]	; (8001818 <Application2+0xbc>)
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	2b0a      	cmp	r3, #10
 800176c:	d109      	bne.n	8001782 <Application2+0x26>
		{
			LCD_void_goto(1, 3);
 800176e:	2103      	movs	r1, #3
 8001770:	2001      	movs	r0, #1
 8001772:	f7ff fe3f 	bl	80013f4 <LCD_void_goto>
			DCmotor_Stop();
 8001776:	f7fe fd97 	bl	80002a8 <DCmotor_Stop>
			LCD_void_write_string("PARKING FULL");
 800177a:	4828      	ldr	r0, [pc, #160]	; (800181c <Application2+0xc0>)
 800177c:	f7ff fdd2 	bl	8001324 <LCD_void_write_string>
		delay(500);
		DCmotor_Stop();
		Exit_Flag =1;
		}

}
 8001780:	e048      	b.n	8001814 <Application2+0xb8>
		else if (car_count <= max_car_count)
 8001782:	4b25      	ldr	r3, [pc, #148]	; (8001818 <Application2+0xbc>)
 8001784:	781b      	ldrb	r3, [r3, #0]
 8001786:	2b0a      	cmp	r3, #10
 8001788:	d844      	bhi.n	8001814 <Application2+0xb8>
		car_count ++;
 800178a:	4b23      	ldr	r3, [pc, #140]	; (8001818 <Application2+0xbc>)
 800178c:	781b      	ldrb	r3, [r3, #0]
 800178e:	3301      	adds	r3, #1
 8001790:	b2da      	uxtb	r2, r3
 8001792:	4b21      	ldr	r3, [pc, #132]	; (8001818 <Application2+0xbc>)
 8001794:	701a      	strb	r2, [r3, #0]
		LCD_void_write_string((u8*)"CAR IN");
 8001796:	4822      	ldr	r0, [pc, #136]	; (8001820 <Application2+0xc4>)
 8001798:	f7ff fdc4 	bl	8001324 <LCD_void_write_string>
		LCD_void_goto(1, 3);
 800179c:	2103      	movs	r1, #3
 800179e:	2001      	movs	r0, #1
 80017a0:	f7ff fe28 	bl	80013f4 <LCD_void_goto>
		LCD_void_write_string("Total Cars:");
 80017a4:	481f      	ldr	r0, [pc, #124]	; (8001824 <Application2+0xc8>)
 80017a6:	f7ff fdbd 	bl	8001324 <LCD_void_write_string>
		LCD_void_print_unsigned_integer(car_count);
 80017aa:	4b1b      	ldr	r3, [pc, #108]	; (8001818 <Application2+0xbc>)
 80017ac:	781b      	ldrb	r3, [r3, #0]
 80017ae:	4618      	mov	r0, r3
 80017b0:	f7ff fdd8 	bl	8001364 <LCD_void_print_unsigned_integer>
		SEVSEG_VoidDisplay(SEG0, car_count);
 80017b4:	4b18      	ldr	r3, [pc, #96]	; (8001818 <Application2+0xbc>)
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	4619      	mov	r1, r3
 80017ba:	2000      	movs	r0, #0
 80017bc:	f000 fa06 	bl	8001bcc <SEVSEG_VoidDisplay>
		EXTI_voidDisableLine(EXTI_LINE5);
 80017c0:	2005      	movs	r0, #5
 80017c2:	f7fe fdcf 	bl	8000364 <EXTI_voidDisableLine>
		Open_Door();
 80017c6:	f000 fad9 	bl	8001d7c <Open_Door>
		EXTI_voidEnableLine(EXTI_LINE5);
 80017ca:	2005      	movs	r0, #5
 80017cc:	f7fe fdb0 	bl	8000330 <EXTI_voidEnableLine>
		Close_Door();
 80017d0:	f000 faec 	bl	8001dac <Close_Door>
		LCD_voidWriteCmd(0x01);// Clear LCD
 80017d4:	2001      	movs	r0, #1
 80017d6:	f7ff fcdc 	bl	8001192 <LCD_voidWriteCmd>
		LCD_void_goto(1, 3);
 80017da:	2103      	movs	r1, #3
 80017dc:	2001      	movs	r0, #1
 80017de:	f7ff fe09 	bl	80013f4 <LCD_void_goto>
		LCD_void_write_string("Total Cars:");
 80017e2:	4810      	ldr	r0, [pc, #64]	; (8001824 <Application2+0xc8>)
 80017e4:	f7ff fd9e 	bl	8001324 <LCD_void_write_string>
		Close_Door();
 80017e8:	f000 fae0 	bl	8001dac <Close_Door>
		LCD_void_print_unsigned_integer(car_count);
 80017ec:	4b0a      	ldr	r3, [pc, #40]	; (8001818 <Application2+0xbc>)
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	4618      	mov	r0, r3
 80017f2:	f7ff fdb7 	bl	8001364 <LCD_void_print_unsigned_integer>
		SEVSEG_VoidDisplay(SEG0, car_count);
 80017f6:	4b08      	ldr	r3, [pc, #32]	; (8001818 <Application2+0xbc>)
 80017f8:	781b      	ldrb	r3, [r3, #0]
 80017fa:	4619      	mov	r1, r3
 80017fc:	2000      	movs	r0, #0
 80017fe:	f000 f9e5 	bl	8001bcc <SEVSEG_VoidDisplay>
		delay(500);
 8001802:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001806:	f7ff fc47 	bl	8001098 <delay>
		DCmotor_Stop();
 800180a:	f7fe fd4d 	bl	80002a8 <DCmotor_Stop>
		Exit_Flag =1;
 800180e:	4b06      	ldr	r3, [pc, #24]	; (8001828 <Application2+0xcc>)
 8001810:	2201      	movs	r2, #1
 8001812:	701a      	strb	r2, [r3, #0]
}
 8001814:	bf00      	nop
 8001816:	bd80      	pop	{r7, pc}
 8001818:	20000001 	.word	0x20000001
 800181c:	080021ac 	.word	0x080021ac
 8001820:	080021bc 	.word	0x080021bc
 8001824:	080021a0 	.word	0x080021a0
 8001828:	20000034 	.word	0x20000034

0800182c <Application3>:
/*****************************************EXTI3*****************************************/
/*
 * This interrupt is of higher priority to be set once the flame sensor sends a HIGH signal
 */
void Application3(void)// car moving in
{
 800182c:	b580      	push	{r7, lr}
 800182e:	af00      	add	r7, sp, #0
	LCD_voidWriteCmd(0x01);// clear lcd
 8001830:	2001      	movs	r0, #1
 8001832:	f7ff fcae 	bl	8001192 <LCD_voidWriteCmd>
	LCD_void_goto(0, 0);
 8001836:	2100      	movs	r1, #0
 8001838:	2000      	movs	r0, #0
 800183a:	f7ff fddb 	bl	80013f4 <LCD_void_goto>
	LCD_void_write_string("FIRE ALARM");
 800183e:	480a      	ldr	r0, [pc, #40]	; (8001868 <Application3+0x3c>)
 8001840:	f7ff fd70 	bl	8001324 <LCD_void_write_string>
	LCD_void_goto(1, 0);
 8001844:	2100      	movs	r1, #0
 8001846:	2001      	movs	r0, #1
 8001848:	f7ff fdd4 	bl	80013f4 <LCD_void_goto>
	LCD_void_write_string("PLEASE EXIT");
 800184c:	4807      	ldr	r0, [pc, #28]	; (800186c <Application3+0x40>)
 800184e:	f7ff fd69 	bl	8001324 <LCD_void_write_string>
	Alarm_voidAlarmOn();
 8001852:	f7fe fce1 	bl	8000218 <Alarm_voidAlarmOn>
	Open_Door();
 8001856:	f000 fa91 	bl	8001d7c <Open_Door>
	delay(500);
 800185a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800185e:	f7ff fc1b 	bl	8001098 <delay>

}
 8001862:	bf00      	nop
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	080021c4 	.word	0x080021c4
 800186c:	080021d0 	.word	0x080021d0

08001870 <Application4>:
/************************************************************************************/
/*****************************************EXTI4*****************************************/
void Application4(void)//IR_u8GetState(IR1) == OBSTACLE
{
 8001870:	b580      	push	{r7, lr}
 8001872:	af00      	add	r7, sp, #0


			LCD_voidWriteCmd(0x01);// clear lcd
 8001874:	2001      	movs	r0, #1
 8001876:	f7ff fc8c 	bl	8001192 <LCD_voidWriteCmd>
			LCD_void_goto(0, 0);
 800187a:	2100      	movs	r1, #0
 800187c:	2000      	movs	r0, #0
 800187e:	f7ff fdb9 	bl	80013f4 <LCD_void_goto>
			LCD_void_write_string("Please Wait");
 8001882:	4809      	ldr	r0, [pc, #36]	; (80018a8 <Application4+0x38>)
 8001884:	f7ff fd4e 	bl	8001324 <LCD_void_write_string>
			LCD_void_goto(1, 0);
 8001888:	2100      	movs	r1, #0
 800188a:	2001      	movs	r0, #1
 800188c:	f7ff fdb2 	bl	80013f4 <LCD_void_goto>
			LCD_void_write_string("OBSTCALE FOUND");
 8001890:	4806      	ldr	r0, [pc, #24]	; (80018ac <Application4+0x3c>)
 8001892:	f7ff fd47 	bl	8001324 <LCD_void_write_string>
			DCmotor_Stop();
 8001896:	f7fe fd07 	bl	80002a8 <DCmotor_Stop>
			delay(500);
 800189a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800189e:	f7ff fbfb 	bl	8001098 <delay>


}
 80018a2:	bf00      	nop
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	080021dc 	.word	0x080021dc
 80018ac:	080021e8 	.word	0x080021e8

080018b0 <main>:

/************************************************************************************/
/*****************************************Main*****************************************/
int main(){
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b084      	sub	sp, #16
 80018b4:	af00      	add	r7, sp, #0
/*********************************************************************/
/*************************Local Variables*****************************/

	u8 data;
	u8 password[6];
	u8 Welcome_Flag = 0;
 80018b6:	2300      	movs	r3, #0
 80018b8:	73bb      	strb	r3, [r7, #14]
	u8 i;

/*********************************************************************/
/*********************************************************************/
	//RCC Enable for GPIO
		RCC_voidInit();
 80018ba:	f7ff fe2d 	bl	8001518 <RCC_voidInit>
		RCC_voidEnablePeripheralCLK(RCC_AHB1,RCC_GPIOA_EN);
 80018be:	2100      	movs	r1, #0
 80018c0:	2000      	movs	r0, #0
 80018c2:	f7ff fe5b 	bl	800157c <RCC_voidEnablePeripheralCLK>
		RCC_voidEnablePeripheralCLK(RCC_AHB1,RCC_GPIOB_EN);
 80018c6:	2101      	movs	r1, #1
 80018c8:	2000      	movs	r0, #0
 80018ca:	f7ff fe57 	bl	800157c <RCC_voidEnablePeripheralCLK>
		RCC_voidEnablePeripheralCLK(RCC_AHB1,RCC_GPIOC_EN);
 80018ce:	2102      	movs	r1, #2
 80018d0:	2000      	movs	r0, #0
 80018d2:	f7ff fe53 	bl	800157c <RCC_voidEnablePeripheralCLK>
		RCC_voidEnablePeripheralCLK(RCC_AHB1,RCC_GPIOD_EN);
 80018d6:	2103      	movs	r1, #3
 80018d8:	2000      	movs	r0, #0
 80018da:	f7ff fe4f 	bl	800157c <RCC_voidEnablePeripheralCLK>
		RCC_voidEnablePeripheralCLK(RCC_AHB1,RCC_GPIOE_EN);
 80018de:	2104      	movs	r1, #4
 80018e0:	2000      	movs	r0, #0
 80018e2:	f7ff fe4b 	bl	800157c <RCC_voidEnablePeripheralCLK>
/*********************************************************************/
		// Intializations


		//Seven Segment Initialize
		SEVSEG_VoidInitialize(SEG0);
 80018e6:	2000      	movs	r0, #0
 80018e8:	f000 f8d4 	bl	8001a94 <SEVSEG_VoidInitialize>
		SEVSEG_VoidEnable(SEG0);
 80018ec:	2000      	movs	r0, #0
 80018ee:	f000 fa11 	bl	8001d14 <SEVSEG_VoidEnable>

		// LCD Initialization
		LCD_void_init(LCD_enum_4BITS_MODE);// 4 bits mode
 80018f2:	2000      	movs	r0, #0
 80018f4:	f7ff fbf0 	bl	80010d8 <LCD_void_init>
		LCD_void_goto(0, 0);
 80018f8:	2100      	movs	r1, #0
 80018fa:	2000      	movs	r0, #0
 80018fc:	f7ff fd7a 	bl	80013f4 <LCD_void_goto>

		// DC Motor Initialization
		DCmotor_init();
 8001900:	f7fe fcab 	bl	800025a <DCmotor_init>

		//Switch Initialization
		SW_voidIntialize(SW0);
 8001904:	2000      	movs	r0, #0
 8001906:	f000 fadf 	bl	8001ec8 <SW_voidIntialize>

		//flame sensor Initialization
		Flame_sensor_voidIntialize();
 800190a:	f7ff feb5 	bl	8001678 <Flame_sensor_voidIntialize>

		//IR Initialization
		IR_voidIntialize(IR1);
 800190e:	2000      	movs	r0, #0
 8001910:	f7ff fba0 	bl	8001054 <IR_voidIntialize>

		//Alarm Initialization
		Alarm_voidInit();
 8001914:	f7fe fc5e 	bl	80001d4 <Alarm_voidInit>

/*********************************************************************/
/*********************************************************************/


L:		LCD_voidWriteCmd(0x01);
 8001918:	2001      	movs	r0, #1
 800191a:	f7ff fc3a 	bl	8001192 <LCD_voidWriteCmd>
		LCD_void_goto(0, 0);
 800191e:	2100      	movs	r1, #0
 8001920:	2000      	movs	r0, #0
 8001922:	f7ff fd67 	bl	80013f4 <LCD_void_goto>
		LCD_void_write_string("Insert Password:");
 8001926:	4851      	ldr	r0, [pc, #324]	; (8001a6c <main+0x1bc>)
 8001928:	f7ff fcfc 	bl	8001324 <LCD_void_write_string>
		LCD_void_goto(1, 0);
 800192c:	2100      	movs	r1, #0
 800192e:	2001      	movs	r0, #1
 8001930:	f7ff fd60 	bl	80013f4 <LCD_void_goto>

/*********************************************************************/
/*********************************************************************/

		//USART Initialize
		delay(500);
 8001934:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001938:	f7ff fbae 	bl	8001098 <delay>
		USART_voidInit();// initialize UART
 800193c:	f000 fb2e 	bl	8001f9c <USART_voidInit>

/*********************************************************************/
/*********************************************************************/

		// Start from the middle of the display
		LCD_void_goto(1, 5);
 8001940:	2105      	movs	r1, #5
 8001942:	2001      	movs	r0, #1
 8001944:	f7ff fd56 	bl	80013f4 <LCD_void_goto>

		//Recieve only 6 digits for password via USART
		for (i = 0 ; i < 6 ; i++)
 8001948:	2300      	movs	r3, #0
 800194a:	73fb      	strb	r3, [r7, #15]
 800194c:	e032      	b.n	80019b4 <main+0x104>
	{
		data = USART_u8Receive();
 800194e:	f000 fb9d 	bl	800208c <USART_u8Receive>
 8001952:	4603      	mov	r3, r0
 8001954:	737b      	strb	r3, [r7, #13]

		if (data >0 && data <= 9)// check that we received numbers from 1 to 9
 8001956:	7b7b      	ldrb	r3, [r7, #13]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d028      	beq.n	80019ae <main+0xfe>
 800195c:	7b7b      	ldrb	r3, [r7, #13]
 800195e:	2b09      	cmp	r3, #9
 8001960:	d825      	bhi.n	80019ae <main+0xfe>
		{
				password[i]=data;
 8001962:	7bfb      	ldrb	r3, [r7, #15]
 8001964:	f107 0210 	add.w	r2, r7, #16
 8001968:	4413      	add	r3, r2
 800196a:	7b7a      	ldrb	r2, [r7, #13]
 800196c:	f803 2c0c 	strb.w	r2, [r3, #-12]
				SEVSEG_VoidDisplay(SEG0, password[i]);
 8001970:	7bfb      	ldrb	r3, [r7, #15]
 8001972:	f107 0210 	add.w	r2, r7, #16
 8001976:	4413      	add	r3, r2
 8001978:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800197c:	4619      	mov	r1, r3
 800197e:	2000      	movs	r0, #0
 8001980:	f000 f924 	bl	8001bcc <SEVSEG_VoidDisplay>
				LCD_void_print_unsigned_integer(data);
 8001984:	7b7b      	ldrb	r3, [r7, #13]
 8001986:	4618      	mov	r0, r3
 8001988:	f7ff fcec 	bl	8001364 <LCD_void_print_unsigned_integer>
				LCD_void_goto(1, 5+i);
 800198c:	7bfb      	ldrb	r3, [r7, #15]
 800198e:	3305      	adds	r3, #5
 8001990:	b2db      	uxtb	r3, r3
 8001992:	4619      	mov	r1, r3
 8001994:	2001      	movs	r0, #1
 8001996:	f7ff fd2d 	bl	80013f4 <LCD_void_goto>
				delay(100);
 800199a:	2064      	movs	r0, #100	; 0x64
 800199c:	f7ff fb7c 	bl	8001098 <delay>
				LCD_void_write_string("*");
 80019a0:	4833      	ldr	r0, [pc, #204]	; (8001a70 <main+0x1c0>)
 80019a2:	f7ff fcbf 	bl	8001324 <LCD_void_write_string>
				delay(500);
 80019a6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80019aa:	f7ff fb75 	bl	8001098 <delay>
		for (i = 0 ; i < 6 ; i++)
 80019ae:	7bfb      	ldrb	r3, [r7, #15]
 80019b0:	3301      	adds	r3, #1
 80019b2:	73fb      	strb	r3, [r7, #15]
 80019b4:	7bfb      	ldrb	r3, [r7, #15]
 80019b6:	2b05      	cmp	r3, #5
 80019b8:	d9c9      	bls.n	800194e <main+0x9e>
/*********************************************************************/


		//check that the password is 123456
		//if (password[0] == 1 && password[1] == 2  && password[2] == 3 && password[3] == 4 && password[4] == 5  && password[5] == 6 )
		if ( Check_Password(password) == Correct_Password)
 80019ba:	1d3b      	adds	r3, r7, #4
 80019bc:	4618      	mov	r0, r3
 80019be:	f000 fa0d 	bl	8001ddc <Check_Password>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b01      	cmp	r3, #1
 80019c6:	d140      	bne.n	8001a4a <main+0x19a>
		{
			LCD_voidWriteCmd(0x01);
 80019c8:	2001      	movs	r0, #1
 80019ca:	f7ff fbe2 	bl	8001192 <LCD_voidWriteCmd>
			LCD_void_goto(0, 0);
 80019ce:	2100      	movs	r1, #0
 80019d0:	2000      	movs	r0, #0
 80019d2:	f7ff fd0f 	bl	80013f4 <LCD_void_goto>
			LCD_void_write_string("Welcome");
 80019d6:	4827      	ldr	r0, [pc, #156]	; (8001a74 <main+0x1c4>)
 80019d8:	f7ff fca4 	bl	8001324 <LCD_void_write_string>
			delay(300);
 80019dc:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80019e0:	f7ff fb5a 	bl	8001098 <delay>
			LCD_voidWriteCmd(0x01);
 80019e4:	2001      	movs	r0, #1
 80019e6:	f7ff fbd4 	bl	8001192 <LCD_voidWriteCmd>
			LCD_void_write_string("Total Cars:");
 80019ea:	4823      	ldr	r0, [pc, #140]	; (8001a78 <main+0x1c8>)
 80019ec:	f7ff fc9a 	bl	8001324 <LCD_void_write_string>
			LCD_void_print_unsigned_integer(car_count);
 80019f0:	4b22      	ldr	r3, [pc, #136]	; (8001a7c <main+0x1cc>)
 80019f2:	781b      	ldrb	r3, [r3, #0]
 80019f4:	4618      	mov	r0, r3
 80019f6:	f7ff fcb5 	bl	8001364 <LCD_void_print_unsigned_integer>
			delay(200);
 80019fa:	20c8      	movs	r0, #200	; 0xc8
 80019fc:	f7ff fb4c 	bl	8001098 <delay>
			Welcome_Flag = 1;
 8001a00:	2301      	movs	r3, #1
 8001a02:	73bb      	strb	r3, [r7, #14]
			if (Welcome_Flag == 1)
 8001a04:	7bbb      	ldrb	r3, [r7, #14]
 8001a06:	2b01      	cmp	r3, #1
 8001a08:	d107      	bne.n	8001a1a <main+0x16a>
			{
				EXTI_voidSetCallBack(Application1,Application2,Application3,Application4);
 8001a0a:	4b1d      	ldr	r3, [pc, #116]	; (8001a80 <main+0x1d0>)
 8001a0c:	4a1d      	ldr	r2, [pc, #116]	; (8001a84 <main+0x1d4>)
 8001a0e:	491e      	ldr	r1, [pc, #120]	; (8001a88 <main+0x1d8>)
 8001a10:	481e      	ldr	r0, [pc, #120]	; (8001a8c <main+0x1dc>)
 8001a12:	f7fe fd6b 	bl	80004ec <EXTI_voidSetCallBack>

				Set_All_EXTI();//sets all external interrupts
 8001a16:	f000 fa0b 	bl	8001e30 <Set_All_EXTI>
			}//end if

			while(1)
			{
				if(SW_u8GetState(SW0) == PRESSED)
 8001a1a:	2000      	movs	r0, #0
 8001a1c:	f000 fa82 	bl	8001f24 <SW_u8GetState>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b01      	cmp	r3, #1
 8001a24:	d1f9      	bne.n	8001a1a <main+0x16a>
				{
					Alarm_voidAlarmOff();
 8001a26:	f7fe fc0a 	bl	800023e <Alarm_voidAlarmOff>
					DCmotor_Stop();
 8001a2a:	f7fe fc3d 	bl	80002a8 <DCmotor_Stop>
					LCD_voidWriteCmd(0x01);
 8001a2e:	2001      	movs	r0, #1
 8001a30:	f7ff fbaf 	bl	8001192 <LCD_voidWriteCmd>
					LCD_void_goto(0, 0);
 8001a34:	2100      	movs	r1, #0
 8001a36:	2000      	movs	r0, #0
 8001a38:	f7ff fcdc 	bl	80013f4 <LCD_void_goto>
					LCD_void_write_string("Welcome");
 8001a3c:	480d      	ldr	r0, [pc, #52]	; (8001a74 <main+0x1c4>)
 8001a3e:	f7ff fc71 	bl	8001324 <LCD_void_write_string>
					delay(200);
 8001a42:	20c8      	movs	r0, #200	; 0xc8
 8001a44:	f7ff fb28 	bl	8001098 <delay>
				if(SW_u8GetState(SW0) == PRESSED)
 8001a48:	e7e7      	b.n	8001a1a <main+0x16a>
		}//end if
/*********************************************************************/
/*********************************************************************/
		else	//if password is wrong
		{
			LCD_voidWriteCmd(0x01);
 8001a4a:	2001      	movs	r0, #1
 8001a4c:	f7ff fba1 	bl	8001192 <LCD_voidWriteCmd>
			LCD_void_goto(0, 3);
 8001a50:	2103      	movs	r1, #3
 8001a52:	2000      	movs	r0, #0
 8001a54:	f7ff fcce 	bl	80013f4 <LCD_void_goto>
			LCD_void_write_string("Wrong Password");
 8001a58:	480d      	ldr	r0, [pc, #52]	; (8001a90 <main+0x1e0>)
 8001a5a:	f7ff fc63 	bl	8001324 <LCD_void_write_string>
			USART_voidTransmit(1);// transmit 1 as wrong password for the TX to transmit again
 8001a5e:	2001      	movs	r0, #1
 8001a60:	f000 faf0 	bl	8002044 <USART_voidTransmit>
			delay(50);
 8001a64:	2032      	movs	r0, #50	; 0x32
 8001a66:	f7ff fb17 	bl	8001098 <delay>

			goto L;// go back to insert password
 8001a6a:	e755      	b.n	8001918 <main+0x68>
 8001a6c:	080021f8 	.word	0x080021f8
 8001a70:	0800220c 	.word	0x0800220c
 8001a74:	08002210 	.word	0x08002210
 8001a78:	080021a0 	.word	0x080021a0
 8001a7c:	20000001 	.word	0x20000001
 8001a80:	08001871 	.word	0x08001871
 8001a84:	0800182d 	.word	0x0800182d
 8001a88:	0800175d 	.word	0x0800175d
 8001a8c:	08001695 	.word	0x08001695
 8001a90:	08002218 	.word	0x08002218

08001a94 <SEVSEG_VoidInitialize>:
#include "BIT_MATH.h"
#include "STD_TYPES.h"
#include "GPIO_Interface.h"

void SEVSEG_VoidInitialize(u8 seg_num)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b082      	sub	sp, #8
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	71fb      	strb	r3, [r7, #7]
	if(seg_num == SEG0)
 8001a9e:	79fb      	ldrb	r3, [r7, #7]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d146      	bne.n	8001b32 <SEVSEG_VoidInitialize+0x9e>
	{
	GPIO_void_setPin_Direction(SEG0_PORT, segment0_a_pin, GENERAL_PURPOSE_OUTPUT_MODE);
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	2100      	movs	r1, #0
 8001aa8:	2004      	movs	r0, #4
 8001aaa:	f7fe fd4d 	bl	8000548 <GPIO_void_setPin_Direction>
	GPIO_void_setPin_Output_Type(SEG0_PORT, segment0_a_pin, OUTPUT_PUSH_PULL);
 8001aae:	2200      	movs	r2, #0
 8001ab0:	2100      	movs	r1, #0
 8001ab2:	2004      	movs	r0, #4
 8001ab4:	f7ff f83a 	bl	8000b2c <GPIO_void_setPin_Output_Type>

	GPIO_void_setPin_Direction(SEG0_PORT, segment0_b_pin, GENERAL_PURPOSE_OUTPUT_MODE);
 8001ab8:	2201      	movs	r2, #1
 8001aba:	2101      	movs	r1, #1
 8001abc:	2004      	movs	r0, #4
 8001abe:	f7fe fd43 	bl	8000548 <GPIO_void_setPin_Direction>
	GPIO_void_setPin_Output_Type(SEG0_PORT, segment0_b_pin, OUTPUT_PUSH_PULL);
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	2101      	movs	r1, #1
 8001ac6:	2004      	movs	r0, #4
 8001ac8:	f7ff f830 	bl	8000b2c <GPIO_void_setPin_Output_Type>

	GPIO_void_setPin_Direction(SEG0_PORT, segment0_c_pin, GENERAL_PURPOSE_OUTPUT_MODE);
 8001acc:	2201      	movs	r2, #1
 8001ace:	2102      	movs	r1, #2
 8001ad0:	2004      	movs	r0, #4
 8001ad2:	f7fe fd39 	bl	8000548 <GPIO_void_setPin_Direction>
	GPIO_void_setPin_Output_Type(SEG0_PORT, segment0_c_pin, OUTPUT_PUSH_PULL);
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	2102      	movs	r1, #2
 8001ada:	2004      	movs	r0, #4
 8001adc:	f7ff f826 	bl	8000b2c <GPIO_void_setPin_Output_Type>

	GPIO_void_setPin_Direction(SEG0_PORT, segment0_d_pin, GENERAL_PURPOSE_OUTPUT_MODE);
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	2103      	movs	r1, #3
 8001ae4:	2004      	movs	r0, #4
 8001ae6:	f7fe fd2f 	bl	8000548 <GPIO_void_setPin_Direction>
	GPIO_void_setPin_Output_Type(SEG0_PORT, segment0_d_pin, OUTPUT_PUSH_PULL);
 8001aea:	2200      	movs	r2, #0
 8001aec:	2103      	movs	r1, #3
 8001aee:	2004      	movs	r0, #4
 8001af0:	f7ff f81c 	bl	8000b2c <GPIO_void_setPin_Output_Type>

	GPIO_void_setPin_Direction(SEG0_PORT, segment0_e_pin, GENERAL_PURPOSE_OUTPUT_MODE);
 8001af4:	2201      	movs	r2, #1
 8001af6:	2104      	movs	r1, #4
 8001af8:	2004      	movs	r0, #4
 8001afa:	f7fe fd25 	bl	8000548 <GPIO_void_setPin_Direction>
	GPIO_void_setPin_Output_Type(SEG0_PORT, segment0_e_pin, OUTPUT_PUSH_PULL);
 8001afe:	2200      	movs	r2, #0
 8001b00:	2104      	movs	r1, #4
 8001b02:	2004      	movs	r0, #4
 8001b04:	f7ff f812 	bl	8000b2c <GPIO_void_setPin_Output_Type>

	GPIO_void_setPin_Direction(SEG0_PORT, segment0_f_pin, GENERAL_PURPOSE_OUTPUT_MODE);
 8001b08:	2201      	movs	r2, #1
 8001b0a:	2105      	movs	r1, #5
 8001b0c:	2004      	movs	r0, #4
 8001b0e:	f7fe fd1b 	bl	8000548 <GPIO_void_setPin_Direction>
	GPIO_void_setPin_Output_Type(SEG0_PORT, segment0_f_pin, OUTPUT_PUSH_PULL);
 8001b12:	2200      	movs	r2, #0
 8001b14:	2105      	movs	r1, #5
 8001b16:	2004      	movs	r0, #4
 8001b18:	f7ff f808 	bl	8000b2c <GPIO_void_setPin_Output_Type>

	GPIO_void_setPin_Direction(SEG0_PORT, segment0_g_pin, GENERAL_PURPOSE_OUTPUT_MODE);
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	2106      	movs	r1, #6
 8001b20:	2004      	movs	r0, #4
 8001b22:	f7fe fd11 	bl	8000548 <GPIO_void_setPin_Direction>
	GPIO_void_setPin_Output_Type(SEG0_PORT, segment0_g_pin, OUTPUT_PUSH_PULL);
 8001b26:	2200      	movs	r2, #0
 8001b28:	2106      	movs	r1, #6
 8001b2a:	2004      	movs	r0, #4
 8001b2c:	f7fe fffe 	bl	8000b2c <GPIO_void_setPin_Output_Type>

	GPIO_void_setPin_Direction(SEG1_PORT, segment1_g_pin, GENERAL_PURPOSE_OUTPUT_MODE);
	GPIO_void_setPin_Output_Type(SEG1_PORT, segment1_g_pin, OUTPUT_PUSH_PULL);
	}

}
 8001b30:	e048      	b.n	8001bc4 <SEVSEG_VoidInitialize+0x130>
	else if(seg_num == SEG1)
 8001b32:	79fb      	ldrb	r3, [r7, #7]
 8001b34:	2b01      	cmp	r3, #1
 8001b36:	d145      	bne.n	8001bc4 <SEVSEG_VoidInitialize+0x130>
	GPIO_void_setPin_Direction(SEG1_PORT, segment1_a_pin, GENERAL_PURPOSE_OUTPUT_MODE);
 8001b38:	2201      	movs	r2, #1
 8001b3a:	2100      	movs	r1, #0
 8001b3c:	2003      	movs	r0, #3
 8001b3e:	f7fe fd03 	bl	8000548 <GPIO_void_setPin_Direction>
	GPIO_void_setPin_Output_Type(SEG1_PORT, segment1_a_pin, OUTPUT_PUSH_PULL);
 8001b42:	2200      	movs	r2, #0
 8001b44:	2100      	movs	r1, #0
 8001b46:	2003      	movs	r0, #3
 8001b48:	f7fe fff0 	bl	8000b2c <GPIO_void_setPin_Output_Type>
	GPIO_void_setPin_Direction(SEG1_PORT, segment1_b_pin, GENERAL_PURPOSE_OUTPUT_MODE);
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	2101      	movs	r1, #1
 8001b50:	2003      	movs	r0, #3
 8001b52:	f7fe fcf9 	bl	8000548 <GPIO_void_setPin_Direction>
	GPIO_void_setPin_Output_Type(SEG1_PORT, segment1_b_pin, OUTPUT_PUSH_PULL);
 8001b56:	2200      	movs	r2, #0
 8001b58:	2101      	movs	r1, #1
 8001b5a:	2003      	movs	r0, #3
 8001b5c:	f7fe ffe6 	bl	8000b2c <GPIO_void_setPin_Output_Type>
	GPIO_void_setPin_Direction(SEG1_PORT, segment1_c_pin, GENERAL_PURPOSE_OUTPUT_MODE);
 8001b60:	2201      	movs	r2, #1
 8001b62:	2102      	movs	r1, #2
 8001b64:	2003      	movs	r0, #3
 8001b66:	f7fe fcef 	bl	8000548 <GPIO_void_setPin_Direction>
	GPIO_void_setPin_Output_Type(SEG1_PORT, segment1_c_pin, OUTPUT_PUSH_PULL);
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	2102      	movs	r1, #2
 8001b6e:	2003      	movs	r0, #3
 8001b70:	f7fe ffdc 	bl	8000b2c <GPIO_void_setPin_Output_Type>
	GPIO_void_setPin_Direction(SEG1_PORT, segment1_d_pin, GENERAL_PURPOSE_OUTPUT_MODE);
 8001b74:	2201      	movs	r2, #1
 8001b76:	2103      	movs	r1, #3
 8001b78:	2003      	movs	r0, #3
 8001b7a:	f7fe fce5 	bl	8000548 <GPIO_void_setPin_Direction>
	GPIO_void_setPin_Output_Type(SEG1_PORT, segment1_d_pin, OUTPUT_PUSH_PULL);
 8001b7e:	2200      	movs	r2, #0
 8001b80:	2103      	movs	r1, #3
 8001b82:	2003      	movs	r0, #3
 8001b84:	f7fe ffd2 	bl	8000b2c <GPIO_void_setPin_Output_Type>
	GPIO_void_setPin_Direction(SEG1_PORT, segment1_e_pin, GENERAL_PURPOSE_OUTPUT_MODE);
 8001b88:	2201      	movs	r2, #1
 8001b8a:	2104      	movs	r1, #4
 8001b8c:	2003      	movs	r0, #3
 8001b8e:	f7fe fcdb 	bl	8000548 <GPIO_void_setPin_Direction>
	GPIO_void_setPin_Output_Type(SEG1_PORT, segment1_e_pin, OUTPUT_PUSH_PULL);
 8001b92:	2200      	movs	r2, #0
 8001b94:	2104      	movs	r1, #4
 8001b96:	2003      	movs	r0, #3
 8001b98:	f7fe ffc8 	bl	8000b2c <GPIO_void_setPin_Output_Type>
	GPIO_void_setPin_Direction(SEG1_PORT, segment1_f_pin, GENERAL_PURPOSE_OUTPUT_MODE);
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	2105      	movs	r1, #5
 8001ba0:	2003      	movs	r0, #3
 8001ba2:	f7fe fcd1 	bl	8000548 <GPIO_void_setPin_Direction>
	GPIO_void_setPin_Output_Type(SEG1_PORT, segment1_f_pin, OUTPUT_PUSH_PULL);
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	2105      	movs	r1, #5
 8001baa:	2003      	movs	r0, #3
 8001bac:	f7fe ffbe 	bl	8000b2c <GPIO_void_setPin_Output_Type>
	GPIO_void_setPin_Direction(SEG1_PORT, segment1_g_pin, GENERAL_PURPOSE_OUTPUT_MODE);
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	2106      	movs	r1, #6
 8001bb4:	2003      	movs	r0, #3
 8001bb6:	f7fe fcc7 	bl	8000548 <GPIO_void_setPin_Direction>
	GPIO_void_setPin_Output_Type(SEG1_PORT, segment1_g_pin, OUTPUT_PUSH_PULL);
 8001bba:	2200      	movs	r2, #0
 8001bbc:	2106      	movs	r1, #6
 8001bbe:	2003      	movs	r0, #3
 8001bc0:	f7fe ffb4 	bl	8000b2c <GPIO_void_setPin_Output_Type>
}
 8001bc4:	bf00      	nop
 8001bc6:	3708      	adds	r7, #8
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}

08001bcc <SEVSEG_VoidDisplay>:
void SEVSEG_VoidDisplay(u8 seg_num,u8 num_to_display)
{                  if(seg_num == SEG0)
 8001bcc:	b480      	push	{r7}
 8001bce:	b083      	sub	sp, #12
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	460a      	mov	r2, r1
 8001bd6:	71fb      	strb	r3, [r7, #7]
 8001bd8:	4613      	mov	r3, r2
 8001bda:	71bb      	strb	r3, [r7, #6]
 8001bdc:	79fb      	ldrb	r3, [r7, #7]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d145      	bne.n	8001c6e <SEVSEG_VoidDisplay+0xa2>
					{
					if(num_to_display == 0)
 8001be2:	79bb      	ldrb	r3, [r7, #6]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d103      	bne.n	8001bf0 <SEVSEG_VoidDisplay+0x24>
					{
						segment0_ODR = 0x003f;//display 0
 8001be8:	4b48      	ldr	r3, [pc, #288]	; (8001d0c <SEVSEG_VoidDisplay+0x140>)
 8001bea:	223f      	movs	r2, #63	; 0x3f
 8001bec:	601a      	str	r2, [r3, #0]
					else if(num_to_display ==9 )
					{
						segment1_ODR = 0x006F;//display 9
					}
				}
}
 8001bee:	e086      	b.n	8001cfe <SEVSEG_VoidDisplay+0x132>
					else if(num_to_display ==1 )
 8001bf0:	79bb      	ldrb	r3, [r7, #6]
 8001bf2:	2b01      	cmp	r3, #1
 8001bf4:	d103      	bne.n	8001bfe <SEVSEG_VoidDisplay+0x32>
						segment0_ODR = 0x0006;//display 1
 8001bf6:	4b45      	ldr	r3, [pc, #276]	; (8001d0c <SEVSEG_VoidDisplay+0x140>)
 8001bf8:	2206      	movs	r2, #6
 8001bfa:	601a      	str	r2, [r3, #0]
}
 8001bfc:	e07f      	b.n	8001cfe <SEVSEG_VoidDisplay+0x132>
					else if(num_to_display ==2 )
 8001bfe:	79bb      	ldrb	r3, [r7, #6]
 8001c00:	2b02      	cmp	r3, #2
 8001c02:	d103      	bne.n	8001c0c <SEVSEG_VoidDisplay+0x40>
						segment0_ODR = 0x005B;//display 2
 8001c04:	4b41      	ldr	r3, [pc, #260]	; (8001d0c <SEVSEG_VoidDisplay+0x140>)
 8001c06:	225b      	movs	r2, #91	; 0x5b
 8001c08:	601a      	str	r2, [r3, #0]
}
 8001c0a:	e078      	b.n	8001cfe <SEVSEG_VoidDisplay+0x132>
					else if(num_to_display ==3 )
 8001c0c:	79bb      	ldrb	r3, [r7, #6]
 8001c0e:	2b03      	cmp	r3, #3
 8001c10:	d103      	bne.n	8001c1a <SEVSEG_VoidDisplay+0x4e>
						segment0_ODR = 0x004F;//display 3
 8001c12:	4b3e      	ldr	r3, [pc, #248]	; (8001d0c <SEVSEG_VoidDisplay+0x140>)
 8001c14:	224f      	movs	r2, #79	; 0x4f
 8001c16:	601a      	str	r2, [r3, #0]
}
 8001c18:	e071      	b.n	8001cfe <SEVSEG_VoidDisplay+0x132>
					else if(num_to_display ==4 )
 8001c1a:	79bb      	ldrb	r3, [r7, #6]
 8001c1c:	2b04      	cmp	r3, #4
 8001c1e:	d103      	bne.n	8001c28 <SEVSEG_VoidDisplay+0x5c>
						segment0_ODR = 0x0066;//display 4
 8001c20:	4b3a      	ldr	r3, [pc, #232]	; (8001d0c <SEVSEG_VoidDisplay+0x140>)
 8001c22:	2266      	movs	r2, #102	; 0x66
 8001c24:	601a      	str	r2, [r3, #0]
}
 8001c26:	e06a      	b.n	8001cfe <SEVSEG_VoidDisplay+0x132>
					else if(num_to_display ==5 )
 8001c28:	79bb      	ldrb	r3, [r7, #6]
 8001c2a:	2b05      	cmp	r3, #5
 8001c2c:	d103      	bne.n	8001c36 <SEVSEG_VoidDisplay+0x6a>
						segment0_ODR = 0x006D;//display 5
 8001c2e:	4b37      	ldr	r3, [pc, #220]	; (8001d0c <SEVSEG_VoidDisplay+0x140>)
 8001c30:	226d      	movs	r2, #109	; 0x6d
 8001c32:	601a      	str	r2, [r3, #0]
}
 8001c34:	e063      	b.n	8001cfe <SEVSEG_VoidDisplay+0x132>
					else if(num_to_display ==6 )
 8001c36:	79bb      	ldrb	r3, [r7, #6]
 8001c38:	2b06      	cmp	r3, #6
 8001c3a:	d103      	bne.n	8001c44 <SEVSEG_VoidDisplay+0x78>
						segment0_ODR = 0x007D;//display 6
 8001c3c:	4b33      	ldr	r3, [pc, #204]	; (8001d0c <SEVSEG_VoidDisplay+0x140>)
 8001c3e:	227d      	movs	r2, #125	; 0x7d
 8001c40:	601a      	str	r2, [r3, #0]
}
 8001c42:	e05c      	b.n	8001cfe <SEVSEG_VoidDisplay+0x132>
					else if(num_to_display ==7 )
 8001c44:	79bb      	ldrb	r3, [r7, #6]
 8001c46:	2b07      	cmp	r3, #7
 8001c48:	d103      	bne.n	8001c52 <SEVSEG_VoidDisplay+0x86>
						segment0_ODR = 0x0007;//display 7
 8001c4a:	4b30      	ldr	r3, [pc, #192]	; (8001d0c <SEVSEG_VoidDisplay+0x140>)
 8001c4c:	2207      	movs	r2, #7
 8001c4e:	601a      	str	r2, [r3, #0]
}
 8001c50:	e055      	b.n	8001cfe <SEVSEG_VoidDisplay+0x132>
					else if(num_to_display ==8 )
 8001c52:	79bb      	ldrb	r3, [r7, #6]
 8001c54:	2b08      	cmp	r3, #8
 8001c56:	d103      	bne.n	8001c60 <SEVSEG_VoidDisplay+0x94>
						segment0_ODR = 0x007F;//display 8
 8001c58:	4b2c      	ldr	r3, [pc, #176]	; (8001d0c <SEVSEG_VoidDisplay+0x140>)
 8001c5a:	227f      	movs	r2, #127	; 0x7f
 8001c5c:	601a      	str	r2, [r3, #0]
}
 8001c5e:	e04e      	b.n	8001cfe <SEVSEG_VoidDisplay+0x132>
					else if(num_to_display ==9 )
 8001c60:	79bb      	ldrb	r3, [r7, #6]
 8001c62:	2b09      	cmp	r3, #9
 8001c64:	d14b      	bne.n	8001cfe <SEVSEG_VoidDisplay+0x132>
						segment0_ODR = 0x006F;//display 9
 8001c66:	4b29      	ldr	r3, [pc, #164]	; (8001d0c <SEVSEG_VoidDisplay+0x140>)
 8001c68:	226f      	movs	r2, #111	; 0x6f
 8001c6a:	601a      	str	r2, [r3, #0]
}
 8001c6c:	e047      	b.n	8001cfe <SEVSEG_VoidDisplay+0x132>
else if(seg_num == SEG1)
 8001c6e:	79fb      	ldrb	r3, [r7, #7]
 8001c70:	2b01      	cmp	r3, #1
 8001c72:	d144      	bne.n	8001cfe <SEVSEG_VoidDisplay+0x132>
					if(num_to_display == 0)
 8001c74:	79bb      	ldrb	r3, [r7, #6]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d103      	bne.n	8001c82 <SEVSEG_VoidDisplay+0xb6>
						segment1_ODR = 0x003f;//display 0
 8001c7a:	4b25      	ldr	r3, [pc, #148]	; (8001d10 <SEVSEG_VoidDisplay+0x144>)
 8001c7c:	223f      	movs	r2, #63	; 0x3f
 8001c7e:	601a      	str	r2, [r3, #0]
}
 8001c80:	e03d      	b.n	8001cfe <SEVSEG_VoidDisplay+0x132>
					else if(num_to_display ==1 )
 8001c82:	79bb      	ldrb	r3, [r7, #6]
 8001c84:	2b01      	cmp	r3, #1
 8001c86:	d103      	bne.n	8001c90 <SEVSEG_VoidDisplay+0xc4>
						segment1_ODR = 0x0006;//display 1
 8001c88:	4b21      	ldr	r3, [pc, #132]	; (8001d10 <SEVSEG_VoidDisplay+0x144>)
 8001c8a:	2206      	movs	r2, #6
 8001c8c:	601a      	str	r2, [r3, #0]
}
 8001c8e:	e036      	b.n	8001cfe <SEVSEG_VoidDisplay+0x132>
					else if(num_to_display ==2 )
 8001c90:	79bb      	ldrb	r3, [r7, #6]
 8001c92:	2b02      	cmp	r3, #2
 8001c94:	d103      	bne.n	8001c9e <SEVSEG_VoidDisplay+0xd2>
						segment1_ODR = 0x005B;//display 2
 8001c96:	4b1e      	ldr	r3, [pc, #120]	; (8001d10 <SEVSEG_VoidDisplay+0x144>)
 8001c98:	225b      	movs	r2, #91	; 0x5b
 8001c9a:	601a      	str	r2, [r3, #0]
}
 8001c9c:	e02f      	b.n	8001cfe <SEVSEG_VoidDisplay+0x132>
					else if(num_to_display ==3 )
 8001c9e:	79bb      	ldrb	r3, [r7, #6]
 8001ca0:	2b03      	cmp	r3, #3
 8001ca2:	d103      	bne.n	8001cac <SEVSEG_VoidDisplay+0xe0>
						segment1_ODR = 0x004F;//display 3
 8001ca4:	4b1a      	ldr	r3, [pc, #104]	; (8001d10 <SEVSEG_VoidDisplay+0x144>)
 8001ca6:	224f      	movs	r2, #79	; 0x4f
 8001ca8:	601a      	str	r2, [r3, #0]
}
 8001caa:	e028      	b.n	8001cfe <SEVSEG_VoidDisplay+0x132>
					else if(num_to_display ==4 )
 8001cac:	79bb      	ldrb	r3, [r7, #6]
 8001cae:	2b04      	cmp	r3, #4
 8001cb0:	d103      	bne.n	8001cba <SEVSEG_VoidDisplay+0xee>
						segment1_ODR = 0x0066;//display 4
 8001cb2:	4b17      	ldr	r3, [pc, #92]	; (8001d10 <SEVSEG_VoidDisplay+0x144>)
 8001cb4:	2266      	movs	r2, #102	; 0x66
 8001cb6:	601a      	str	r2, [r3, #0]
}
 8001cb8:	e021      	b.n	8001cfe <SEVSEG_VoidDisplay+0x132>
					else if(num_to_display ==5 )
 8001cba:	79bb      	ldrb	r3, [r7, #6]
 8001cbc:	2b05      	cmp	r3, #5
 8001cbe:	d103      	bne.n	8001cc8 <SEVSEG_VoidDisplay+0xfc>
						segment1_ODR = 0x006D;//display 5
 8001cc0:	4b13      	ldr	r3, [pc, #76]	; (8001d10 <SEVSEG_VoidDisplay+0x144>)
 8001cc2:	226d      	movs	r2, #109	; 0x6d
 8001cc4:	601a      	str	r2, [r3, #0]
}
 8001cc6:	e01a      	b.n	8001cfe <SEVSEG_VoidDisplay+0x132>
					else if(num_to_display ==6 )
 8001cc8:	79bb      	ldrb	r3, [r7, #6]
 8001cca:	2b06      	cmp	r3, #6
 8001ccc:	d103      	bne.n	8001cd6 <SEVSEG_VoidDisplay+0x10a>
						segment1_ODR = 0x007D;//display 6
 8001cce:	4b10      	ldr	r3, [pc, #64]	; (8001d10 <SEVSEG_VoidDisplay+0x144>)
 8001cd0:	227d      	movs	r2, #125	; 0x7d
 8001cd2:	601a      	str	r2, [r3, #0]
}
 8001cd4:	e013      	b.n	8001cfe <SEVSEG_VoidDisplay+0x132>
					else if(num_to_display ==7 )
 8001cd6:	79bb      	ldrb	r3, [r7, #6]
 8001cd8:	2b07      	cmp	r3, #7
 8001cda:	d103      	bne.n	8001ce4 <SEVSEG_VoidDisplay+0x118>
						segment1_ODR = 0x0007;//display 7
 8001cdc:	4b0c      	ldr	r3, [pc, #48]	; (8001d10 <SEVSEG_VoidDisplay+0x144>)
 8001cde:	2207      	movs	r2, #7
 8001ce0:	601a      	str	r2, [r3, #0]
}
 8001ce2:	e00c      	b.n	8001cfe <SEVSEG_VoidDisplay+0x132>
					else if(num_to_display ==8 )
 8001ce4:	79bb      	ldrb	r3, [r7, #6]
 8001ce6:	2b08      	cmp	r3, #8
 8001ce8:	d103      	bne.n	8001cf2 <SEVSEG_VoidDisplay+0x126>
						segment1_ODR = 0x007F;//display 8
 8001cea:	4b09      	ldr	r3, [pc, #36]	; (8001d10 <SEVSEG_VoidDisplay+0x144>)
 8001cec:	227f      	movs	r2, #127	; 0x7f
 8001cee:	601a      	str	r2, [r3, #0]
}
 8001cf0:	e005      	b.n	8001cfe <SEVSEG_VoidDisplay+0x132>
					else if(num_to_display ==9 )
 8001cf2:	79bb      	ldrb	r3, [r7, #6]
 8001cf4:	2b09      	cmp	r3, #9
 8001cf6:	d102      	bne.n	8001cfe <SEVSEG_VoidDisplay+0x132>
						segment1_ODR = 0x006F;//display 9
 8001cf8:	4b05      	ldr	r3, [pc, #20]	; (8001d10 <SEVSEG_VoidDisplay+0x144>)
 8001cfa:	226f      	movs	r2, #111	; 0x6f
 8001cfc:	601a      	str	r2, [r3, #0]
}
 8001cfe:	bf00      	nop
 8001d00:	370c      	adds	r7, #12
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr
 8001d0a:	bf00      	nop
 8001d0c:	40021014 	.word	0x40021014
 8001d10:	40020c14 	.word	0x40020c14

08001d14 <SEVSEG_VoidEnable>:


void SEVSEG_VoidEnable(u8 seg_num)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b082      	sub	sp, #8
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	71fb      	strb	r3, [r7, #7]
	if(seg_num == SEG0)
 8001d1e:	79fb      	ldrb	r3, [r7, #7]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d110      	bne.n	8001d46 <SEVSEG_VoidEnable+0x32>
	{

		GPIO_void_setPin_Direction(SEG0_PORT, segment0_enable_pin, GENERAL_PURPOSE_OUTPUT_MODE);
 8001d24:	2201      	movs	r2, #1
 8001d26:	2107      	movs	r1, #7
 8001d28:	2004      	movs	r0, #4
 8001d2a:	f7fe fc0d 	bl	8000548 <GPIO_void_setPin_Direction>
		GPIO_void_setPin_Output_Type(SEG0_PORT, segment0_enable_pin, OUTPUT_PUSH_PULL);
 8001d2e:	2200      	movs	r2, #0
 8001d30:	2107      	movs	r1, #7
 8001d32:	2004      	movs	r0, #4
 8001d34:	f7fe fefa 	bl	8000b2c <GPIO_void_setPin_Output_Type>
		SET_BIT(segment0_ODR,segment0_enable_pin);
 8001d38:	4b0e      	ldr	r3, [pc, #56]	; (8001d74 <SEVSEG_VoidEnable+0x60>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a0d      	ldr	r2, [pc, #52]	; (8001d74 <SEVSEG_VoidEnable+0x60>)
 8001d3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d42:	6013      	str	r3, [r2, #0]
		GPIO_void_setPin_Direction(SEG1_PORT, segment1_enable_pin, GENERAL_PURPOSE_OUTPUT_MODE);
		GPIO_void_setPin_Output_Type(SEG1_PORT, segment1_enable_pin, OUTPUT_PUSH_PULL);
		SET_BIT(segment1_ODR,segment1_enable_pin);

	}
}
 8001d44:	e012      	b.n	8001d6c <SEVSEG_VoidEnable+0x58>
	else if(seg_num == SEG1)
 8001d46:	79fb      	ldrb	r3, [r7, #7]
 8001d48:	2b01      	cmp	r3, #1
 8001d4a:	d10f      	bne.n	8001d6c <SEVSEG_VoidEnable+0x58>
		GPIO_void_setPin_Direction(SEG1_PORT, segment1_enable_pin, GENERAL_PURPOSE_OUTPUT_MODE);
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	2107      	movs	r1, #7
 8001d50:	2003      	movs	r0, #3
 8001d52:	f7fe fbf9 	bl	8000548 <GPIO_void_setPin_Direction>
		GPIO_void_setPin_Output_Type(SEG1_PORT, segment1_enable_pin, OUTPUT_PUSH_PULL);
 8001d56:	2200      	movs	r2, #0
 8001d58:	2107      	movs	r1, #7
 8001d5a:	2003      	movs	r0, #3
 8001d5c:	f7fe fee6 	bl	8000b2c <GPIO_void_setPin_Output_Type>
		SET_BIT(segment1_ODR,segment1_enable_pin);
 8001d60:	4b05      	ldr	r3, [pc, #20]	; (8001d78 <SEVSEG_VoidEnable+0x64>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a04      	ldr	r2, [pc, #16]	; (8001d78 <SEVSEG_VoidEnable+0x64>)
 8001d66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d6a:	6013      	str	r3, [r2, #0]
}
 8001d6c:	bf00      	nop
 8001d6e:	3708      	adds	r7, #8
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	40021014 	.word	0x40021014
 8001d78:	40020c14 	.word	0x40020c14

08001d7c <Open_Door>:


/************************************************************************************/
/**************************************OPEN DOOR*************************************/
void Open_Door(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	af00      	add	r7, sp, #0
	LCD_voidWriteCmd(0x01);// clear lcd
 8001d80:	2001      	movs	r0, #1
 8001d82:	f7ff fa06 	bl	8001192 <LCD_voidWriteCmd>
	LCD_void_goto(0, 3);
 8001d86:	2103      	movs	r1, #3
 8001d88:	2000      	movs	r0, #0
 8001d8a:	f7ff fb33 	bl	80013f4 <LCD_void_goto>
	LCD_void_write_string("DOOR OPENING");
 8001d8e:	4806      	ldr	r0, [pc, #24]	; (8001da8 <Open_Door+0x2c>)
 8001d90:	f7ff fac8 	bl	8001324 <LCD_void_write_string>
	DCmotor_Direction(CLK_WISE_DIRECTION);
 8001d94:	2000      	movs	r0, #0
 8001d96:	f7fe fa95 	bl	80002c4 <DCmotor_Direction>
	delay(500);
 8001d9a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001d9e:	f7ff f97b 	bl	8001098 <delay>
}
 8001da2:	bf00      	nop
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	08002228 	.word	0x08002228

08001dac <Close_Door>:
/************************************************************************************/
/*************************************CLOSE DOOR*************************************/

void Close_Door(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	af00      	add	r7, sp, #0
	LCD_voidWriteCmd(0x01);// clear lcd
 8001db0:	2001      	movs	r0, #1
 8001db2:	f7ff f9ee 	bl	8001192 <LCD_voidWriteCmd>
	LCD_void_goto(0, 3);
 8001db6:	2103      	movs	r1, #3
 8001db8:	2000      	movs	r0, #0
 8001dba:	f7ff fb1b 	bl	80013f4 <LCD_void_goto>
	LCD_void_write_string("DOOR CLOSING");
 8001dbe:	4806      	ldr	r0, [pc, #24]	; (8001dd8 <Close_Door+0x2c>)
 8001dc0:	f7ff fab0 	bl	8001324 <LCD_void_write_string>
	DCmotor_Direction(ANTI_CLK_WISE_DIRECTION);
 8001dc4:	2001      	movs	r0, #1
 8001dc6:	f7fe fa7d 	bl	80002c4 <DCmotor_Direction>
	delay(1500);
 8001dca:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8001dce:	f7ff f963 	bl	8001098 <delay>
}
 8001dd2:	bf00      	nop
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	08002238 	.word	0x08002238

08001ddc <Check_Password>:


/************************************************************************************/
/************************************Check_Password**********************************/
u8 Check_Password(u8 *password)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b083      	sub	sp, #12
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
	if (password[0] == 1 && password[1] == 2  && password[2] == 3 && password[3] == 4 && password[4] == 5  && password[5] == 6 )
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	2b01      	cmp	r3, #1
 8001dea:	d11a      	bne.n	8001e22 <Check_Password+0x46>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	3301      	adds	r3, #1
 8001df0:	781b      	ldrb	r3, [r3, #0]
 8001df2:	2b02      	cmp	r3, #2
 8001df4:	d115      	bne.n	8001e22 <Check_Password+0x46>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	3302      	adds	r3, #2
 8001dfa:	781b      	ldrb	r3, [r3, #0]
 8001dfc:	2b03      	cmp	r3, #3
 8001dfe:	d110      	bne.n	8001e22 <Check_Password+0x46>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	3303      	adds	r3, #3
 8001e04:	781b      	ldrb	r3, [r3, #0]
 8001e06:	2b04      	cmp	r3, #4
 8001e08:	d10b      	bne.n	8001e22 <Check_Password+0x46>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	3304      	adds	r3, #4
 8001e0e:	781b      	ldrb	r3, [r3, #0]
 8001e10:	2b05      	cmp	r3, #5
 8001e12:	d106      	bne.n	8001e22 <Check_Password+0x46>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	3305      	adds	r3, #5
 8001e18:	781b      	ldrb	r3, [r3, #0]
 8001e1a:	2b06      	cmp	r3, #6
 8001e1c:	d101      	bne.n	8001e22 <Check_Password+0x46>
	{
		return Correct_Password;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e000      	b.n	8001e24 <Check_Password+0x48>
	}

		else return Wrong_Password;
 8001e22:	2300      	movs	r3, #0
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	370c      	adds	r7, #12
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr

08001e30 <Set_All_EXTI>:

/************************************************************************************/


void Set_All_EXTI(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	af00      	add	r7, sp, #0


	//NVIC/
	NVIC_voidInit();
 8001e34:	f7ff fb08 	bl	8001448 <NVIC_voidInit>
/*      EXTI       */
	EXTI_voidIntialize();
 8001e38:	f7fe fa6a 	bl	8000310 <EXTI_voidIntialize>
	EXTI_voidEnableLine(EXTI_LINE0);
 8001e3c:	2000      	movs	r0, #0
 8001e3e:	f7fe fa77 	bl	8000330 <EXTI_voidEnableLine>
	EXTI_voidSetSignalLatch(EXTI_LINE0 ,EXTI_RISING );
 8001e42:	2102      	movs	r1, #2
 8001e44:	2000      	movs	r0, #0
 8001e46:	f7fe faa9 	bl	800039c <EXTI_voidSetSignalLatch>
	EXTI_voidEnableLine(EXTI_LINE1);
 8001e4a:	2001      	movs	r0, #1
 8001e4c:	f7fe fa70 	bl	8000330 <EXTI_voidEnableLine>
	EXTI_voidSetSignalLatch(EXTI_LINE1 ,EXTI_RISING );
 8001e50:	2102      	movs	r1, #2
 8001e52:	2001      	movs	r0, #1
 8001e54:	f7fe faa2 	bl	800039c <EXTI_voidSetSignalLatch>
	EXTI_voidEnableLine(EXTI_LINE4);
 8001e58:	2004      	movs	r0, #4
 8001e5a:	f7fe fa69 	bl	8000330 <EXTI_voidEnableLine>
	EXTI_voidSetSignalLatch(EXTI_LINE4 ,EXTI_RISING );
 8001e5e:	2102      	movs	r1, #2
 8001e60:	2004      	movs	r0, #4
 8001e62:	f7fe fa9b 	bl	800039c <EXTI_voidSetSignalLatch>
	EXTI_voidEnableLine(EXTI_LINE5);
 8001e66:	2005      	movs	r0, #5
 8001e68:	f7fe fa62 	bl	8000330 <EXTI_voidEnableLine>
	EXTI_voidSetSignalLatch(EXTI_LINE5 ,EXTI_RISING );
 8001e6c:	2102      	movs	r1, #2
 8001e6e:	2005      	movs	r0, #5
 8001e70:	f7fe fa94 	bl	800039c <EXTI_voidSetSignalLatch>
	RCC_voidEnablePeripheralCLK(RCC_ABP2, 14);//sys config//system Config. Rcc Enable/EXTI
 8001e74:	210e      	movs	r1, #14
 8001e76:	2003      	movs	r0, #3
 8001e78:	f7ff fb80 	bl	800157c <RCC_voidEnablePeripheralCLK>
	//set priority
	NVIC_voidSetPriority(0b1010, 6);
 8001e7c:	2106      	movs	r1, #6
 8001e7e:	200a      	movs	r0, #10
 8001e80:	f7ff fb30 	bl	80014e4 <NVIC_voidSetPriority>
	NVIC_voidSetPriority(0b1010, 7);
 8001e84:	2107      	movs	r1, #7
 8001e86:	200a      	movs	r0, #10
 8001e88:	f7ff fb2c 	bl	80014e4 <NVIC_voidSetPriority>
	NVIC_voidSetPriority(0b0101, 10);// highesh priority for fire alarm
 8001e8c:	210a      	movs	r1, #10
 8001e8e:	2005      	movs	r0, #5
 8001e90:	f7ff fb28 	bl	80014e4 <NVIC_voidSetPriority>
	NVIC_voidSetPriority(0b0111, 23);// second highest priority for IR- Obstcale checker
 8001e94:	2117      	movs	r1, #23
 8001e96:	2007      	movs	r0, #7
 8001e98:	f7ff fb24 	bl	80014e4 <NVIC_voidSetPriority>

/*  EXTI0*/
	NVIC_voidEnablePeripheral(6);
 8001e9c:	2006      	movs	r0, #6
 8001e9e:	f7ff fae1 	bl	8001464 <NVIC_voidEnablePeripheral>
	NVIC_voidEnablePeripheral(7);
 8001ea2:	2007      	movs	r0, #7
 8001ea4:	f7ff fade 	bl	8001464 <NVIC_voidEnablePeripheral>
	NVIC_voidEnablePeripheral(10);
 8001ea8:	200a      	movs	r0, #10
 8001eaa:	f7ff fadb 	bl	8001464 <NVIC_voidEnablePeripheral>
	NVIC_voidEnablePeripheral(23);// pg203
 8001eae:	2017      	movs	r0, #23
 8001eb0:	f7ff fad8 	bl	8001464 <NVIC_voidEnablePeripheral>
}
 8001eb4:	bf00      	nop
 8001eb6:	bd80      	pop	{r7, pc}

08001eb8 <SPI1_IRQHandler>:
	//SS high
GPIO_void_setPin_value(SPI_PORT_SS, SPI1_SS_Pin, HIGH);
}

void SPI1_IRQHandler(void)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	af00      	add	r7, sp, #0
	//SPI_PfCallBack(u8);
}
 8001ebc:	bf00      	nop
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr
	...

08001ec8 <SW_voidIntialize>:
#include "STD_TYPES.h"
#include "switch_interface.h"
#include "switch_config.h"

void SW_voidIntialize(u8 switch_num)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b083      	sub	sp, #12
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	4603      	mov	r3, r0
 8001ed0:	71fb      	strb	r3, [r7, #7]
if (switch_num == SW0)
 8001ed2:	79fb      	ldrb	r3, [r7, #7]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d10c      	bne.n	8001ef2 <SW_voidIntialize+0x2a>
{
	Clear_bit(SW0_port_mode,(SW0_pin_number*2));
 8001ed8:	4b10      	ldr	r3, [pc, #64]	; (8001f1c <SW_voidIntialize+0x54>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a0f      	ldr	r2, [pc, #60]	; (8001f1c <SW_voidIntialize+0x54>)
 8001ede:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ee2:	6013      	str	r3, [r2, #0]
	Clear_bit(SW0_port_mode,((SW0_pin_number*2)+1));
 8001ee4:	4b0d      	ldr	r3, [pc, #52]	; (8001f1c <SW_voidIntialize+0x54>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a0c      	ldr	r2, [pc, #48]	; (8001f1c <SW_voidIntialize+0x54>)
 8001eea:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8001eee:	6013      	str	r3, [r2, #0]
{
	Clear_bit(SW1_port_mode,(SW1_pin_number*2));
	Clear_bit(SW1_port_mode,((SW1_pin_number*2)+1));
}

}
 8001ef0:	e00e      	b.n	8001f10 <SW_voidIntialize+0x48>
else if (switch_num == SW1)
 8001ef2:	79fb      	ldrb	r3, [r7, #7]
 8001ef4:	2b01      	cmp	r3, #1
 8001ef6:	d10b      	bne.n	8001f10 <SW_voidIntialize+0x48>
	Clear_bit(SW1_port_mode,(SW1_pin_number*2));
 8001ef8:	4b09      	ldr	r3, [pc, #36]	; (8001f20 <SW_voidIntialize+0x58>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a08      	ldr	r2, [pc, #32]	; (8001f20 <SW_voidIntialize+0x58>)
 8001efe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001f02:	6013      	str	r3, [r2, #0]
	Clear_bit(SW1_port_mode,((SW1_pin_number*2)+1));
 8001f04:	4b06      	ldr	r3, [pc, #24]	; (8001f20 <SW_voidIntialize+0x58>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a05      	ldr	r2, [pc, #20]	; (8001f20 <SW_voidIntialize+0x58>)
 8001f0a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001f0e:	6013      	str	r3, [r2, #0]
}
 8001f10:	bf00      	nop
 8001f12:	370c      	adds	r7, #12
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr
 8001f1c:	40020c00 	.word	0x40020c00
 8001f20:	40020400 	.word	0x40020400

08001f24 <SW_u8GetState>:

u8 SW_u8GetState(u8 switch_num)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b085      	sub	sp, #20
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	71fb      	strb	r3, [r7, #7]
	u8 result;
	u8 status;
	if (switch_num == SW0)
 8001f2e:	79fb      	ldrb	r3, [r7, #7]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d112      	bne.n	8001f5a <SW_u8GetState+0x36>
	{
     #if(SW_0_CONNECTION == PULL_UP)
		{
			 result = GET_BIT(SW0_IDR,SW0_pin_number);
 8001f34:	4b17      	ldr	r3, [pc, #92]	; (8001f94 <SW_u8GetState+0x70>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	0b9b      	lsrs	r3, r3, #14
 8001f3a:	b2db      	uxtb	r3, r3
 8001f3c:	f003 0301 	and.w	r3, r3, #1
 8001f40:	73bb      	strb	r3, [r7, #14]
			 if ( result == HIGH )
 8001f42:	7bbb      	ldrb	r3, [r7, #14]
 8001f44:	2b01      	cmp	r3, #1
 8001f46:	d102      	bne.n	8001f4e <SW_u8GetState+0x2a>
			 {
				 status = PRESSED;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	73fb      	strb	r3, [r7, #15]
 8001f4c:	e01a      	b.n	8001f84 <SW_u8GetState+0x60>
			 }
			 else  if ( result == LOW )
 8001f4e:	7bbb      	ldrb	r3, [r7, #14]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d117      	bne.n	8001f84 <SW_u8GetState+0x60>
			 {
				 status = NOT_PRESSED;
 8001f54:	2300      	movs	r3, #0
 8001f56:	73fb      	strb	r3, [r7, #15]
 8001f58:	e014      	b.n	8001f84 <SW_u8GetState+0x60>
				 status = PRESSED;
			 }
		}
	#endif
	}
	else if (switch_num == SW1)
 8001f5a:	79fb      	ldrb	r3, [r7, #7]
 8001f5c:	2b01      	cmp	r3, #1
 8001f5e:	d111      	bne.n	8001f84 <SW_u8GetState+0x60>
		{
	     #if(SW_0_CONNECTION == PULL_UP)
			{
				 result = GET_BIT(SW1_IDR,SW1_pin_number);
 8001f60:	4b0d      	ldr	r3, [pc, #52]	; (8001f98 <SW_u8GetState+0x74>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	095b      	lsrs	r3, r3, #5
 8001f66:	b2db      	uxtb	r3, r3
 8001f68:	f003 0301 	and.w	r3, r3, #1
 8001f6c:	73bb      	strb	r3, [r7, #14]
				 if ( result == HIGH )
 8001f6e:	7bbb      	ldrb	r3, [r7, #14]
 8001f70:	2b01      	cmp	r3, #1
 8001f72:	d102      	bne.n	8001f7a <SW_u8GetState+0x56>
				 {
					 status = PRESSED;
 8001f74:	2301      	movs	r3, #1
 8001f76:	73fb      	strb	r3, [r7, #15]
 8001f78:	e004      	b.n	8001f84 <SW_u8GetState+0x60>
				 }
				 else  if ( result == LOW )
 8001f7a:	7bbb      	ldrb	r3, [r7, #14]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d101      	bne.n	8001f84 <SW_u8GetState+0x60>
				 {
					 status = NOT_PRESSED;
 8001f80:	2300      	movs	r3, #0
 8001f82:	73fb      	strb	r3, [r7, #15]
				 }
			}
		#endif
		}

	return status;
 8001f84:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	3714      	adds	r7, #20
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr
 8001f92:	bf00      	nop
 8001f94:	40020c10 	.word	0x40020c10
 8001f98:	40020410 	.word	0x40020410

08001f9c <USART_voidInit>:
//}



void USART_voidInit(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	af00      	add	r7, sp, #0
	/*		 RCC CLK EN for USART		 */
	RCC_voidEnablePeripheralCLK(RCC_ABP1, 17);// USART2 enable
 8001fa0:	2111      	movs	r1, #17
 8001fa2:	2002      	movs	r0, #2
 8001fa4:	f7ff faea 	bl	800157c <RCC_voidEnablePeripheralCLK>

	/*		 RCC GPIOA EN 				 */
	RCC_voidEnablePeripheralCLK(RCC_AHB1,RCC_GPIOA_EN);
 8001fa8:	2100      	movs	r1, #0
 8001faa:	2000      	movs	r0, #0
 8001fac:	f7ff fae6 	bl	800157c <RCC_voidEnablePeripheralCLK>

	/* 	TX --> PA2  Mode (AF) 	&&	 RCC_GPIOA EN 	*/
	GPIO_void_setPin_Direction(PORT_A, PIN2, ALTERNATIVE_FUNCTION_MODE);
 8001fb0:	2202      	movs	r2, #2
 8001fb2:	2102      	movs	r1, #2
 8001fb4:	2000      	movs	r0, #0
 8001fb6:	f7fe fac7 	bl	8000548 <GPIO_void_setPin_Direction>
	GPIO_void_setPin_Output_Type(PORT_A, PIN2, OUTPUT_PUSH_PULL);
 8001fba:	2200      	movs	r2, #0
 8001fbc:	2102      	movs	r1, #2
 8001fbe:	2000      	movs	r0, #0
 8001fc0:	f7fe fdb4 	bl	8000b2c <GPIO_void_setPin_Output_Type>


	/* 	RX --> PA3  Mode (AF) 	&&	 RCC_GPIOA EN 	*/

	GPIO_void_setPin_Direction(PORT_A, PIN3, ALTERNATIVE_FUNCTION_MODE);
 8001fc4:	2202      	movs	r2, #2
 8001fc6:	2103      	movs	r1, #3
 8001fc8:	2000      	movs	r0, #0
 8001fca:	f7fe fabd 	bl	8000548 <GPIO_void_setPin_Direction>
	GPIO_void_setPin_Output_Type(PORT_A, PIN3, OUTPUT_PUSH_PULL);
 8001fce:	2200      	movs	r2, #0
 8001fd0:	2103      	movs	r1, #3
 8001fd2:	2000      	movs	r0, #0
 8001fd4:	f7fe fdaa 	bl	8000b2c <GPIO_void_setPin_Output_Type>

	/* 		Alternative function 7 for PA2	 	 */
	GPIO_voidSetAltFunction(PORT_A, PIN2, AF7);
 8001fd8:	2207      	movs	r2, #7
 8001fda:	2102      	movs	r1, #2
 8001fdc:	2000      	movs	r0, #0
 8001fde:	f7fe ff5b 	bl	8000e98 <GPIO_voidSetAltFunction>

	/* 		Alternative function 7 for PA3  	 */
	GPIO_voidSetAltFunction(PORT_A, PIN3, AF7);
 8001fe2:	2207      	movs	r2, #7
 8001fe4:	2103      	movs	r1, #3
 8001fe6:	2000      	movs	r0, #0
 8001fe8:	f7fe ff56 	bl	8000e98 <GPIO_voidSetAltFunction>


	/* Set baud rate 9600 on HSI = 16 MHZ */
	USART2->BRR = 0x0683;
 8001fec:	4b14      	ldr	r3, [pc, #80]	; (8002040 <USART_voidInit+0xa4>)
 8001fee:	f240 6283 	movw	r2, #1667	; 0x683
 8001ff2:	609a      	str	r2, [r3, #8]

	/*	Receive Enable	*/
	SET_BIT(USART2->CR1,2);
 8001ff4:	4b12      	ldr	r3, [pc, #72]	; (8002040 <USART_voidInit+0xa4>)
 8001ff6:	68db      	ldr	r3, [r3, #12]
 8001ff8:	4a11      	ldr	r2, [pc, #68]	; (8002040 <USART_voidInit+0xa4>)
 8001ffa:	f043 0304 	orr.w	r3, r3, #4
 8001ffe:	60d3      	str	r3, [r2, #12]

	/*  transmit Enable */
	SET_BIT(USART2->CR1,3);
 8002000:	4b0f      	ldr	r3, [pc, #60]	; (8002040 <USART_voidInit+0xa4>)
 8002002:	68db      	ldr	r3, [r3, #12]
 8002004:	4a0e      	ldr	r2, [pc, #56]	; (8002040 <USART_voidInit+0xa4>)
 8002006:	f043 0308 	orr.w	r3, r3, #8
 800200a:	60d3      	str	r3, [r2, #12]

	/* 	1 Start bit, 8 Data bits, n Stop bit 	 */
	Clear_bit(USART2->CR1,12);
 800200c:	4b0c      	ldr	r3, [pc, #48]	; (8002040 <USART_voidInit+0xa4>)
 800200e:	68db      	ldr	r3, [r3, #12]
 8002010:	4a0b      	ldr	r2, [pc, #44]	; (8002040 <USART_voidInit+0xa4>)
 8002012:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002016:	60d3      	str	r3, [r2, #12]

	/*	 1 stop bit		*/
	Clear_bit(USART2->CR2,12);
 8002018:	4b09      	ldr	r3, [pc, #36]	; (8002040 <USART_voidInit+0xa4>)
 800201a:	691b      	ldr	r3, [r3, #16]
 800201c:	4a08      	ldr	r2, [pc, #32]	; (8002040 <USART_voidInit+0xa4>)
 800201e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002022:	6113      	str	r3, [r2, #16]
	Clear_bit(USART2->CR2,13);
 8002024:	4b06      	ldr	r3, [pc, #24]	; (8002040 <USART_voidInit+0xa4>)
 8002026:	691b      	ldr	r3, [r3, #16]
 8002028:	4a05      	ldr	r2, [pc, #20]	; (8002040 <USART_voidInit+0xa4>)
 800202a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800202e:	6113      	str	r3, [r2, #16]

	/*	 Enable USART2	 */
	SET_BIT(USART2->CR1,13);
 8002030:	4b03      	ldr	r3, [pc, #12]	; (8002040 <USART_voidInit+0xa4>)
 8002032:	68db      	ldr	r3, [r3, #12]
 8002034:	4a02      	ldr	r2, [pc, #8]	; (8002040 <USART_voidInit+0xa4>)
 8002036:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800203a:	60d3      	str	r3, [r2, #12]

}
 800203c:	bf00      	nop
 800203e:	bd80      	pop	{r7, pc}
 8002040:	40004400 	.word	0x40004400

08002044 <USART_voidTransmit>:

void USART_voidTransmit(u8 Copy_u8TransmitData)
{
 8002044:	b480      	push	{r7}
 8002046:	b085      	sub	sp, #20
 8002048:	af00      	add	r7, sp, #0
 800204a:	4603      	mov	r3, r0
 800204c:	71fb      	strb	r3, [r7, #7]
	/*		Local Variable for time out 	*/
	u32 Local_u32TimeOut = 0;
 800204e:	2300      	movs	r3, #0
 8002050:	60fb      	str	r3, [r7, #12]

	/*	 Write Data to send		*/
	USART2->DR = Copy_u8TransmitData;
 8002052:	4a0c      	ldr	r2, [pc, #48]	; (8002084 <USART_voidTransmit+0x40>)
 8002054:	79fb      	ldrb	r3, [r7, #7]
 8002056:	6053      	str	r3, [r2, #4]

	/* 		polling with time out technique		 */
	while( (GET_BIT(USART2->SR,7) == 0) && (Local_u32TimeOut < 100000000) )
 8002058:	e002      	b.n	8002060 <USART_voidTransmit+0x1c>
	{
		Local_u32TimeOut++;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	3301      	adds	r3, #1
 800205e:	60fb      	str	r3, [r7, #12]
	while( (GET_BIT(USART2->SR,7) == 0) && (Local_u32TimeOut < 100000000) )
 8002060:	4b08      	ldr	r3, [pc, #32]	; (8002084 <USART_voidTransmit+0x40>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	09db      	lsrs	r3, r3, #7
 8002066:	f003 0301 	and.w	r3, r3, #1
 800206a:	2b00      	cmp	r3, #0
 800206c:	d103      	bne.n	8002076 <USART_voidTransmit+0x32>
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	4a05      	ldr	r2, [pc, #20]	; (8002088 <USART_voidTransmit+0x44>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d9f1      	bls.n	800205a <USART_voidTransmit+0x16>
	}
}
 8002076:	bf00      	nop
 8002078:	3714      	adds	r7, #20
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr
 8002082:	bf00      	nop
 8002084:	40004400 	.word	0x40004400
 8002088:	05f5e0ff 	.word	0x05f5e0ff

0800208c <USART_u8Receive>:

u8 USART_u8Receive(void)
{
 800208c:	b480      	push	{r7}
 800208e:	b083      	sub	sp, #12
 8002090:	af00      	add	r7, sp, #0
	/*		Local Variable for time out 	*/
	u32 Local_u32TimeOut = 0;
 8002092:	2300      	movs	r3, #0
 8002094:	607b      	str	r3, [r7, #4]

	/* 		Waiting for data to be ready to read with time out   	*/
	while( (GET_BIT(USART2->SR,5) == 0) && (Local_u32TimeOut < 100000000) )
 8002096:	e002      	b.n	800209e <USART_u8Receive+0x12>
	{
		Local_u32TimeOut++;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	3301      	adds	r3, #1
 800209c:	607b      	str	r3, [r7, #4]
	while( (GET_BIT(USART2->SR,5) == 0) && (Local_u32TimeOut < 100000000) )
 800209e:	4b0a      	ldr	r3, [pc, #40]	; (80020c8 <USART_u8Receive+0x3c>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	095b      	lsrs	r3, r3, #5
 80020a4:	f003 0301 	and.w	r3, r3, #1
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d103      	bne.n	80020b4 <USART_u8Receive+0x28>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	4a07      	ldr	r2, [pc, #28]	; (80020cc <USART_u8Receive+0x40>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d9f1      	bls.n	8002098 <USART_u8Receive+0xc>
	}
	return USART2->DR;
 80020b4:	4b04      	ldr	r3, [pc, #16]	; (80020c8 <USART_u8Receive+0x3c>)
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	b2db      	uxtb	r3, r3
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	370c      	adds	r7, #12
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr
 80020c6:	bf00      	nop
 80020c8:	40004400 	.word	0x40004400
 80020cc:	05f5e0ff 	.word	0x05f5e0ff

080020d0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80020d0:	480d      	ldr	r0, [pc, #52]	; (8002108 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80020d2:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80020d4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80020d8:	480c      	ldr	r0, [pc, #48]	; (800210c <LoopForever+0x6>)
  ldr r1, =_edata
 80020da:	490d      	ldr	r1, [pc, #52]	; (8002110 <LoopForever+0xa>)
  ldr r2, =_sidata
 80020dc:	4a0d      	ldr	r2, [pc, #52]	; (8002114 <LoopForever+0xe>)
  movs r3, #0
 80020de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020e0:	e002      	b.n	80020e8 <LoopCopyDataInit>

080020e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020e6:	3304      	adds	r3, #4

080020e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020ec:	d3f9      	bcc.n	80020e2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020ee:	4a0a      	ldr	r2, [pc, #40]	; (8002118 <LoopForever+0x12>)
  ldr r4, =_ebss
 80020f0:	4c0a      	ldr	r4, [pc, #40]	; (800211c <LoopForever+0x16>)
  movs r3, #0
 80020f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020f4:	e001      	b.n	80020fa <LoopFillZerobss>

080020f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020f8:	3204      	adds	r2, #4

080020fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020fc:	d3fb      	bcc.n	80020f6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80020fe:	f000 f811 	bl	8002124 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002102:	f7ff fbd5 	bl	80018b0 <main>

08002106 <LoopForever>:

LoopForever:
    b LoopForever
 8002106:	e7fe      	b.n	8002106 <LoopForever>
  ldr   r0, =_estack
 8002108:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800210c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002110:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8002114:	08002250 	.word	0x08002250
  ldr r2, =_sbss
 8002118:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 800211c:	20000038 	.word	0x20000038

08002120 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002120:	e7fe      	b.n	8002120 <ADC_IRQHandler>
	...

08002124 <__libc_init_array>:
 8002124:	b570      	push	{r4, r5, r6, lr}
 8002126:	4d0d      	ldr	r5, [pc, #52]	; (800215c <__libc_init_array+0x38>)
 8002128:	4c0d      	ldr	r4, [pc, #52]	; (8002160 <__libc_init_array+0x3c>)
 800212a:	1b64      	subs	r4, r4, r5
 800212c:	10a4      	asrs	r4, r4, #2
 800212e:	2600      	movs	r6, #0
 8002130:	42a6      	cmp	r6, r4
 8002132:	d109      	bne.n	8002148 <__libc_init_array+0x24>
 8002134:	4d0b      	ldr	r5, [pc, #44]	; (8002164 <__libc_init_array+0x40>)
 8002136:	4c0c      	ldr	r4, [pc, #48]	; (8002168 <__libc_init_array+0x44>)
 8002138:	f000 f818 	bl	800216c <_init>
 800213c:	1b64      	subs	r4, r4, r5
 800213e:	10a4      	asrs	r4, r4, #2
 8002140:	2600      	movs	r6, #0
 8002142:	42a6      	cmp	r6, r4
 8002144:	d105      	bne.n	8002152 <__libc_init_array+0x2e>
 8002146:	bd70      	pop	{r4, r5, r6, pc}
 8002148:	f855 3b04 	ldr.w	r3, [r5], #4
 800214c:	4798      	blx	r3
 800214e:	3601      	adds	r6, #1
 8002150:	e7ee      	b.n	8002130 <__libc_init_array+0xc>
 8002152:	f855 3b04 	ldr.w	r3, [r5], #4
 8002156:	4798      	blx	r3
 8002158:	3601      	adds	r6, #1
 800215a:	e7f2      	b.n	8002142 <__libc_init_array+0x1e>
 800215c:	08002248 	.word	0x08002248
 8002160:	08002248 	.word	0x08002248
 8002164:	08002248 	.word	0x08002248
 8002168:	0800224c 	.word	0x0800224c

0800216c <_init>:
 800216c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800216e:	bf00      	nop
 8002170:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002172:	bc08      	pop	{r3}
 8002174:	469e      	mov	lr, r3
 8002176:	4770      	bx	lr

08002178 <_fini>:
 8002178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800217a:	bf00      	nop
 800217c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800217e:	bc08      	pop	{r3}
 8002180:	469e      	mov	lr, r3
 8002182:	4770      	bx	lr
